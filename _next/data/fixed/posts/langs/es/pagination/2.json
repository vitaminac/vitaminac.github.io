{
  "pageProps": {
    "lang": "es",
    "pagination": 2,
    "allPostsData": [
      {
        "title": "VPPL - Vivienda de Protección Pública de Precio Limitado",
        "markdownContentSource": "\nVivienda de Protección Pública de Precio Limitado (**VPPL**) es una vivienda protegida con una superficie construida máxima de 150 $m^2$ y precio limitado a un máximo y que cumple las condiciones de destino, uso y calidad que están regulados por gobierno.\n\nLos siguientes requisitos de acceso deben cumplirse en el **momento de la adjudicación de la vivienda**:\n\n* Ser mayor de edad\n* Ser español o residente en España.\n* Tener unos ingresos familiares que no excedan de 7,5 el **IPREM** para las viviendas de precio limitado (VPPL).\n* Ninguno de los miembros de la unidad familiar puede ser titular del otra vivienda en todo el territorio nacional.\n\nPara el cálculo de los ingresos, estos se ponderarán mediante la aplicación de los siguientes coeficientes multiplicativos correctores establecidos en función del número de miembros de la unidad de convivencia:\n\n* Coeficiente 0,800; para unidades de uno o dos miembros.\n* Coeficiente 0,776; para unidades de tres miembros.\n* Coeficiente 0,744; para unidades de cuatro miembros.\n* Coeficiente 0,704; para unidades de cinco miembros.\n* Coeficiente 0,700; para unidades de seis o más miembros.\n\nSe puede comprobar IPREM de cada año [por aqui](https://www.iprem.com.es/). Utiliza la referencia de 14 pagas.\n\nPor ejemplo para calcular límites de ingreso para VPPL tomando en cuenta IPREM de 2022 con valor anual de 14 pagas igual a $8106.28$. Los límite por numeros de unidades familiares son:\n\n|                  | Fórmula                            | Límite   |\n|------------------|------------------------------------|----------|\n| 1 ó 2 miembros   | $\\frac{8106.28 \\times 7.5}{0.8}$   | 75996.38 |\n| 3 miembros       | $\\frac{8106.28 \\times 7.5}{0.776}$ | 78346.78 |\n| 4 miembros       | $\\frac{8106.28 \\times 7.5}{0.744}$ | 81716.53 |\n| 5 miembros       | $\\frac{8106.28 \\times 7.5}{0.704}$ | 86359.52 |\n| 6 miembros o mas | $\\frac{8106.28 \\times 7.5}{0.700}$ | 86853.00 |\n\nLos cálculos para contratos de adjudicación formalizados desde inicio de julio del año hasta final de junio de año que viene, se utiliza valor de renta e IPREM de año pasado. Por ejemplo, contrato de adjudicación formalizado desde 01/07/2023 al 30/06/2024 utiliza valor de renta y de IPREM de 2022.\n\n## Referencia\n\n* [Vivienda Protegida de Nueva Construcción](https://www.comunidad.madrid/servicios/vivienda/vivienda-protegida-nueva-construccion)\n* [Manual de instrucciones de la calculadora de Base Imponible máxima de la unidad familiar](https://www.comunidad.madrid/sites/default/files/doc/vivienda/viv_prot_manual_calculadora_irpf_2023.pdf)\n* [Calcula los ingresos máximos para acceder a una vivienda protegida 2023](https://www.comunidad.madrid/sites/default/files/doc/vivienda/viv_prot_calculadora_ingresos_familiares_2023.xlsx)\n* [Calcula los ingresos máximos para acceder a una vivienda protegida 2022](https://www.comunidad.madrid/sites/default/files/doc/vivienda/viv_prot_calculadora_ingresos_familiares_2022.xls)\n* [Calcula los ingresos máximos para acceder a una vivienda protegida 2021](https://www.comunidad.madrid/sites/default/files/doc/vivienda/viv_prot_calculadora_ingresos_familiares_2021.xls)\n* [Código de la Vivienda de la Comunidad de Madrid - Página 203 - Artículo 7. Requisitos de acceso a las viviendas](https://www.boe.es/biblioteca_juridica/codigos/codigo.php?id=178_Codigo_de_la_Vivienda_de_la_Comunidad_de_Madrid)\n",
        "slug": "vppl",
        "date": "2024-09-01 20:17:51",
        "lang": "es",
        "tags": ["VPPL", "IPREM"],
        "path": "/vppl/index.html"
      },
      {
        "title": "Como calcular un préstamo",
        "markdownContentSource": "\n## ¿En qué consiste un préstamo?\n\nHay varios factores que influyen el rendimiento final de un préstamo\n\n* **Capital** o importe del préstamo: Es el dinero que pides al banco.\n  * **Comisiones**: Son posibles gastos adicionales al préstamo. Hay varios tipos de comisiones, como la comisión de estudio y apertura, la comisión por amortización anticipada o la comisión por cambio de condiciones, comisión de registro. Todo ello se sumará a la hora de calcular el capital del préstamo. La parte de comisiones se refleja a la hora de calcular TAE.\n  * **Servicios incluidos**: Cuando pides un préstamo es posible que te incluyen otros servicios p.j. en caso de coche es posible que incluyen garantía extra, mantenimiento, etc. Tenemos que fijar bien en esos, que son coste que forma parte del capital y no es expresado a través de TIN ni TAE.\n* **Intereses** del préstamo: Es la cantidad que te cobra la entidad por prestarte dinero.\n* **Cuota** del préstamo: Es el dinero que vas a devolver en cada mes al banco hasta que termines de pagar el préstamo. Esta cuota se compone dos partes: una es el dinero que efectivamente vas devolviendo del préstamo, mientras que la otra son los intereses.\n* **Plazo de amortización**: Es el tiempo durante el cual, en condiciones normales y sin amortizaciones anticipadas, estarás pagando las cuotas.\n* **Sistema de amortización**: Marca la forma en la que devolverás el dinero. Hay más de una forma de calcular la amortización en un préstamo y más de un modelo de amortización. El más habitual en España es el sistema de **amortización francés** o de **cuotas constantes**, que hace que la cuota a pagar sea la misma a lo largo de toda la vida del préstamo.\n\n## ¿Cómo calcular el capital de un préstamo personal?\n\nLa mayor parte del capital es el precio del producto que quieres comprar menos el pago inicial, por ejemplo en mi caso quiero comprar un coche de $12796.18$ euros, he pagado $6796$ como desembolso inicial, resulta a $6000.18$ como el dinero que necesito pedir al banco. Pero tambien hay que tener en cuenta los servicioes incluidos y comisiones. En mi caso\n\n* la parte de base inicial que es: $6001.01$, creo que es por erro de calculo de la parte de banco, resulta un valor diferente.\n* la parte de servicios incluidos que son: $37.7$ (Seguro Neumáticos) + $299.80$ (programa de mantenimiento) + $61.14$ (servicio de recogida de coche) + $152.82$ (seguro de llave) + $387.2$ (extension de garantia de coche) + $608.54$ (seguro de coche de primer año) = $1547.2$\n* la parte de comisiones son: $267.11$ (comisión de apertura) + $47$ (gastos de registro) + $356.49$ (seguros conditionantes) = $670.6$ euros.\n  * donde seguros conditionantes son: $272.61$ (seguro de pagos) + $83.88$ (seguro familiar) = $356.49$ euros\n\n$$\n6001.01 + 1547.2 + 670.6 = 8218.81\n$$\n\n## ¿Cómo calcular los intereses de un préstamo personal?\n\nPara poder calcular los intereses de un préstamo es esencial que te fijes en Tipo de Interés Nominal (TIN). TIN es concepto oficial establecido por el [Banco de España](https://clientebancario.bde.es/pcb/es/menu-horizontal/productosservici/relacionados/tiposinteres/). El TIN refleja el porcentaje fijo de pago por el dinero prestado, el TIN no tiene en cuenta ningún tipo de gasto asociado a la operación. Con ese dato en mente tenemos siguiente fórmula.\n\n$$\n\\text{Cantidad a solicitar} \\times \\text{TIN} = \\text{intereses}\n$$\n\nEsta fórmula solo es válido para una operación a 12 meses. En otro caso tenemos que realizar (o pedírselo al banco) un cuadro de amortización del préstamo, donde tendrás detallados los intereses que pagas cada mes y los que abonarías en total. La razón es que los intereses que pagas por un préstamo personal se calculan sobre el capital restante.\n\n## ¿Cómo calcular la cuota de un préstamo personal?\n\nAl firmar un préstamo o una hipoteca, la mayoría de personas tiende a fijarse en la cuota, que es lo que pagarán cada mes. Banco de España ofrece un [simulador online](https://app.bde.es/asb_www/es/cuota.html#/principalCuota) para facilitar el cálculo de cuota cuando se trata de **amortización francés** o **cuota fija mensual**.\n\n![Simulador de cuota](simulador-cuota.png)\n\nSi queremos calcular nosotros manualmente el proceso es siguiente\n\nPor ejemplo pedimos un préstamo 8218.81 euros con TIN 4.85% fijo anual a devolver en 3 años. Al ser un préstamo con cuota mensual, hay que normalizar tanto el TIN como el número de plazos a pagar, quedándonos los siguientes valores: TIN mensual $i = \\frac{0.0485}{12} \\approx 0.00404167$ y número de plazos $n = 12 \\times 3 = 36$ meses. Usamos la fórmula de la renta calculamos cuota mensual.\n\n$$\n\\begin{aligned}\n\\text{Capital} &= \\text{cuota} \\times \\frac{1 - (1 + i)^{-n}}{i}\\\\\n8218.81 &= \\text{cuota} \\times \\frac{1 - (1 + 0.00404167)^{-36}}{0.00404167}\\\\\n\\text{cuota} &= 8218.81 \\times \\frac{0.00404167}{1 - (1 + 0.00404167)^{-36}}\\\\\n\\text{cuota} &= 245.77\n\\end{aligned}\n$$\n\n### Calcular la tabla de amortización\n\nUna vez resuelto la cuota mensual del préstamo, podemos deducir la cuota de cada mes cuánto corresponde a la deuda original y cuánto al pago de intereses con la siguiente tabla\n\n![Tabla Amortización](tabla-amortizacion.png)\n\nPuedes descargar [aquí](tabla-amortizacion.xlsx) Excel para vuestro cálculo.\n\n### Derivación de la fórmula de la renta\n\nSi no te interesa la parte de demostración matemática puedes saltar esta sección. Si tenemos $C$ la capital original, $c$ la cuota mensual, $i$ el porcentaje de interés mensual, $n$ número de meses, $r_{j}$ la capital residual en el mes $j$, $C_{j}$ capital pagado en el mes $j$, sabemos las siguientes relaciones\n\n$$\nC_{j} = c - r_{j-1} \\cdot i\n$$\n\ny\n\n$$\nr_{j} = r_{j-1} - C_{j}\n$$\n\nTal que podemos deducir que\n\n$$\nC_{j+1} = C_{j} \\cdot (1 + i)\n$$\n\nporque\n\n$$\n\\begin{aligned}\nC_{j + 1} &= c - r_{j} \\cdot i\\\\\n&= c - (r_{j-1} - C_{j}) \\cdot i\\\\\n&= (c - r_{j-1} \\cdot i) + C_{j} \\cdot i\\\\\n&= C_{j} + C_{j} \\cdot i\\\\\n&= C_{j} \\cdot (1 + i)\\\\\n\\end{aligned}\n$$\n\nDesde la observación de la tabla de amortización vemos que la última cuota siempre es $C_{n}$ más su propio interés generado $C_{n} \\cdot i$. Con el resultado anterior tenemos\n\n$$\n\\begin{aligned}\nC_{n} &= \\frac{c}{1 + i}\\\\\nC_{n-1} &= \\frac{C_{n}}{1 + i} = \\frac{c}{(1 + i)^2}\\\\\n& \\vdots\\\\\nC_{j} &= \\frac{c}{(1+i)^{n-j+1}}\n\\end{aligned}\n$$\n\nCon todo esos llegaremos a siguiente conclusión\n\n$$\n\\begin{aligned}\nC &= \\sum_{j=1}^{n}{C_{j}}\\\\\n&= \\sum_{j=1}^{n}{\\frac{c}{(1+i)^{n-j+1}}}\\\\\n&= \\sum_{j=1}^{n}{\\frac{c}{(1+i)^{j}}}\\\\\n&= ((\\sum_{j=1}^{n}{\\frac{c}{(1+i)^{j}}}) + c) - c\\\\\n&= c \\cdot \\frac{1 - (1+i)^{-(n+1)}}{1-\\frac{1}{1+i}} - c\\\\\n&= c \\cdot \\frac{1 - (1+i)^{-(n+1)}}{\\frac{i}{1+i}} - c\\\\\n&= c \\cdot \\frac{(1 + i) - (1+i)^{-n}}{i} - c\\\\\n&= c \\cdot \\frac{(1 + i) - (1+i)^{-n}}{i} - \\frac{c \\cdot i}{i}\\\\\n&= c \\cdot \\frac{1 - (1+i)^{-n}}{i}\\\\\n\\end{aligned}\n$$\n\ndonde el paso $(\\sum_{j=1}^{n}{\\frac{c}{(1+i)^{j}}}) + c = c \\cdot \\frac{1 - (1+i)^{-(n+1)}}{1-\\frac{1}{1+i}}$ es por la regla de suma de progresión geométrica.\n\n## TAE\n\nA diferencia del TIN, la TAE (Tasa Anual Equivalente) toma en consideración las comisiones, el plazo de amortización, la capital. Podemos calcular TAE a partir de TIN con el [simulador](https://app.bde.es/asb_www/es/tae.html#/principalTAE) de Banco de España.\n\n![Simulador de TAE](simulador-tae.png)\n\nDonde capital inicial es importe total del crédito que incluye las comisiones y seguro, y gastos en origen o constitución es la suma de costes adicionales como comisiones y seguro. El cálculo de TAE es lo mismo resolver siguiente ecuación. Hay que tener en cuenta que TAE anual y TAE mensual no es relación linear, sino es $1 + TAE_{\\text{anual}} = (1 + TAE_{\\text{mensual}})^{12}$\n\n$$\n\\text{Importe total del crédito} - \\text{comisiones} - \\text{seguro} = \\sum_{j=1}^{n}{\\frac{c}{(1+\\text{TAE})^{\\frac{j}{12}}}}\n$$\n\nEs difícil resolver la ecuación analíticamente, siguiente algoritmo nos ayuda a encontrar TAE.\n\n{% iframe https://unpkg.com/javascript-playgrounds@1.1.4/public/index.html#data=%7B%22code%22%3A%22function%20calcularCuotaMensual(importeTotal%2C%20TINAnual%2C%20duracionEnMeses)%20%7B%5Cn%20%20const%20TinMensual%20%3D%20TINAnual%20%2F%2012%3B%5Cn%20%20return%20importeTotal%20*%20TinMensual%20%2F%20(1%20-%20Math.pow(1%20%2B%20TinMensual%2C%20-duracionEnMeses))%3B%5Cn%7D%5Cn%5Cnfunction%20calcularTAEConBusquedaBinaria(%5Cn%20%20importeTotal%2C%5Cn%20%20costeAdicional%2C%5Cn%20%20TINAnual%2C%5Cn%20%20duracionEnMeses%5Cn)%20%7B%5Cn%20%20const%20prestacion%20%3D%20importeTotal%20-%20costeAdicional%3B%5Cn%20%20const%20cuotaMensual%20%3D%20calcularCuotaMensual(importeTotal%2C%20TINAnual%2C%20duracionEnMeses)%3B%5Cn%20%20console.log(%60cuota%20mensual%20es%20%24%7BcuotaMensual.toFixed(2)%7D%E2%82%AC%60)%3B%5Cn%20%20let%20left%20%3D%200.0%2C%20right%20%3D%201.0%3B%5Cn%20%20for%20(let%20i%20%3D%200%3B%20left%20%3C%3D%20right%20%26%26%20i%20%3C%20100%3B%20i%2B%2B)%20%7B%5Cn%20%20%20%20const%20guessForTAE%20%3D%20(left%20%2B%20right)%20%2F%202%3B%5Cn%20%20%20%20let%20total%20%3D%200.0%3B%5Cn%20%20%20%20for%20(let%20t%20%3D%201%3B%20t%20%3C%3D%20duracionEnMeses%3B%20t%2B%2B)%20%7B%5Cn%20%20%20%20%20%20total%20%2B%3D%20cuotaMensual%20%2F%20Math.pow(1%20%2B%20guessForTAE%2C%20t%20%2F%2012)%3B%5Cn%20%20%20%20%7D%5Cn%20%20%20%20if%20(total%20%3E%20prestacion)%20%7B%5Cn%20%20%20%20%20%20left%20%3D%20guessForTAE%3B%5Cn%20%20%20%20%7D%20else%20%7B%5Cn%20%20%20%20%20%20right%20%3D%20guessForTAE%3B%5Cn%20%20%20%20%7D%5Cn%20%20%7D%5Cn%20%20return%20left%3B%5Cn%7D%5Cn%5Cnconst%20importeTotal%20%3D%208218.81%3B%20%2F%2F%20incluido%20comisiones%20y%20seguro%5Cnconst%20comisiones%20%3D%20670.6%3B%5Cnconst%20serviciosIncluidos%20%3D%201547.2%3B%5Cnconst%20TINAnual%20%3D%204.85%20%2F%20100%3B%5Cnconst%20duracionEnMeses%20%3D%2036%3B%5Cnconsole.log(%5Cn%20%20%60TAE%20es%20%24%7B%5Cn%20%20%20%20calcularTAEConBusquedaBinaria(%5Cn%20%20%20%20%20%20importeTotal%2C%5Cn%20%20%20%20%20%20comisiones%2C%5Cn%20%20%20%20%20%20TINAnual%2C%5Cn%20%20%20%20%20%20duracionEnMeses%5Cn%20%20%20%20).toFixed(4)%20*%20100%5Cn%20%20%7D%25%60%5Cn)%3B%5Cn%5Cnconsole.log(%5Cn%20%20%60TAE%20real%20es%20%24%7B%5Cn%20%20%20%20calcularTAEConBusquedaBinaria(%5Cn%20%20%20%20%20%20importeTotal%2C%5Cn%20%20%20%20%20%20comisiones%20%2B%20serviciosIncluidos%2C%5Cn%20%20%20%20%20%20TINAnual%2C%5Cn%20%20%20%20%20%20duracionEnMeses%5Cn%20%20%20%20).toFixed(4)%20*%20100%5Cn%20%20%7D%25%60%5Cn)%3B%5Cn%22%7D 750 1300 %}\n\n## Referencia\n\n* [Cómo calcular los intereses que pagarás por un préstamo personal](https://www.kelisto.es/prestamos/consejos-y-analisis/como-calcular-los-intereses-que-pagaras-por-un-prestamo-4304)\n* [Tabla Amortización - calcular mensualidad online](http://www.tabla-amortizacion.es/)\n* [Préstamo: cómo calcular los intereses](https://money.movistar.es/blog/calcular-cuota-prestamo/)\n* [Rentas](https://ciberconta.unizar.es/ifinanzas/02-lasrentas.htm)\n* [LA TASA ANUAL EQUIVALENTE (T.A.E.): concepto y cálculo](http://www.sociedadelainformacion.com/Principal/n10articulos07/LA%20TASA%20ANUAL%20EQUIVALENTE.pdf)\n* [CÁLCULO DE LAS TASAS DE COSTE O RENTABILIDAD DE OPERACIONES](http://app.bde.es/clf_www/leyes.jsp?id=9282#10450_113)\n* [Calculadora – Cálculo de intereses y simulador de préstamo](https://www.top5credits.com/es/calculadora/)\n* [Así se calcula un préstamo](https://www.ennaranja.com/economia-facil/como-calcular-prestamo/)\n* [¿Qué es el TIN y en qué se diferencia de la TAE?](https://www.bbva.com/es/tin-se-diferencia-la-tae/)\n* [Plazo de amortización](https://clientebancario.bde.es/pcb/es/menu-horizontal/productosservici/financiacion/hipotecas/guia-textual/primerospasoscon/Plazo_de_amortizacion.html)\n* [Ley 16/2011, de 24 de junio, de contratos de crédito al consumo](https://www.boe.es/buscar/act.php?id=BOE-A-2011-10970)\n* [贷款/买房，利息怎么算？不要被忽悠了！李永乐老师讲等额本金和等额本息算法](https://www.youtube.com/watch?v=T6FBfNpiBYw)",
        "slug": "Prestamo",
        "date": "2021-10-23 12:09:41",
        "lang": "es",
        "tags": ["TAE", "TIN", "prestamo", "Economy"],
        "path": "/Prestamo/index.html"
      },
      {
        "title": "Grafico Por Computador",
        "markdownContentSource": "\n# Gráfico por computador\n\n## Definición\n\nLas técnicas relacionadas con la **generación de imágenes** en un computado, su proceso consiste en un conjunto de operaciones sobre un **modelo informático e datos(Modelado)** para obtener una **representación gráfica(Renderizado)**.\n\n**La imagen puede describirse como una representación de la variación de una magnitud o un parámetro sobre una superficie**, casi siempre será la **intensidad de la luz**. Una imagen está compuesta de **pixeles** y se almacenan de forma digital con una **precisión** y **número de bits**.\n\nLa imagen que percibimos depende de geometría, características de la luz, características de los materiales.\n\n## Cause gráfico\n\n* Se **divide** el proceso de generación en etapas\n* **Las salidas de una etapa son las entradas de la siguiente**\n* Cada etapa debe tener sus propios recursos\n* **Permite paralelizar etapas**\n\n0. Aplicación: Selecciona las primitivas a pintar y configura el cause \n1. **Transformaciones**\n    1. Se transforma de **coordenadas del modelo** a **coordenadas del mundo**, el **orden** en el que se aplican las coordenadas influye en el resultado final.\n    2. Se transforma de **coordenadas del mundo** a **coordenadas de la cámara**.\n2. **Proyección**: Transformación las coordenadas sobre el plano de vista (2D), ademas hay que pasar de coordenadas normalizadas a coordenadas del frame buffer.\n    1. **Ortográfica**\n    2. **Perspectiva**\n    3. **Viewport**: Definir en que parte de la imagen se va a pintar\n3. **Iluminación**: Calcular los colores\n    * A nivel de vertice\n    * A nivel de fragmento\n4. **Ensamblado**: Agrupa vertices en primitivas\n5. Visibilidad I\n    1. **Culling**\n    2. **Clipping**\n6. **Rasterizado**: Transforma las primitivas en **fragmentos (píxel + datos asociados)**, el valor de los parámetros del fragmento **se interpola**\n7. **Sombreado**: Colorea los fragmentos\n8. Visibilidad II: **Z-buffer** para determinar pixel ocultado por otro\n9. Operaciones con la imagen: blending, motion blur, cartoon filter, gaussian blur, **antialiasing**\n\n## Técnica de modelado\n\nUn modelo suele tener\n\n* **Distribución espacial** y de la forma de los componentes\n* La **conectividad**\n* Información adicional para su uso\n\n### Propiedades deseables en un modelo \n\n* **Precisión**\n* **Dominio**\n* **Ausencia de ambigüedad**\n* **Unicidad**\n* **Cierre**\n* **Compacta**\n* **Eficiencia**\n\n### Modelos de alambre\n\nLa información que se tiene sobre el objeto es un **conjunto de líneas**\n\n### Modelos de mallas\n\nEs conocida como **representación por fronteras**, es necesario definir sus **vértices**, **aristas** y **caras**. Para distinguir fuera y dentro, se usa la **dirección de la normal**. Las caras planas son la forma de representación más extendida y aproxima superficies curvas con precisión dependiente de la resolución. La norma de un vértice a partir de las normales de las caras adyacentes.\n\n1. **Listas no indexadas**\n2. **Listas indexadas**: cada vértice se representa con un índice sobre una lista de coordenadas\n\n![Vertices List](vertices-list.png)\n\nY además:\n\n* Atributos para el renderizado: normales corlo, coordenadas de textura\n* Atributos para la simulación: masa, elasticidad\n* Atributos para la animación: peso del vértice para un determinado hueso\n\n### Representaciones de fronteras no poliédricas\n\n* Parches bicúbicos de Bézier\n* Parches de Catmull-Rom\n* Splines uniformes\n\n### Modelos multiresolución\n\nSe basan en el concepto de **LOD (Level of detail)**\n\n* Distancia a la cámara\n* La orientación respecto a la cámara\n* Posición de las luces\n\n### Otros\n\n* Modelos de alambre: Se representa por un conjunto de líneas\n* Primitivas parametrizables\n* Representaciones de desplazamiento o barrido\n* Volúmenes contenedores: Facilita la **detección de colisiones** y los objetos complejos pueden ser aproximados mediante una **jerarquía de objetos** más simples.\n* Representaciones de partición espacial\n* Geometría sólida constructiva: Un objeto se almacena como un árbol binario\n* Modelos basados en campos escalares: Superficies definidas por un **conjunto de ecuaciones**, Las superficies se deforman en la proximidad de otras, dando lugar a transiciones suaves y permitiendo obtener formas complejas utilizando un número pequeño de dichas primitivas.\n\n## Visibilidad\n\n**Determinar qué elementos son visibles** desde un punto de vista dado y cuales no. **Debemos eliminar del cause aquellos elementos que no son visibles en eapas tempranas**.\n\n### Etapa de aplicacion\n\nLa CPU indica a la GPU que objetos debe de mostrar. Si sabemos que algo no se va a ver, pues **no se le pasa**. p.j. basados en técnicas de subdivisión del espacio.\n\n* BSP (Binary Space Partition): navegación por edificios y ciudades\n* KD-Trees, se utilizan para acelerar algoritmos basados en Ray Tracing\n\n### En el cause gráfico\n\n#### A nivel de primitiva\n\n##### Clipping\n\n* Eliminar partes fuera del volumen de frustum. \n\n![Clipping](clipping-frustum.png)\n![Clipping](clipping.png)\n\nDivide los vértices en dos listas, parte visible y parte invisible\n\n![Clipping Group](clipping-group.png)\n![Clipping Intersect](clipping-intersect.png)\n\n**OpenGL proyecta todo antes de hacer clipping, culling, se hace despues y es más facil ver sus coordenadas están o no en -1 y 1**. Puede originar apariciones/desapariciones repentinas (utilización de niebla para aminorarlo).\n\n![Visible Volume](visible-volume.png)\n![Normalized Volume](normalized-volume.png)\n![Clipping Cut](clipping-cut.png)\n\nRecorte en el plano normal al eje \"Y\"\n\n![Clipping Formula](clipping-formula.png)\n\n* La proyección en perspectiva al volumen auxiliar es no lineal en la coordenada Z\n* Esto provoca que se pierda resolución para los objetos situados cerca del plano \"far\" cuando el plano \"near\" está próximo al origen.\n\n##### Culling\n\nEliminación de caras ocultas que **no sean visibles por la cámara dada su orientación**. Se analiza el **signo del producto escalar** del vector de visualización con la normal a la superficie.\n\n#### A nivel de primitiva o píxel\n\n##### Algoritmo del pintor\n\nSe dibujan todos los polígonos que aparecen en la escena **empezando por los más alejados**, de manera que los polígonos situados en primer plano se dibujan sobre los polígonos situados en el fondo. \n\n##### Buffer de profundidad (**z-buffer**)\n\n**Determinar la profundidad (coordenada z) de cada fragmento**. El Z-buffer está **inicialmente vacío**. Cada vez que un fragmento se dibuje, la coordenada z del fragmento es comparada con el valor actual de dicha posición en el buffer.\n\n* Si es menor, se sobrescribe el buffer de color y se actualiza buffer de profundidad con su z.\n* Si es mayor, éste se descarta.\n\n![Z Buffer](z-buffer.png)\n\n##### Ray Tracing\n\n## Iluminación\n\n![Illumination](illumination.png)\n\nEntendemos por modelo de iluminación el **cálculo de la intensidad de cada color** (RGB por ejemplo) para cada punto de la escena, que puede intervenir\n\nSe ilumina un punto teniendo en cuenta exclusivamente\n\n* Las **luces activas**\n* El **material del objeto**\n* La **orientación del objeto** con respecto a la luz.\n* La **orientación y posición de la cámara** respecto a la superficie y a las fuentes de luz\n* El modelo de iluminación\n\n![Illumination](illumination-light.png)\n\n### Luces\n\n![Light](light.png)\n\n#### **Luces direccionales**\n\n* Luces **situadas en el infinito**\n* **Paralelos**\n\n#### **Luces puntuales**\n    \n* Luces **sin dimensión**\n* Emiten luz **radial**\n\n#### **Luz focal**\n\n* Luz situada en el espacio con una **dirección principal**\n* Puede definirse una zona de penumbra\n\n#### **Luces de área**\n\n* Luces con 1 o más dimensiones.\n* **NO utilizadas en modelos de iluminación local**\n\n### Modelos de iluminación\n\n#### Modelos locales\n\nSólo se considera la interacción fuentes de **luz-objetos**.\n\n* Forward rendering: proyectar los objetos sobre el plano de vista\n* Ray casting (backward rendering): trazar rayos desde la cámara a los objetos\n* Deferred rendering: a se pre-procesan los datos y en la siguiente se calcula el color de cada píxel\n\n##### Modelo de iluminación de Phong\n\nEl modelo de **iluminación** define la **ecuacion para calcular las intensidades** dado los componentes necesarios\n\n$$\n\\lambda = k_{(emissive, \\lambda)} + I_{(A, \\lambda)} k_{(a, \\lambda)} + \\sum_{I \\in lights} f_{att}^I \\Big( I_{(a, \\lambda)} k_{(a, \\lambda)} + I_{(d, \\lambda)} k_{(d, \\lambda)} \\cos{\\theta} + I_{(e, \\lambda)} k_{(e, \\lambda)} \\cos^{n}{\\alpha} \\Big)\n$$\n\n$\\lambda$ suele reducirse a 3 colores básicos (R, G, B).\n\n![Light Components](light-components.png)\n\n###### Componente **ambiental**\n\nProviene de **todas las direcciones** e ilumina todas las caras del objeto por **igual**.\n\nSe modela con\n\n* Intensidad ambiental: aporte de una determinada luz a la intensidad ambiental ($0 \\le I_a \\le 1$)\n* Coeficiente de reflexión ambiental: ($0 \\le k_a \\le 1$)\n* No depende a la distancia a la fuente ni la orientación\n\n$$\nI_a k_a\n$$\n\n###### Componente **difusa**\n\n**Proviene de una dirección** y **se refleja en todas direcciones**.\n\nSe modela con\n\n* Intensidad de la fuente ($0 \\le I_d \\le 1$)\n* Coeficiente de reflexión difusa: ($0 \\le k_d \\le 1$)\n* $N$: normal de la superficie en el punto P.\n* $L$: vector de incidencia de la luz.\n\n$$\nI_d k_d \\cos{\\theta} = I_d k_d (L \\cdot N)\n$$\n\n###### Componente **especular**\n\n**Proviene de una dirección** y **se refleja en una dirección**. La mayor parte de los rayos de luz que proceden de una fuente se reflejan en su superficie en una dirección determinada. Si la cámara se sitúa en la trayectoria de dichos rayos, captará una mayor intensidad en dicho punto.\n\nSe modela con\n\n* Intensidad del componente especular de la fuente de luz $I_e$\n* coeficiente de reflexión especular ($0 \\le k_e \\le 1$)\n* vector de posición del observador $V$\n* vector de incidencia de la luz $L$\n* coeficiente de la rugosidad de la superficie $n$\n\n$$\nI_e k_e \\cos^{n}{\\alpha} = I_e k_e (R \\cdot V)^n\\\\\nR = 2 (L \\cdot N)N - L\n$$\n\n![Specular](specular-component.png)\n![Specular N](specular-parameter.png)\n\n###### Factor de atenuación\n\nSe puede atenuar la luz en función de la distancia\n\n$$\nf_{att} = \\frac{1}{c_1 + c_2 d + c_3 d^2}\n$$\n\n###### Iluminación emisiva\n\nSe ocupa de simular objetos que emiten luz, se simula con un valor fijo independiente de la luz $k_{emissive}$\n\n##### Modelo de sombreado \n\nDefine cuando cuando y donde aplica la ecuacion para obtener la intensidad de cada puntos.\n\n![Shading Model](shading-model.png)\n\n###### Sombreado plano\n\nTodos los puntos de un polígono se sombrean con el **mismo color**\n\n    gl.glShadeModel(GL2.GL_FLAT);\n\nCorrecto si se verifica:\n    * Fuente de luz en el infinito.\n    * Observador en el infinito.\n    * El polígono representa una superficie plana real del objeto que se modela y no es una aproximación de un objeto curvo\n\n###### Sombreado de **Gouraud**\n\nA partir de la normal en cada vértice, se evalúa la ecuación de iluminación para **cada vértice**. Se realiza una **interpolación bilineal** para obtener la intensidad en cada punto interno.\n\n* Problemas con la reflexión especular\n* se realizan en la etapa de vértices\n\n![Bilinear Interpolation](bilinear-interpolation.png)\n\n    gl.glShadeModel(GL2.GL_SMOOTH);\n\n###### Sombreado de **Phong**\n\nAplazando el cálculo de la iluminación hasta el paso de **sombreado del fragmento**. Por lo tanto,  se interpolan las normales de los vértices y las propiedades de color y se aplica la fórmula de Phong para calcular el color por píxel en lugar de por vértice\n\n#### Modelos globales\n\nSe consideran también las **interacciones mutuas entre objetos**. se tienen en cuenta el resto de elementos de la escena. Suelen estar basados en modelos físicos de la luz (óptica, radiación térmica, radiación electromagnética, etc…)\n\n##### Ray trazing\n\n* Solo se tienen en cuenta los rayos que llegan al punto de vista.\n* Se trazan rayos desde el centro de la proyección\n* Al colisionar con un objeto se calcula\n    * El aporte de todas las fuentes de luz\n    * El rayo reflejado\n    * El rayo refractado\n* Se continúa hasta que\n    * El rayo tiene poca energía\n    * Sale de la escena\n    * Choca con un objeto difuso\n* Resuelve bien\n    * Sombras, reflexiones y refracciones\n    * Luz difusa directa\n* Tiene problemas con\n    * La reflexión difusa\n    * Sombras suaves (luces con área)\n    * coste es elevado\n\n##### Radiosity\n##### Radiancia\n##### Photon Mapping\n\n## Buffer de Stencil\n\n    glEnable(GL_STENCIL_TEST);\n    glStencilFunc(parameters);\n\nEl buffer de estarcido es muy útil para limitar zonas espaciales donde poder dibujar\n\n## Buffer de Acumulación\n\n    glAccum(parameters)\n\nEl buffer de acumulación sirve para capturar el buffer de color en un fotograma y aplicarle acumulaciones del color de otro fotograma/s. Una posible aplicación consiste en simular el efecto de estela de un objeto en movimiento.\n\n## Texturas\n\nLa utilización de texturas aumenta el realismo visual de la imagen sin aumentar número de polígonos.\n\n### Unidimensionales\n\nBandas que varían en una sola dirección, poco usadas\n\n### Bidimensionales\n\nSuelen ser cuadradas y potencias de 2.\n\n### Texturas cúbicas\n\nExtensión de las texturas bidimensionales, muy usadas en mapeos de entornos.\n\n### Tridimensionales\n\nDatos volumétricos\n\n### Diffuse Map\n\nAlmacena coeficientes difusas que refleja la luz difusa\n\n### Specular Map\n\nAlmacena coeficientes especular que refleja la luz especular\n\n### Emissive Map\n\nSimulan objetos que emiten luz.\n\n### Lighting Map\n\nLas sombras y luces estáticas precalculada\n\n### Alpha Blending\n\nLa información de transparencia en escala de grises\n\n### Bump Map\n\nAlmacena la profundidad del fragmento, en escalas de grises.\n\n### Normal Map\n\nModificación de normales para dar sensación de relieve.\n\n### Height Map\n\nAlmacenan las alturas en escalas de grises.\n\n### Displacement Map\n\nSe almacena el desplazamiento de fragmentos o vértices en escalas de grises.\n\n## Coordenadas de Textura\n\nEl rango de coordenadas en el espacio de la textura es entre 0 y 1. Las coordenadas de textura se proporcionan para cada vértice y son interpoladas en el pipeline del procesador gráfico.\n\n### Mapeado Plano\n\n* Se proyecta la figura sobre un plano.\n* Se debe definir la orientación del plano\n\n![Flat Mapping](flat-mapping.png)\n\n### Mapeado Cilíndrico\n\nEl objeto se envuelve en un cilindro. Las coordenadas del objeto se transforman a coordenadas cilíndricas (r, θ, y). A la hora de proyectar la textura sólo se tiene en cuenta el ángulo y la altura.\n\n![Cube Mapping](cube-mapping.png)\n\n## Aliasing en Texturas\n\nEn gráficos, el término aliasing (espacial) se refiere al escalonado que se aprecia en la frontera de las primitivas debido a la limitada resolución de la pantalla.\n\n![Aliasing](aliasing.png)\n\n### Minificación\n\nUn píxel se corresponde con muchos texels\n\n### Magnificación\n\nUn téxel se corresponde con muchos pixels\n\n### Box filter\n\nSe utiliza el texel mas cercano.\n\n![Box Filter](box-filter.png)\n\n### Bilinear filter\n\nUtiliza cuatro texeles e interpola linealmente los valores.\n\n![Bilinear Filter](biliear-filter.png)\n\n### Mipmapping\n\nConsiste en proporcionar además de la textura original un conjunto de versiones más pequeñas de la textura, cada una un cuarto más pequeña que la anterior.\n\n![Mipmapping](mipmapping.png)\n\n### Supersampling\n\nSe toman las 4 esquinas del píxel y se proyectan. Se ponderan los 4 valores segun las distancias.\n\n![Supersampling](supersampling.png)\n\n### Pre-filtering\n\nSe trata el píxel como una región en la textura. Se pondera en función de la región ocupada.\n\n![Pre-filtering](prefiltering.png)\n\n## Alpha Blending\n\nLa intensidad del nuevo pixel vendrá dada por\n\n$$\nrgb = \\alpha \\cdot rgb + (1 - \\alpha) \\cdot rgb\n$$\n\n1. Activar el cálculo de la transparencia\n\n\n    glEnable(GL_BLEND);\n\n2. Especificar la función de cálculo.\n\n\n    glBlendFunc(GL_SRC_ALPHA , GL_ONE_MINUS_SRC_ALPHA);\n\n3. Desactivar la actualización del buffer de profundidad.\n\n\n    glDepthMask(GL_FALSE);\n\n4. Dibujar los objetos transparentes\n5. Deshabilitar las transparencias y volver a habilitar el buffer de profundidad\n\n\n    glDisable(GL_BLEND);\n    glDepthMask(GL_TRUE);\n\n## Reflejos\n\nSe utiliza la posición de la cámara y la normal del objeto para generar la coordenada de textura.\n\n## Sombras\n\n1. Dividir los objetos en sombreadores\n2. Crear un buffer de color en blanco y negro\n3. Deshabilitar texturas, luces …\n4. Renderizar los objetos sombreadores desde el foco lumínico\n5. Almacenar el buffer de color en una textura.\n6. Renderizar la escena proyectando la textura sobre los objetos sombreados, utilizando una matriz de proyección que se usó para generar la textura.\n\nPuede generar \"z-fighting\" con el plano. \n\n    glEnable(GL_POLYGON_OFFSET_FILL)\n    glPolygonOffset\n\n## OpenGL\n\nOpen GL es un **estándar multiplataforma** que define un API para la creación de contenido 2D y 3D que permitan aprovechar las capacidades de computo de dispositivos gráficos. Los fabricantes deben **cumplir las especificaciones**.\n\n* **API de bajo nivel**\n* **Multiplataforma**\n* **Multilenguaje**\n* **Independiente del hardware**\n* Define las **etapas de un pipeline común** para todos los tipos hardware.\n* Es una **máquina de estado** que define un contexto\n* Parte de la información se almacena en el **cliente (CPU)** y parte en el **servidor (GPU)**.\n\n### Modelo de programación\n\nOpenGL se ejecuta de acuerdo a un **estado**.\n\n![OpenGL Pipeline](opengl-pipeline.png)\n\n* Main:\n    * Inicialización del contexto y Framebuffer.\n    * Creación de la ventana.\n    * Loop principal.\n* Loop principal:\n    * Chequear eventos y tomar decisiones.\n    * Actualizar el sistema.\n    * Redibujar.\n    * Redibujar:\n* Limpiar el Framebuffer.\n    * Cambiar estado de dibujado y dibujar.\n\n### Framebuffer\n\nEstá compuesto por la información de color de cada pixel que conforma la imagen. Es común que las aplicaciones gráficas utilicen más de un buffer de color, **“DoubleBuffer”**, un buffer se muestra en pantalla (front buffer) se dibuja sobre otro (back buffer). Cuando el back buffer está listo para ser mostrado, se hace un **glutSwapBuffers** entre las referencias a donde comienza el front y el back buffer.\n\n* buffers de color\n* buffer de profundidad (Z-buffer)\n* stencil buffer\n* multisampling\n\n### GLUT\n\nLa gestión de ventanas, periféricos de entrada (ratón/teclado) y el pintado.\n\n### Etapas del cauce\n\n![OpenGL Pipeline](opengl-pipelines.png)\n\n#### **Etapa de vértices** (programable)\n\n* Entrada: atributos (color, posición, coordenadas de textura, normales…) + …\n* Salida: posición proyectada (variable especial) + variables variantes (propiedades de los vértices transformadas o creadas) + …\n\n#### Ensamblado\n\nCambio en el tipo de datos procesado. Agrupa vértices en puntos, líneas, triángulos…\n\n#### Etapa geométrica (programable, opcional):\n\n* Entrada: primitivas + variables variantes de la etapa de vértices + información de adyacencia + …\n* Salida: nuevas primitivas -> posición proyectada de todos los vértices de las nuevas primitivas (variable especial) + variables variantes de los vértices de dichas primitivas + …\n\n#### Clipping y culling\n\n    glEnable(GL_CULL_FACE)\n\n#### Rasterizado\n\n* Transforma la primitiva a espacio de pantalla. \n* Crea fragmentos.\n* Cambio de tipo de datos\n\n#### Etapa de fragmentos (programable)\n\n* Entrada: variantes interpolados en la etapa de rasterizado\n* Salida: color y profundidad.\n\n#### Operaciones por fragmento: Z-buffer, blending…\n\n#### Operaciones con el frame buffer\n\n### Shaders\n\nUn shader define un programa concurrente para un conjunto de entradas. Las instancias son **independientes** entre sí.\n\n#### Variables\n\n* Atributos: Propiedades de los vértices.\n* Variables uniformes: Parámetros de solo lectura que se mantienen constantes para todos los hilos y en todas las etapas programables\n* Variables variantes: Variables de salida del shader de vértices (propiedades de vértices) y entrada del shader de fragmentos (propiedades de fragmentos). \n* Variables predefinidas: Variables propias de cada etapa con una función especial.\n* Variables locales\n* Valores de píxeles concretos del frame buffer\n\n#### Shader de vértices\n\n![Vertex Shader](vertex-shader.png)\n\n#### Shader de fragementos\n\n![Fragment Shader](fragment-shader.png)\n\n#### Configuración\n\n1. Crear y compilar los shaders\n2. Asociar los shaders a un programa\n3. Dibujar con los shaders\n\n### GLSL\n\n* Atributos: Se declaran con el calificador **in**, p.j. **in vec3 myPosition**\n* Variables uniformes: Se declaran con el calificador **uniform**,  p.j. **uniform mat4 pvm**\n* Variables para siguiente etapa: Se declaran con el calificador **out**, p.j. **out vec3 myNormal**\n* Variables locales: No requieren modificador, p.j. **vec3 myTempVec**\n* Variables predefinidas:\n    * **in int gl_VertexID**\n    * **in int gl_InstanceID**\n    * **in vec4 gl_FragCoord**\n    * **in bool gl_FrontFacing**\n    * **in float gl_ClipDistance**\n    * **in vec2 gl_PointCoord**\n    * **in int gl_PrimitiveID**\n\n#### Acceso\n\n    .x, .y, .z, .w posición o dirección\n    .r, .g, .b, .a color\n    .s, .t, .p, .q coordenadas de textura\n\n* myColor.xyz\n* myColor.rgb\n\n#### Vertex Buffer Object\n\nUn VBO es un buffer que se crea en el espacio de memoria del servidor. Puede ser dos tipo **GL_ARRAY_BUFFER** o **GL_ELEMENT_ARRAY_BUFFER**\n\n* Geometría.\n* Color.\n* Normales.\n* Coordenadas de textura.\n* Índices\n\n--------------------------------------------------------------------\n\n1. Se crea un identificador para el buffer: **glGenBuffers**\n2. Se enlaza el buffer para poder usarlo: **glBindBuffer**\n3. Se suben los datos: **glBufferData**\n4. Se asigna al atributo: **glVertexAttribPointer**\n5. Se activa el atributo: **glEnableVertexAttribArray**\n6. Se liberan recursos: **glDeleteBuffers**\n\nCuando se asigna un atributo **location** se puede sacar con **glGetAttribLocation**, o viendo **layout (location = 1) in vec3 inColor**\n\n##### Index Vertex Buffer Object\n\n![Index Vertex Buffer Object](ivbo.png)\n\n#### Vertex array object\n\nAgrupa los vbos y cuando activa vao activa todos los vbo con sus configuraciones.\n\n1. Creación: **glGenVertexArrays**\n2. Activar: **glBindVertexArrays**\n3. Asocia con vao: **glBindBuffer**\n4. Configra vbo: **glVertexAttribPointer**\n5. Acitva vao y todos sus vbos: **glEnableVertexAttribArray**\n6. Pintar\n    * Pintado con un modelo indexado\n        1. Se activa: **glBindBuffer**\n        2. Pintado: **glDrawElements**\n    * Pintado con un modelo no indexado\n        1. Pintado: **glDrawArrays**\n7. Destrucción: **glDeleteVertexArrays**\n\n## Textura\n\nCualquier etapa puede acceder a textura a través de un “sampler” con **texture**\n\n* Entrada: accesibles desde los shaders.\n* Salida: bufferes para el renderizado\n\n### Parámetros\n\n* El tipo: define la disposición de las imágenes que forma la textura.\n* El tamaño: limitado por la versión.\n* El formato de la imagen: igual para todas las imágenes que forman la textura.\n* Parámetros de muestreo.\n\n### Pasos\n\n1. Creación: **glGenTextures**\n2. Activación: **glBindTexture**\n3. Se define el tamaño, el formato interno y el contenido: **glTexStorage2D**, **glTexImage2D**, **glTexSubImage2D**\n4. Generar midmaps y utiliza automáticamente: **glGenerateMipmap**\n5. Configurar: **glTexParameteri**\n6. Enlazar con texture unit: **glActiveTexture**, **glBindTexture**\n5. Borrado: **glDeleteTexture**",
        "slug": "Grafico-Por-Computador",
        "date": "2020-05-31 11:18:28",
        "lang": "es",
        "tags": ["Computer Graphics"],
        "path": "/Grafico-Por-Computador/index.html"
      },
      {
        "title": "Hacer Una Libreria C",
        "markdownContentSource": "\n[Libraría.h](https://github.com/vitaminac/code/blob/master/competition/so/libreria.h)\n\n## Interfaz de Usuario\n\nEsta práctica consiste en implementar una librería en el lenguaje de programación C. con tres funciones, head, tail y longline, que muestran las N líneas por la salida estándar. Existe las diferentes opciones. La siguiente pantalla muestra la ayuda cuando el usuario no haya pasado ningún argumento.\n\n![Menu](menu.png)\n\nEl valor de N es opcional, si no especificamos el valor N, por defecto es 5.\n\nLuego nos pedirá que introduzcamos algunas líneas con el teclado.\n\n![Head](head.png)\n\nPara simplificar el testeo del programa hemos usado pipe.\n\nEsta pantalla es un ejemplo en el que le damos la entrada y le pedimos que muestre las 10 líneas por la salida estándar. La entrada que le pasamos es el resultado del comando ps aux mediante pipe, que es la lista de los procesos en ejecución.\n\n![Tail](tail1.png)\n\nEste ejemplo es lo mismo que antes solo que le pedimos que muestre más líneas. \n\n![Tail](tail2.png)\n\nSi la entrada que le pasamos no tiene suficientes líneas, es decir, menos que N. Muestra todos sus contenidos.\n\nSi los argumentos que haya pasado son ilegales muestra un mensaje de error.\n\n![Long](long.png)\n\n## Descripción de código\n\n### Head\n\nLa función head muestra las N primeras líneas en la salida estándar recibidas por la entrada.\nNecesitamos una estructura de dato que nos permite guardar los caracteres leídos de una línea. Utilizamos un puntero a una cadena de caracteres, char * line.\nReservamos malloc un tamaño mínimo del buffer, capacity y lo multiplicamos por tamaño de cada caracter sizeof(char) para establecer el tamaño de la línea, si la línea que tenemos que leer supera la capacidad actual, duplicamos realloc la capacidad del buffer.\nTambién necesitamos una variable entera length que se utiliza como longitud actual de la línea e ir incrementando length++ cuando leemos más caracteres getchar, si supera el tamaño de buffer duplicamos. También hemos hecho la comprobación de que si existe suficiente memoria para leer dichas líneas.\nEs posible que la entrada que nos pase no contiene menos de N líneas. Por eso tenemos que dividir en casos y hacer el control.\nCuando llega al final de una línea, guardamos un null char ‘\\0’ en la última posición, reiniciar las variables de control length=0, ponemos el resultado de la línea leído en la salida y seguir leyendo hasta N líneas. Al final de la función necesitamos liberar el puntero.\n\n### Tail\n\nLa función tail muestra las N últimas líneas en la salida estándar recibida por la entrada.\nEs similar a la función head la estructura de dato que utilizamos es una lista de cadena de caracteres char **, entendemos a cadena de caracteres como una cadena de caracteres char *. La capacidad de la lista es N y la capacidad de cada cadena está limitado por una variable capacities. Duplicamos automáticamente el tamaño si es necesario.\n \nAdemás de una variable para indicar la longitud de la línea actual characterNumber. También tenemos que añadir un índice para llevar la cuenta de líneas leidos lineNumber. \n\nPrimero inicializamos la lista de N cadena, vamos leyendo carácter a carácter, cada vez que leemos un carácter aumentamos la variable characterNumber. Si llega al carácter de cambio de línea ‘\\n’ añadimos null char al final, reiniciamos el valor carácterNumber a 0, aumentamos lineNumber, y guardamos la línea en la position lineNumber módulo N, así conseguimos reemplazar la última línea laida. Cuando lea la N+1 líneas puedan sustituir la primera línea. Y así cuando llegue al final EOF, envía los N últimos línea leídas al.\n\n### Longlines\n\nLa función longlines muestra las N líneas más largas recibidas de forma orden de mayor a menor, o todas ellas si hay menos de N líneas, por la entrada de forma ordenada en la salida estándar. Empleamos un procedimiento similar como hacemos en tail. Y cuando el usuario introduzca más de N líneas comprobamos que es más larga que la línea más corta y reordenamos en caso necesario.\n\n[Libraría.c](https://github.com/vitaminac/code/blob/master/competition/so/libreria.c)\n",
        "slug": "Hacer-Una-Libreria-C",
        "date": "2019-11-05 00:14:26",
        "lang": "es",
        "tags": ["Systema Operativo"],
        "path": "/Hacer-Una-Libreria-C/index.html"
      },
      {
        "title": "Programación Lineal y Entera",
        "markdownContentSource": "\n# Programación Lineal\n\n## Introducción\n\nLa programación lineal es una herramienta matemática que nos proporciona una forma modelar el sistema y selelcionar el valor de las variables controlables que permiten un funcionamiento óptimo del sistema.\n\n## Construcción de modelos\n\n* Definir unas variables, de estado, de control, de salida.\n\n* Variables no controlables se modelan como variables aleatorias\n\n* Determinar los parámetros\n\n* Estudiar las relaciones entre los distintos elementos y representarlos mediante expresiones matemáticas.\n\n## Programación lineal\n\nLa Programación Lineal estudia la optimización de una función lineal en presencia de restricciones lineales.\n\nEn un problema general podemos encontrar\n\n* $m$ recursos\n\n* $n$ actividad\n\n* nivel de actividad\n\n* rendiemiento global $Z$\n\nDenotamos varios componentes de un modelo de programación con los siguientes siguientes simbolos\n\n* $Z$ = valor de la medida global del rendimiento, Normalmente puede interpretarse como el coste o el beneficio.\n\n* $x_j$ = nivel de actividad $j$ para $j = 1,2,...,n$\n\n* $c_j$ = el impacto en la funcion objetivo por unidad de actividad j.\n\n* $b_i$ = cantidad de recurso que está disponible para la asignación a actividades.\n\n* $a_{ij}$ = cantidad de recursos $i$ consumido por cada unidad de actividad $j$\n\n* $x_1, x_2, x_3, x_4$ son llamadas las variables de decisión, cada variable de decision de un PL (x1, . . . , xn) normalmente puede interpretarse como la eleccion del nivel de una actividad.\n\n![Problema](problema.png)\n\nLos $c_j$, $b_i$, $a_{ij}$ también se refieren como los párametros, algunos de ellos podrían ser estimaciones del valor exacto.\n\n## Forma estándar del modelo\n\n$$\n\\begin{split}\n\\max Z &= \\sum_j{c_jx_j}\\\\\nSujeto \\, a \\quad\n\\sum_{i}{a_{ij}}x_i &< b_i \\forall{j}\\\\\n\\end{split}\n$$\n\n## Tipos de puntos en un PL\n\nun **punto factible** es una solución que cumple todas las restricciones.\n\nun **punto no factible** es una solucón que se viola al menos una restricción.\n\nun **punto de frontera** es una solución que al menos una de desigualdad se cumple la igualdad.\n\nun **punto interior** Punto factible que no es punto frontera.\n\nun **punto estremo** or **CPF corner-point feasible** es la solución que se encuentra en la intersección de dos o mas línea, son los vértices del conjunto factible.\n\nUna **solución óptima** es punto factible con el mejor valor de la función objetivo.\n\nLa **región factible** es la colección de todas los puntos factibles.\n\n### Observación\n\nUn PL puede tener 0, 1, ó infinitos puntos óptimos. El mejor punto extremo debe ser una solución óptima.\n\n[Ejemplo](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/pl-ejemplo1.gms)\n\n## Modelos de asignación de recursos\n\nRepartimos un recursos entre varias actividades.\n\n### Variables de decisión\n\nDeterminan qué *cantidad de recursos* asignamos a cada actividad.\n\n### Restricciónes de repartos\n\nSon restricciones de igualdad.\n\n$$\n\\begin{split}\n\\min z(x) &= \\sum_i {c_i x_i}\\\\\ns.a. A\\textbf{x}&=\\textbf{b}\\\\\nx &\\ge 0\\\\\n\\end{split}\n$$\n\n[Modelo de Asignación - Cerveza](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/cerveza.gms)\n\n[Modelo de Asignación - Petroquimica](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/petroquimica.gms)\n\n[Modelo de Asignación - Minera](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/minera.gms)\n\n[Modelo de Asignación - cabre](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/cabre.gms)\n\n[Modelo de Asignación - Refinería](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/refineria.gms)\n\n[Modelo de Asignación - Leche](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/leche.gms)\n\n## Modelos de mezclas\n\nLos combinamos los recursos\n\n### Variables de mezclas\n\nDeterminan qué cantidad de cada recurso incluimos en la mezcla.\n\n### Restricciones de composición\n\nDeterminan cotas superiores y/o inferiores a las propiedades de la mezcla resultante.\n\n[Modelo de mezclas - Refinado](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/refinado.gms)\n\n[Modelo de mezclas - Siderúrgica](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/siderurgica.gms)\n\n[Modelo de mezclas - Dieta](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/dieta.gms)\n\n[Modelo de mezclas - Gasolina](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/gasolina.gms)\n\n## Modelos de planificación de operaciones\n\nDebemos decidir qué hacer, cuando, y donde.\n\n### Variables de decisión de gran magnitud\n\nLas variables de decisión enteras y de gran magnitud se suelen tratar como variables continuas para simplificar la solución del problemas.\n\n### Restricciones de balance\n\nEl flujo entrante de materias primas debe ser igual al flujo saliente de productos manufacturados (ecuación de balance).\n\n[Modelos de planificación de operaciones - Producción](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/produccion.gms)\n\n[Modelo de planificación de operaciones - Transporte](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/transporte.gms)\n\n[Modelo de planificación de operaciones - Transbordo](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/transbordo.gms)\n\n[Modelo de planificación de operaciones - Sumistradora](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/sumistradora.gms)\n\n[Modelo de planificación de operaciones - Residuos](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/residuos.gms)\n\n[Modelo de planificación de operaciones - Accion](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/accion.gms)\n\n[Modelo de planificación de operaciones - Agricultora](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/agricultora.gms)\n\n## Modelos de gestión de personal\n\nLos modelos de gestión de operaciones deciden qué tarea realizar en cada momento de forma que los recursos sean usados eficientemente, decidimos qué tipo de empleado y cuántos de cada tipo deben realizar cada tarea.\n\n### Restricciones de cubrimiento\n\nEn la planificación de los turnos debemos asegurar que el número de operario asignados cubre las necesidades de cada periodo. Para ello imponemos la siguiente restricción de cubrimiento.\n\n$$\n\\sum_{turnos} (Producción \\, por \\, operario) * (Operarios \\, en \\, servicio) \\ge  \\, del \\, periodo\n$$\n\n[Modelo de gestión de personal - Jornada](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/jornada.gms)\n\n## Modelos de planificación multiperiodo\n\nPlanificar en un horizonte de tiempo que abarca varios periodos, medelos dinámicos.\n\n### Variables de decisión por periodo\n\nMuchas variables de decisión tiene una versión para cada periodo\n\n### Restricciones de balace\n\nDescriben la evolucion temporal de una magnitud\n\n$$\nSituación_{t} + Cambios_{t} = Situación_{t + 1}\n$$\n\n[Modelos de planificación multiperiodo - Piensos](https://github.com/vitaminac/OperationsResearch/blob/master/Linear%20Programming/piensos.gms)\n\n## Resolución geométrica de un PL\n\nConsideramos un PL de dimesión dos, cuya función objectivo es\n\n$$\nz(x) = c^{T}x\n$$\n\ndonde $c^{T} = (c_1, c_2)$ y $x = (x_1, x_2) $.\n\nPara todos los puntos sobre la recta\n\n$$\nR_k = c^{T}x = k\n$$\n\nEl valor de la función objetivo es $k$.\n\nLa rectas $R_k$ son perpendiculares a $c$ y por tanto paralelas entre ellas. \n\nLa curva de nivel $k$ de $z(x)$ es la curva que cumple $z(x) = k$. Y las curvas de nivel de $z(x) = k$ son las rectas $R_k$ para todo $k \\in \\mathbb{R}$.\n\nLa región factible de PL corresponde a la región determinada por los puntos que cumplen todas las restricciones.\n\n### Paso a seguir para la resolución de forma gráfica\n\n1. Representar el conjunto factible\n2. Representar el vector $c$\n3. Representar la recta $R_{k\\*} = c^{T}x = k\\*$ tal que\n    a. Es perpendicular a $c$\n    b. Intersecta el conjunto factible\n    c. $k*$ tiene el valor máximo posible\n4. Elegir un $vértice$ factible que pertenezca a $R_k\\*$ y que llamamos $x\\*$\n5. Determinar las coordenadas exactas de $x\\*$ resolviendo el *sistema lineal* asociado a las restricciones que determinan $x\\*$\n6. El punto óptimo del PL es $x\\*$ y el *beneficio* óptimo es $z(x)$.\n7. En caso de minimizar hacemos lo mismo salvo que en el anterior algoritmo debemos sustitutir $c$ por $-c$.\n\n## Postoptimización\n\nEl análisis de sensibilidad permite conocer si la solución obtenida es sensible a pequeños cambios de los parámetros.\n\n* Recursos limitados: Dado un b ≥ 0, una restriccion ≤ normalmente corresponde a un límite en la disponibilidad de un recurso.\n* Satisfaccion de demandas: Dado un b ≥ 0, una restriccion ≥ normalmente corresponde a la satisfaccion de una demanda.\n* Restricciones de igualdad: Una restriccion de igualdad puede interpretarse como dos restricciones de desigualdad simultaneas y opuestas.\n* Restriccion de no negatividad: x ≥ 0: Aunque es una restriccion, normalmente se interpreta como una declaracion de un tipo de variable.\n\n### Sensibilidad cualitativa\n\n#### Aumento del conjunto factible\n\nSi el nuevo conjunto factible incluye al conjunto factible inicial, el optimo no cambia o mejora.\n\n#### Reduccion del conjunto factible\n\nSi el nuevo conjunto factible esta incluido en el conjunto factible inicial, el optimo no cambia o empeora.\n\n#### Cambios en Right-Hand Side\n\n##### Relajar una restriccion\n\nModificar dicha restricción de forma que el conjunto factible aumente, el óptimo o no cambia o mejora.\n\n##### Tensar una restriccion\n\nModificar dicha restricción de forma que el conjunto factible disminuya, el óptimo o no cambia o empeora.\n\n#### Cambios en A\n\n##### Inclusion de nuevas restricciones\n\nSi en un PL incluimos nuevas restricciones el optimo ser a igual o peor.\n\n##### Eliminacion de restricciones\n\nSi en un PL eliminamos restricciones el optimo ser a igual o mejor.\n\n##### Inclusion de nuevas variables\n\nSi en un PL incluimos nuevas variables el optimo ser a igual o mejor.\n\n##### Eliminacion de variables\n\nSi en un PL eliminamos variables el optimo ser a igual o peor.\n\n### Sensibilidad cuantitativa\n\nEl problema dual es un problema de optimizacion auxiliar que puede ser utilizado para cuantificar la sensibilidad de la solucion primal (óptima) ante cambios en los parametros.\n\n#### Variables duales\n\nSon las variables del problema dual. Tenemos una variable dual $v_i$ por cada restriccion del problema primal, $i \\in I = {1, . . . , m}$.\n\nCada variable dual optima representa la tasa de cambio del coste optimo respecto a cambios en el termino de la derecha de la restricción correspondiente. La variable dual óptima $v^*_i$ puede interpretarse como _precio sombra_ del producto o recurso asociado a la restricción _i_.\n\nCada variable dual optima representa la pendiente de $C_i$($b_i$):\n\n$$\nv^{∗}_i = C^{'}_{i}(bi)\n$$\n\n(excepto en los puntos no derivables).\n\nEl problema dual nos dara sólo los valores de la tasa de cambio del coste optimo correspondiente al b concreto de nuestro problema\n\n$$\nC^{'}_1(b_1), . . . , C^{'}_m(b_m).\n$$\n\n#### Signo de una variable dual\n\n| Primal        | Restriccion i $\\le$ | Restriccion i $\\ge$ | Restriccion i =          |\n| ------------- |:-------------------:|:-------------------:| ------------------------:|\n| Min           | $v_i \\le 0$         | $v_i \\gt 0$         | Sin restricción de signo |\n| Max           | $v_i \\gt 0$         | $v_i \\le 0$         | Sin restricción de signo |\n\n### Formulación del problema dual\n\n![Problema Dual](Problema-Dual.PNG)\n\n### Teoremas de dualidad\n\nUn PL versión minimización (P) y su dual (D)\n\n#### Teorema débil de dualidad\n\nLa función objetivo dual en $\\overline{v}$ es una cota inferior a la función objetivo primal en $\\overline{v}$ y viceversa\n\n### Teorema fuerte de dualidad\n\nSi cualquiera de las dos soluciones es óptima, la otro también y además sus valores óptimos respectivos coinciden.\n\n### Casos factible, infactible y no acotado\n\n* La función objetivo de (P) tiene un valor óptimo finito => La función objetivo de (D) tiene un valor óptimo finito.\n* La función objetivo de (P) no está acotada (inferiormente) => El problema (D) es infactible.\n* La función objetivo de (D) no está acotada (superiormente) => El problema (P) es infactible.\n\n# Programación Entera\n\nLa PLE corresponde a los problemas de Programacion Lineal (PL) donde además se impone la condición de que algunas o todas las variables sean enteras.\n\n[Ejemplo 1](https://github.com/vitaminac/OperationsResearch/blob/master/Integer%20Programming/ejemplo1.gms)\n\n[Ejemplo 2](https://github.com/vitaminac/OperationsResearch/blob/master/Integer%20Programming/ejemplo2.gms)\n\n## Problema de la mochila\n\n### Objetivo\n\nseleccionar un subconjunto óptimo de objetos que maximize la utilidad total\n\n### Variable de decisión\n\n$$\nx_j = \n\\begin{cases}\n      & 1 \\quad \\text{si el objeto j es seleccionado} \\\\\n      & 0 \\quad \\text{en otro caso}\\\\\n\\end{cases}\n$$\n\n### Formulación\n\n$$\n\\begin{split}\n\\max & \\quad c^Tx\\\\\ns.t & \\quad Ax \\le b\\\\\n& \\quad x \\in \\{0,1\\}^n\\\\\n\\end{split}\n$$\n\n[Mochila](https://github.com/vitaminac/OperationsResearch/blob/master/Integer%20Programming/mochila.gms)\n\n## Modelos de asignacion del presupuesto\n\nseleccionar el mejor reparto de un presupuesto entre n proyectos o inversiones bajo m restricciones.\n\n[Proyecto I+D](https://github.com/vitaminac/OperationsResearch/blob/master/Integer%20Programming/proyectoID.gms)\n\n## Modelos de asignación\n\n### Objetivo\n\nAsignar eficientemente un conjunto de trabajadores a un conjunto de tareas.\n\n### Variable de decisión\n\n$$\nx_{ij} =\n\\begin{cases}\n      & 1 \\quad \\text{si el trabajador i se asigna a la tarea j} \\\\\n      & 0 \\quad \\text{en otro caso}\\\\\n\\end{cases}\n$$\n\n### Restricciones\n\n$$\n\\begin{split}\n\\sum_{i=1}^{n}{x_{ij}} &= 1 \\quad \\text{Cada tarea se realiza una vez}\\\\\n\\sum_{j=1}^{n}{x_{ij}} &= 1 \\quad \\text{Cada trabajador realiza una tarea}\\\\\n\\end{split}\n$$\n\n### Formulación\n\n$$\\min \\sum_i{\\sum_j{c_{ij}x_{ij}}}$$\n\n[Abogado](https://github.com/vitaminac/OperationsResearch/blob/master/Integer%20Programming/abogado.gms)\n\n## Modelos de asignación generalizada\n\nEs una generalización del modelo anterior. Cada trabajador puede hacer más de una tarea simultáneamente\n\n### Formulación\n\n$$\n\\begin{split}\nz &= \\min \\sum_i{\\sum_j{c_{ij}x_{ij}}}\\\\\n\\sum_{i=1}^{n}{x_{ij}} &= 1 \\quad \\text{Cada tarea se realiza una vez}\\\\\n\\sum_{j=1}^{n}{a_{ij}x_{ij}} &\\le b_i \\quad \\text{La capacidad maxima de cada trabajador}\\\\\nx_{ij} &\\in \\{0,1\\}\\\\\n\\end{split}\n$$\n\n[Maquinaria](https://github.com/vitaminac/OperationsResearch/blob/master/Integer%20Programming/maquinaria.gms)\n\n## Modelos de la optimización discreta\n\nAlguna o todas variables de un problema deben tomar valores enteros\n\n[Ordenador](https://github.com/vitaminac/OperationsResearch/blob/master/Integer%20Programming/ordenador.gms)\n\n## Problema de cubrimiento y partición\n\n### Parametros\n\n$$\na_{ij} =\n\\begin{cases}\n      & 1 \\quad i \\in S_j\\\\\n      & 0 \\quad \\text{en otro caso}\\\\\n\\end{cases}\n$$\n\n### Restricciones\n\n#### Problema de cubrimiento\n\n$$\n\\sum_{i=1}^{n}{a_{ij}x_{ij}} \\ge 1 \\quad \\text{Cada objeto debe pertenecer al menos a un conjunto}\\\\\n$$\n\n#### Problema de partición\n\n$$\n\\sum_{i=1}^{n}{a_{ij}x_{ij}} = 1 \\quad \\text{Cada objeto debe pertenecer exactamente a un conjunto}\\\\\n$$\n\n[Ambulancia](https://github.com/vitaminac/OperationsResearch/blob/master/Integer%20Programming/ambulancia.gms)\n\n[Cinta](https://github.com/vitaminac/OperationsResearch/blob/master/Integer%20Programming/cinta.gms)\n\n## Diseño de redes\n\n### Objetivo\n\nDecidir qué arcos de una red abrimos de forma que el coste de servicio más costes fijos sea mínimo.\n\n### Formulación\n\n* $A$ conjunto de arcos de la red\n* $ij$ par de indices para los arcos de $A$\n* $V$ conjunto de nodos de la red\n* $k$ indice para los nodos de $V$\n* $x_{ij}$ flujo del arco $ij$\n* $y_{ij}$ es 1 si decidimos conectar $i$ con $j$\n* $b_{k}$ demanda de k\n* $c_{ij}$ coste por unidad de flujo\n* $f_{ij}$ coste de conectar i con j\n* $u_{ij}$ capacidad del arco $ij$\n\n$$\n\\min_{x,y} \\quad z = \\sum_{ij \\in A}{c_{ij}x_{ij}} + \\sum_{ij \\ in A}{f_{ij}y_{ij}} \\quad \\text{coste total}\\\\\ns.a. \\quad \\sum_{ik \\in A}{x_{ik}} - \\sum_{kj \\in A}{x_{kj}} = b_k \\quad \\text{para todo k. (demanda)}\\\\\n0 \\le x_{ij} \\le u_{ij}y_{ij} \\quad \\text{para todo ij (capacidad)}\\\\\ny_{ij} \\in \\{0,1\\} \\text{para todo ij}\n$$\n\n## Localización de plantas\n\n### Objetivo\n\nDecidi qué plantas abrimos de forma que el coste de explotación sea mínimo.\n\n### Formulación\n\n$$\n\\min_{x,y} \\quad z = \\sum_{ij}{c_{ij}d_{j}x_{ij}} + \\sum_{i}{f_{i}y_{i}} \\quad \\text{coste total}\\\\\ns.a. \\sum_{i}{x_{ij}} = 1 \\quad \\text{satisfaccion de la demanda para todo j}\\\\\n\\sum_j{d_j x_{ij} \\le u_i y_i} \\quad \\text{restricciones de capacidad para todo ij}\\\\\nx_{ij} \\ge 0\\\\\ny_{ij} \\in \\{0,1\\}\\\\\n$$\n\n## Problema de viajante\n\n### Variable de decisión\n\n$$\na_{ij} =\n\\begin{cases}\n      & 1 \\quad \\text{si el agente va de la ciudad i a la ciudad j}\\\\\n      & 0 \\quad \\text{en otro caso}\\\\\n\\end{cases}\n$$\n\n### Restricciones\n\n#### El agente debe salir de todas las ciudades\n\n$$\n\\sum_{i}^{n}x_{ij} = 1\\\\\n$$\n\n#### El agente debe llegar a todas las ciudades\n\n$$\n\\sum_{j} x_{ij} = 1\\\\\n$$\n\n#### Eliminación de subciclos\n\n$$\n\\sum_{i \\in S}{\\sum_{j \\not\\in S}} x_{ij} \\ge 1\n$$\n\n## Modelado de condiciones lógica\n\n### Selección múltiple\n\n#### Al menos dos tipos seleccionados\n\n$$\n\\sum_i{\\delta_i} \\ge 2\n$$\n\n#### Exactamente dos tipos seleccionados\n\n$$\n\\sum_i{\\delta_i} = 2\n$$\n\n#### A lo sumo dos tipos seleccionados\n\n$$\n\\sum_i{\\delta_i} \\le 2\n$$\n\n### Costes fijos\n\n$$\n\\delta * coste\n$$\n\n### Variables semicontinuas\n\n$$\nminimo*\\delta \\le x \\le maximo*\\delta\n$$\n\n### Implicaciones\n\n#### 1 o 2 -> 3\n\n$$\\delta_1 + \\delta_2 \\le 2*\\delta_3$$\n\n#### 1 y 2 -> no 3\n\n$$\\delta_1 + \\delta_2 \\le 2 - \\delta_3$$\n\n#### Incompatibilidad\n\n$$\\delta_1 + \\delta_2 \\le 1$$\n\n#### Disyunción\n\n$\\sum_i{a_ix_i} \\le a$ o $\\sum_j{b_jy_j} \\ge b$\n\nSe puede modelar utilizado\n\n$\\sum_i{a_ix_i} \\le a + M\\delta$ y $\\sum_j{b_jy_j} \\ge b + m(1-\\delta)$\n\ncon $M$ suficientemente grande y $m$ suficientemente pequeño\n\n[Aceite](https://github.com/vitaminac/OperationsResearch/blob/master/Integer%20Programming/aceite.gms)\n\n[Petroquímica](https://github.com/vitaminac/OperationsResearch/blob/master/Integer%20Programming/petroquimica.gms)\n\n## Decisiones Multiobjetivo\n\nEn muchos problemas de decisión, es muy complicado o no es imposible transformar todos los objetivos involucrados en un único objetivo\n\n### Puntos eficientes\n\nTambién se denomina punto de pareto, si al moverlo dentro de la región factible para mejorar algún objetivos, tenemos que empeorar al menos otro objetivo.\n\n### Optimización multiobjetivo por suma ponderada de objetivos\n\n$$\nmin \\quad z_1(x)\\\\\n\\vdots\\\\\nmin \\quad z_m(x)\\\\\n$$\n\nen la suma ponderada de objetivos\n\n$$\nmin z(x) = \\sum_{i}\\gamma_i z_i(x)\n$$\n\ndonde cada peso $\\gamma_i$ es un escalar estrictamente positivo para todo $i$.\n\n### Optimizacion multiobjetivo por metas\n\nTranforma siguiente problema\n\n$$\nmeta \\quad z_1(x) \\le m_1\\\\\n\\vdots\\\\\nmeta \\quad z_m(x) \\le m_m\\\\\n$$\n\nen\n\n$$\nmin z(d) = \\sum_{i}\\gamma_i z_i(d_i)\\\\\ns.a. \\quad \nz_1(x) - d_1 \\le m_1\\\\\n\\vdots\\\\\n\\,\\,\\,\\,\\,\\,\\,\\,\\quad\nz_m(x) - d_m \\le m_m\\\\\n$$\n\n[Multiobjetivo](https://github.com/vitaminac/OperationsResearch/blob/master/Integer%20Programming/multiobjetivo.gms)\n\n# Reference\n\n* [Introduction to Operations Research](https://www.amazon.com/dp/1259162982/ref=pd_lpo_sbs_dp_ss_1?pf_rd_p=b4bbef4e-170e-463d-8538-7eff3394b224&pf_rd_s=lpo-top-stripe-1&pf_rd_t=201&pf_rd_i=0073376299&pf_rd_m=ATVPDKIKX0DER&pf_rd_r=327YGFC7GSK9M21G7G3E&pf_rd_r=327YGFC7GSK9M21G7G3E&pf_rd_p=b4bbef4e-170e-463d-8538-7eff3394b224) pag. 32-34",
        "slug": "Programacion-Lineal-Entera",
        "date": "2019-05-30 18:05:04",
        "lang": "es",
        "tags": [
          "Investigación Operativa",
          "Programación Lineal",
          "Programación",
          "Operation Research",
          "Linear Programming"
        ],
        "path": "/Programacion-Lineal-Entera/index.html"
      },
      {
        "title": "Gestion de Configuración",
        "markdownContentSource": "\n## Gestión de la configuración del software\n\nIdentificar, organizar, revisar y controlar las modificaciones que sufre durante el proceso de software para maximizar la producción y minimizar los errores.\n\n## Estándar ISO 12207\n\nEs un marco de referencia común para los procesos del ciclo de via de software con una terminologia bien definida. Entre los 8 procesos de soporte, está el de la **Gestión de la Configuración del Software**.\n\n## Orígenes del cambio\n\n* Cambios en el mercado\n* Cambios hechos por el cliente\n* Reorganización de las prioridades\n* Restricciones\n\n## Configuración software\n\nConjunto de elementos que contienen toda la información prooducida por el proceso software.\n\n## Elemento de configuración\n\nEs el conjunto de partes en las cuales se divide el software y sobre las que se quieren controlar los cambios.\n\n## Línea base\n\nEspecificación o producto revisado que sirve como base para el posterior desarrollo y sólo puede cambiarse por procedimientos formales de control de cambios.\n\n* **LB funcinoal**\n* **LB de asignación**\n* **LB de diseño**\n* **LB de producto**\n* **LB de Explotación**\n\n## Actividades de la GCS\n\n1. Identificación de la configuración\n2. Control de la configuración\n    1. Identificación de la necesidad del cambio y documentación\n    2. Análisis y evaluación de la petición de cambio\n    3. Aprobación o desaprobación del cambio\n    4. Implementación del cambio\n3. Contabilidad del estado de la configuración\n    * Permiten dar a conocer al equipo de desarrollo\n4. Auditoría y revisiones de la configuración\n\n## Documento del Plan de GCS\n\nIEEE Std. 828-2005\n\n## Control de cambios\n\n* Control informal: Antes de aprobarse nuevo elemento\n\n* Control de gestión: Conduce a la aprobación de un nuevo elemento\n\n* Control formal\n\n## Control de versiones\n\nEl uso de procedimientos y herramientas para la gestión de las versiones.\n\n* **Versión**: Forma particular que adopta un elemento de configuracion de un instante determinado.\n* **Elemento genéricos**: de un sistema de control de versiones\n* **Gestor de versiones**: almacena todas las versinoes y permite crear nuevas a partir de las versiones almacenadas.\n\n### Repositorio\n\nBase de datos del proyecto\n\n#### Bloqueo-Modificación-Desbloqueo\n\nSiempre centralizado.\n\n#### Copiar-Modificar-Mezclar\n\nPuede ser centralizado o distribuido.\n\n### Evoluciones posibles y sus definiciones\n\n#### Revisión\n\nConjunto de versiones en un instante determinado con el objetivo de reemplazar versiones anteriores\n\n#### Variante\n\nSe añade a las versiones existentes sin reemplazarlas\n\n#### Versión\n\nUbstabcua de sustena de dufuera de akguna manera de otras instancias del mismo sistema\n\n#### Delta\n\nonjunto de cambios\n\n### Gestión de entregas\n\nUna entrega es una versión del sistema que se entrega a los clientes",
        "slug": "Gestion-Configuracion",
        "date": "2019-05-12 12:19:53",
        "lang": "es",
        "tags": ["Gestión de Configuración", "Software Evolution"],
        "path": "/Gestion-Configuracion/index.html"
      },
      {
        "title": "Evolución Adaptacion Software",
        "markdownContentSource": "\n# Evolución y Mantenimiento del Software\n\n## Qué es la evolución del software\n\nTodas las actividades de programación que se orientan a generar una nueva versión de un software a partir de una versión anterior operativa. **M.Lehman**\n\nLa aplicación de las actividades y procesos de mantenimiento del software que generan una nueva versión operativa de un software, con una funcionalidad de usuario o propiedades cambiadas, a partir de una versión anterior junto con los procesos y actividades de garantía de calidad y con la gestión de esos procesos. **Chapin**\n\n* Mantenimiento: **mejora**, **optimización**, **corrección** y **prevención**\n* Evolución: **generación de una nueva versión**\n* Conservación: **mantener operativo un sistema viejo**\n\n## Importancia del mantenimiento\n\nEn empresas **95%** de los recursos está dedicados al mantenimiento, los sistemas granders y complejos tienen un largo período de vida. Hay que realizar cambios en el software para corregir errores y para implementar nuevos requisitos que surgen. Se conoce como **Barrera de Mantenimiento**.\n\n## Cuestiones asociadas al coste\n\n* Analizar los cambios desde la perspectiva técnica y de negocio\n* Los subsistemas no son independientes\n* No se registran las decisiones de diseño original\n* La estructura original se va corrimpiendo por el cambio.\n\n## Predicción del mantenimiento\n\n* La relación entre el sistema y su entorno\n* El número y la complejidad de las interfaces del sistema\n\n## Proceso Evolutivo\n\nEn la actualidad, la diferencia entre desarrollo y mantenimiento es irrelevante. La tendencia actual es ver el desarrollo y el mantenimiento dentro de un proceso único continuo y evolutivo. Se conoce al ciclo de vida del software de forma completa y continua.\n\n## Procesos de evolución\n\nProcesos de volución surge de distintas peticiones de cambio:\n\n* Requisitos ya existentes no integrados aún\n* Peticiones de nuevos requisitos\n* Reparaciones de errores\n* Ideas nuevas y mejoras indicadas por el equipo de desarrollo\n\nLos procesos de identificación de cambios y evolución del sistema son cíclicos y continúan durante toda la vida del sistema.\n\n### Gestión de Configuraciones\n\nSeguimiento para asegurar de versinoes correctas en cada entrega\n\n## Mantenimiento y su clasificación\n\n### Actuaciones comunes\n\n* Corrección de defectos\n* Creación de nuevas funcinoalidades\n* Mejora de la funcinoalidad y del rendimiento\n\n### Tipos de mantenimiento\n\n#### Mantenimiento perfectivo\n\nmejorar o añadir nuevas funcinoalidades\n\n#### Mantenimiento adaptativo\n\nmejorar o añadir nuevas funcinoalidadesadaptar el sistema a los cambios\n\n#### Mantenimiento correctivo\n\ncorregir defectos en el hardware o en el software\n\n#### Mantenimiento preventivo\n\nfacilitar el mantenimiento futuro\n\n### Métricas de predicción del mantenimiento\n\n* El número de peticiones de mantenimiento correctivo\n* Tiempo medio requerido para el análisis de impacto\n* Tiempo medio empleado en implementar una petición de cambio\n* El número de peticiones de cambio pendientes\n\n## Sistemas socio-técnicos\n\nLas sistemas que incluyen software son de dos tipos:\n\n* Sistemas técnico-informáticos\n* **Sistemas socio-técnicos**\n\n### Características de los sistemas socio\n\n* Propiedades emergentes\n* No deterministas\n* Grado de apoyo a los objetivos organizacionales\n\n## Estrategias de evolución de un sistema heredado\n\n* Desechar completamente el sistema\n* Dejar el sistema sin cambios y continuar con un mantenimiento regular\n* Reemplazar todo o parte del sistema con un nuevo sistema\n* Hacer **reingeniería** del sistema para mejorar su mantenibilidad\n\n## Evaluación de los sistemas heredados\n\n### Perspectiva técnica y de negocio\n\nSegún la calildad y el valor decidimos la acción que hacemos\n\n#### Evaluar el valor de negocio\n\n* Uso del sistema\n* Proocesos de negocio soportados\n* Confiabilidad del sistema\n* Salidas del sistema\n\n#### Evaluar la perspectiva técnica\n\nTanto la aplicación en si mismo y el entorno del mismo\n\n##### Factores utilizados en la evaluación de la Aplicación\n\nCompresión, Documentación, Rendimiento, Lenguaje de programación, Gestión de configuración, Datos de prueba, Habilidades del personal\n\n##### Factores utilizados en la evaluación del Entorno\n\nEstabilidad de proveedor, Tasas de fallos de ejecución, Edad, Rendimiento de sistema, Coste de mantenimiento, Interporabilidad",
        "slug": "Evolucion-Adaptacion-Software",
        "date": "2019-05-11 13:09:55",
        "lang": "es",
        "tags": ["Software Evolution"],
        "path": "/Evolucion-Adaptacion-Software/index.html"
      },
      {
        "title": "Evaluación de interfaces",
        "markdownContentSource": "\n# Objetivos\n\n* Plannificación de una evaluación\n* Procedimientos de evaluacion analítica\n* Procedimientos de evaluación empírica\n\n# Introducción\n\nLas interfaces de usuario se deben evaluar como cualquier software para verificar la **usabilidad** y mejorar y corregir los fallos.\n\n![Cuando evaluar](periodo-evaluacion.jpg)\n\nEvaluamos la interface de usuario y su utilización, tareas realistas y entorno realista.\n\nRevisaremos requerimientos de usabilidad\n\n* Cualitativos: fácil de aprender, tolerante a errores, etc.\n* Cuantitativos: Tiempo, números de clic, etc.\n* Priorizar requerimientos de usabilidad.\n\nPersona que involucra:\n\n* Expertos de evaluación\n* Expertos en el dominio\n* Equipo de desarrollo\n* Usuarios (psuedo) reales\n\nPara la planificación tenemos que tener en cuenta:\n\n* Disponibilidad\n* Aspectos\n* Método\n* Tareas\n* Recogida de datos\n* Análisis de resultados\n\nDocumentación de una evaluación tiene que tener:\n\n* Sujetos\n* Variables\n* Tareas\n* Procedimiento o protocolo\n* Análisis de resultados\n\n# Métodos de evaluación analíticos\n\nAnalizan sin la participación de usuarios.\n\n## Evaluación heurística\n\nCumple determinadas normas\n\n## Heurísticas de Nielsen\n\n1. Estado del sistema simpre visible\n2. Lenguaje de los usuarios\n3. Control y libertad\n4. Consistencia y Estándares\n5. Prevención de errores\n6. Minimizar la carga de la memoria\n7. Flexibilidad y eficiencia\n8. Diálogos estéticos y diseño minimalista\n9. Ayuda a los usuarios a reconocer, diagnosticar y recuperarse de errores\n10. Ayuda y documentación\n\n## Heurísticas de Shneiderman\n\n1. Consistencia\n2. Usabilidad universal\n3. Retroalimentación\n4. Conducir a la finalización de las tareas\n5. Prevención de errores\n6. Facilmente retroceder\n7. Sensación de control\n8. Reducir la carga de memoria\n\n## Heurísticas de Norman\n\n1. Conocimiento del entorno\n2. Simplificar la estructura de tareas\n3. Visibles\n4. Correspondencia usuario-sistema\n5. Restricciones\n6. Prevención de errores\n7. Estandarizar\n\n## Heurísticas participaiva\n\n* Usuarios en vez de expertos\n* Adaptación de las heurísticas al lenguaje del usuario real\n\n## Ensayo cognitivo\n\nComprobar que los usuarios pueden realizar determinadas tareas con la IU.\n\n# Métodos de evaluación empíricos\n\nSe basa en la observaciones de usuarios\n\n* Los participantes **utilizan la IU**\n* Los evaluadores **recogen datos**\n\n## Ténicas de recogida de datos\n\n* Cuestionarios y entrevistas\n* Observación directa\n* Think alound\n* Focus groups\n* User logging\n* User feedback\n\n### Diferencia de cuestionarios y entrevistas\n\n* Cuestionarios\n  * Medio escrito\n  * Diseño rígido\n  * Pregunas abiertas, semiabiertas o cerradas\n  * Menor esfuerzo\n* Entrevistas\n  * Medio oral\n  * Diseño flexible\n  * explicaciones de usuario\n  * modificación de preguntas\n  * mayor esfuerzo\n\n### Observación directa\n\n* Entorno real\n* Tomar notas\n* Descubrir usos inesperados\n\nTODO",
        "slug": "Evaluacion-De-Interfaces",
        "date": "2019-05-09 16:11:07",
        "lang": "es",
        "tags": ["Interación Persona-Ordenador", "Evaluación heurística"],
        "path": "/Evaluacion-De-Interfaces/index.html"
      },
      {
        "title": "Usabilidad",
        "markdownContentSource": "\n# ¿Qué es la usabilidad?\n\nLa extensión de un producto que puede ser usado por usuarios específicos para realizar objetivos específicos con efectividad, eficiencia y satisfacción en un contexto de uso específico.\n\n## Principios de usabilidad de **Alan DIX**\n\n## Facilidad de aprendizaje\n\n### Predicción: poder determinar el efecto en el futuro\n\n![Nuevo email](nuevo.PNG)\n\n### Síntesis: Efectos de acciones pasada en el estado actual\n\n![email enviado](enviado.PNG)\n\n### Familiaridad: El conocimiento del usuario de otra experiencia lo puede aplicar\n\n![Busqueda](busqueda.PNG)\n\n### Generalidad: Aplica conocimiento a situaciones específicas\n\nPodemos usar la herramienta sin tener el conocimiento especifico de la tarea.\n\n![Experimentar](experiment.PNG)\n\n### Consistencia: Comportamiento semejante en situaciones similares\n\nTanto crear un nuevo email, responder o reenviar, siempre abre la misma pestaña.\n\n![Mensaje](message.PNG)\n\n## Flexibilidad\n\n### Iniciativa de diálogo: Libertad del usuario en el diálogo\n\n![Mensaje Popup](message-popup.PNG)\n\nEn este popup, el usuario puede cerrar la ventana pero no puede ajustar el tamaño que quiere\n\n### Multitarea: Completar varias tareas a la vez\n\n![Subir archivo en google drive](subir-google-drive.PNG)\n\n### Control de tareas: Decide alternar o controlar las tareas\n\n![Cambiar Tarea](cambiar-tarea.PNG)\n\n### Adaptación: Modificación de la interfaz\n\n![Cambiar Color](cambiar-color.PNG)\n\n* Sustitución: Intercambiar valores de una entrada\n\n## Robustez\n\n### Estabilidad\n\n### Capacidad de observación: capacidad de evaluar el estado interno del sistema a partir de su representación\n\n![File Architecture](file-architecture.PNG)\n\n### Capacidad de recuperación: Confirmación previa y/o deshacer el cambio\n\n![Deshacer](deshacer.PNG)\n\n### Capacidad de repuesta: notificar al usuario que se ha recibido su petición y que se está trabajando en ella\n\n![Mensaje](message.PNG)\n\n### Adaptación a las tareas: Permitir al usuario hacer las tareas que quiere realizar y que haga como quiere hacerlas\n\n## Reglas del diseño de interfaces de Shneiderman\n\n1. Esforzarse por conseguir consistencia\n    1. terminología consistente\n    2. formato consistente.\n2. Atender a la usabilidad universal: Respectar las necesidades de plasticidad y adaptación de los usuarios y del diseño, facilitar la transformación de contenidos\n    1. tamaño de letra, color de fondo\n3. Ofrecer realimentación informativa: Para cada acción debe haber una realimentación\n4. Diseñar diálogos que conduzcan a la finalización: Las secuencias de acciones deben organizarse en comienzo, mitad y final y la realimentación informativa confirma cada tramo.\n5. Prevenir errores:\n    1. Diseñar el sistema para que el usuario no cometa errores graves\n        1. deshabilitar menús no apropiados\n        2. no permitir alfanuméricos en campos numéricos\n    2. Cuando se comete error la IU debe detectarlo y ofrecer instrucciones de recuperación simples, constructivas y concretas\n        1. sólo indica el campo erróneo e indicarle cuál y qué información se espera\n    3. Las acciones erróneas no deben alertar al usuario\n6. Permitir deshacer acciones\n7. Dar soporte al locus de control interno\n    1. Evitar la no causalidad y su estímulo para que los usarios sean iniciadores de acciones con la IU\n8. Reducir la carga de memoria a corto plazo\n    1. Visualizaciones simples\n    2. Varias páginas sean una\n    3. Reducir frecuencia de movimiento de ventanas",
        "slug": "Usabilidad",
        "date": "2019-05-09 07:54:04",
        "lang": "es",
        "tags": ["Usabilidad", "Interación Persona-Ordenador"],
        "path": "/Usabilidad/index.html"
      },
      {
        "title": "Angular SPA",
        "markdownContentSource": "\n# Angular\n\n## Introducción a Angular\n\nAngular es un framework para desarrollo SPA, permite extender el HTML con etiquetas propias.\n\n## Angular-CLI\n\n![Angular CLI](angular-cli.PNG)\n\n## Proyecto\n\n![Angular Project Folder](project-folder.PNG)\n\n* src: Fuentes de la aplicación\n* node_modules: Librerías y herramientas descargadas\n* e2e: Testing end to end\n* package.json: Configuración de librerías y herramientas\n* angular-cli.json: Configuración de angular-cli\n\n![Angular Project File](project-file.PNG)\n\n* app: Carpeta que contiene los ficheros fuente principales de la aplicación.\n* Borraremos su contenido y le sustituiremos por los ejemplos\n* assets: Ficheros que se incluyen en el bundle cuando la aplicación se empaqueta para producción\n* main.ts: Fichero principal de la aplicación. No es necesario modificarle\n* favicon.ico: Icono de la aplicación\n* index.html: Página principal. No es necesario modificarle\n* styles.css: Estilos globales de la app\n* tsconfig.json: Configuración del compilador TS\n\n# [TypeScript](https://www.typescriptlang.org/)\n\nJavaScript ES6 con tipos opcionales que pueden avisar de\npotenciales problemas.\n\n# Componentes\n\n* Un componente es una nueva etiqueta HTML con una vista y una lógica definidas por el desarrollador.\n* La vista es una plantilla (template) en HTML con elementos especiales.\n* La lógica es una clase TypeScript vinculada a la vista.\n\n![Componente](componente.PNG)\n\n![Import](import.PNG)\n\nLa vista del componente (HTML) se genera en función de su estado (atributos de la clase).\n\n## Recursos de la app\n\nLos recursos (imágenes, fonts..) deben colocarse en una carpeta src/assets para que estén accesibles en desarrollo y cuando se genera el paquete de producción.\n\n## Ejecución de lógica\n\nSe puede ejecutar un método ante un evento producido en la vista del componente.\n\n![Event](event.PNG)\n\n## Sintaxis de los templates\n\n![Template Sintaxis](template-sintaxis.PNG)\n\n## Data Binding\n\n![Data Binding](data-binding.PNG)\n\n## Templates\n\nLos templates permiten definir la vista en función de la información del componente.\n\n* Visualización condicional\n* Repetición de elementos\n* Safe navigation operator\n* Estilos\n* Formularios\n\n### Visualización condicional\n\n        <p *ngIf=\"visible\">Text</p>\n\n### Repetición de elementos\n\n        <div *ngFor=\"let elem of elems\">{{elem.desc}} </div>\n\n### Directivas\n\nLas directivas modifican a los elementos en los que se incluyen.\n\nExisten muchas directivas predefinidas y podemos\nprogramar nuestras propias directivas.\n\nLas directivas estructurales empiezan por * y modifican el DOM del documento (*ngIf, *ngFor, *ngSwitch).\n\nNo se pueden incluir dos directivas estructurales (de tipo *) en el mismo elemento.\n\n### Safe Navigation Operator\n\nPara evitarlo existe el safe navigator operator. Undefined se representa como cadena vacía\n\n        User’s name: {{user?.name}}\n\n## Estilos CSS\n\n### Globalmente asociado al index.html\n\nSi creamos un fichero src/styles.css se incluirá de forma automática en el index.html.\n\n### Definir CSS en Componente\n\nEn la propiedad styles o styleUrls de @Component\n\n![CSS de componente](componente-css.PNG)\n\n### Asociar la clase de un elemento a un atributo string\n\n        <h1 [class]=\"className\">Title!</h1>\n\n### Activar una clase concreta con un atributo boolean\n\n        <h1 [class.red]=\"redActive\">Title!</h1>\n\n### Asociar la clase de un elemento a un mapa\n\n        <p [ngClass]=\"pClasses\">Text</p>\n\n#### Asociar un estilo concreto a un atributo\n\n        <p [style.backgroundColor]=\"pColor\">Text</p>\n\n#### Asociar un estilo concreto a un atributo\n\n        <p [ngStyle]=\"getStyles()\">Text</p>\n\n## Formularios\n\n* Vincular un control del formulario a un atributo del componente\n* Acceso a los controles desde el código para leer y modificar su estado\n* Mecanismos avanzados con validación con ngControl\n\n### Data binding en campo de texto\n\n### Data binding en campo de texto\n\n* Se vincula el control a un atributo del componente\ncon **[(ngModel)]**\n* Cualquier cambio en el control se refleja en el valor del atributo\n\n        <input type=\"text\" [(ngModel)]=\"name\">\n\n### Data binding en checkbox\n\nCada control se asocia con [(ngModel)] a un atributo booleano y su valor depende de si está “checked”\n\n        <input type=\"checkbox\" [(ngModel)]=\"booleano\"/>\n\n### Data binding en botones de radio\n\nTodos los botones del mismo grupo se asocian al mismo atributo con [(ngModel)]\n\n        <input type=\"radio\" name=\"gender\" [(ngModel)]=\"gender\" value=\"Male\">\n\n### Acceso a los controles desde el código\n\nUn elemento del template puede asociarse a una variable: **Template reference variables**.\n\nPodemos usar esa variable en el código del template para manejar ese elemento.\n\n        #templateVar\n\nTambién podemos acceder al elemento desde el código del componente. Creamos un atributo en el componente de tipo **ElementRef**. Anotamos ese atributo con **@ViewChild(‘refName’)**.\n\n![Element Reference](elementRef.PNG)\n\n## Composición de componentes\n\n![Component Tree](component-tree.PNG)\n\nAl cargar la app en el navegador, en el árbol DOM cada componente incluye en su elemento el contenido de la vista.\n\n### Comunicación entre un componente padre y un componente hijo\n\n#### Configuración de propiedades (Padre Hijo)\n\n##### Vista\n\n        <header [title]='appTitle'></header>\n\n##### Controlador\n\n        export class HeaderComponent {\n            @Input()\n            private title: string;\n        }\n\n#### Envío de eventos (Hijo Padre)\n\n##### Vista\n\n        <header (hidden)='hiddenTitle($event)'></header>\n\n##### Controlador\n\n        export class HeaderComponent {\n            @Output()\n            hidden = new EventEmitter<boolean>();\n            visible = true;\n            click(){\n            this.visible = !this.visible;\n            this.hidden.next(this.visible);\n            }\n        }\n\n##### Invocación de métodos (Padre Hijo)\n##### Compartiendo el mismo servicio (Padre Hijo)\n\n## Servicios\n\nAcoplar en el componente la lógica de las peticiones http no es una buena práctica. El componente podría llegar a ser muy complejo y difícil de ampliar / modificar. Es mucho más difícil implementar tests unitarios si el componente tiene muchas responsabilidades. Es mucho mejor modularizar la aplicación en elementos que tengan una única responsabilidad.\n\nA los elementos de la aplicación que no se encargan del interfaz de usuario se les conoce como servicios. Angular 2 ofrece muchos servicios predefinidos. El objeto http se considera un servicio de acceso a APIs REST, pero existen más. El desarrollador puede implementar sus propios servicios en la aplicación.\n\n### ¿Cómo se implementa un servicio?\n\n* Se crea una nueva clase para el servicio\n* Se anota esa clase con **@Inyectable**\n* Se indica esa clase en la lista de providers del **NgModule**\n* Se pone como **parámetro en el constructor** del componente que usa el servicio\n\n        @Injectable()\n        export class BooksService {\n            getBooks(title: string){\n                return [\n                    'Aprende Java en 2 días', \n                    'Java para torpes', \n                    'Java para expertos'\n                ];\n            }\n        }\n\n## Inyección de dependencias\n\nEs la técnica de solicitar dependencias que sean inyectadas por el framework se denomina inyección de dependencias.\n\n    @Component({\n    selector: 'app­root',\n    templateUrl: './app.component.html'\n    })\n    export class AppComponent {\n        private books: string[] = [];\n        constructor(private booksService: BooksService){}\n        search(title: string){\n            this.books = this.booksService.getBooks(title);\n        }\n    }\n\nEs habitual que haya un único objeto de cada servicio en la aplicación.\n\n## Router\n\nLas webs SPA (single page application) pueden tener varias pantallas simulando la navegación por diferentes páginas.\n\nEn app.routing.ts se define qué componente se muestra para cada URL.\n\nEl componente principal de la aplicación (app-root) tiene una parte fija (cabecera, footer) y una parte cuyo contenido depende de la URL (<router­outlet>).\n\nExisten links especiales para navegar dentro de la aplicación web ([routerLink]).\n\n        @Component({\n        selector: 'app­root',\n        template: `\n            <h1 class=\"title\">Library</h1>\n            <router­outlet></router­outlet>\n        `\n        })\n        export class AppComponent { }\n\n### Configuración de las rutas\n\n        const appRoutes = [\n            { path: 'book/:id', component: BookDetailComponent,  },\n            { path: 'books', component: BookListComponent },\n            { path: '', redirectTo: 'books', pathMatch: 'full' }\n        ]\n\n### Parametro de router\n\n![Router Param](router-param.PNG)\n\n### Navegación con router\n\n![Router Navegation](router-navigation.PNG)\n\n## Publicación\n\n        ng build --target=production --environment=prod",
        "slug": "Angular-SPA",
        "date": "2019-05-03 13:28:22",
        "lang": "es",
        "tags": ["SPA", "Angular", "Aplicación Web"],
        "path": "/Angular-SPA/index.html"
      },
      {
        "title": "Testing Manifesto",
        "markdownContentSource": "\n# Pruebas a lo largo de OVER pruebas al final\n\nAumentamos de manera exponencial la cantidad de retrabajo cuando intentamos encontrar y corregir errores más adelante en cualquier ciclo de vida. Es por eso que realizamos pruebas tempranas y pruebas a menudo.\n\n# Prevención de errores OVER encontrando errores\n\nSe enfoca en construir desde el principio la capacidad de mantenimiento y la calidad\n\n# Prueba de comprensión sobre la funcionalidad de verificación\n\nA través de todas las formas de retroalimentación: programación de pares, revisiones de código, herramientas de retroalimentación de integración continua, monitoreo continuo en producción, continuamos probando y ajustando nuestra comprensión de lo que estamos construyendo.\n\n# Construyendo el sistema OVER rompiendo el sistema\n\nA través de varias formas de automatización: integración continua, pruebas automatizadas, creación de tuberías, monitoreo inteligente, etc., hacemos que la calidad incorporada sea más alcanzable que tratar los errores.\n\n# Responsabilidad del equipo por la calidad OVER responsabilidad del probador\n\nCada miembro del equipo es responsable de la calidad. Si lo hacemos, no podemos renunciar a nuestra responsabilidad de calidad al hacer que el probador sea una muleta para que el equipo se apoye.",
        "slug": "Testing-Manifesto",
        "date": "2019-05-01 10:30:55",
        "lang": "es",
        "tags": ["Testing Manifesto", "Testing"],
        "path": "/Testing-Manifesto/index.html"
      },
      {
        "title": "Agile Testing Quadrants",
        "markdownContentSource": "\nUn test enfocado al negocio(technology facing) es aquel que podrías describir a un experto del negocio en términos que le podrían interesar.\n\nTambién es interesante pensar o preguntar si se quiere que los tests apoyen a la programación (support programming) o analicen/critiquen el producto (critique product), de que los programadores los usen como una parte fundamental del proceso de programar.\n\nLos tests que analizan o critican el producto no se centran en el proceso de programar, si no que analizan un producto ya finalizado con la intención de encontrar deficiencias.\n\n![Agile Testing Quadrants](quadrants.png)\n\n* Q1: trata sobre testear los componentes de un sistema informático -> Test unitarios. Estos tests pueden ser automatizados.\n* Q2: consiste en testear el sistema como un todo, y sus conexiones con el proceso de negocio y otros sistemas. Tests funcionales. Pueden ser manuales o automatizados.\n* Q3: tests de Aceptación, los cuales comprueban si los usuarios pueden realizar las acciones que desean con nuestro programa/sistema, basándose en escenarios en tiempo real. Estos tests son manuales.\n* Q4: abarca los tests que tienen que ver con perspectivas tecnológicas que solo se pueden testear una vez el sistema está acabado. Tests de rendimiento, carga, estrés, escalabilidad. Se pueden emplear herramientas especiales para realizar estos tests junto con tests de automatización.",
        "slug": "Agile-Testing-Quadrants",
        "date": "2019-05-01 10:11:15",
        "lang": "es",
        "tags": [
          "Agile Testing Quadrants",
          "Testing",
          "Agile Software Development"
        ],
        "path": "/Agile-Testing-Quadrants/index.html"
      },
      {
        "title": "Pair Review",
        "markdownContentSource": "\nEl pair programming se basa en que dos programadores trabajan juntos en un solo ordenador.\n\nLos programas resultantes de los pair programming tenían, de media, un 15% menos de fallos y seguían de una manera más correcta los estándares de programación, llegando a tener un 30% menos de líneas de código. Pero tardaron los que programaron en parejas emplearon un 15% de tiempo más en el principio.\n\nUna de las grandes ventajas es conocimiento compartido y crecimiento de desarrolladores. Otra ventaja sería por ejemplo, cuando llega un nuevo programador al equipo, las revisiones ayudan mucho a su integración, conociendo a los integrantes del mismo y sus formas de trabajar.",
        "slug": "Pair-Review",
        "date": "2019-05-01 09:41:55",
        "lang": "es",
        "tags": ["Agile Software Development"],
        "path": "/Pair-Review/index.html"
      },
      {
        "title": "Complejidad Ciclomatica",
        "markdownContentSource": "\nLa Complejidad Ciclomática es una métrica del software que proporciona una medición cuantitativa de la complejidad lógica de un programa.\n\nPropuesta por Thomas McCabe en 1976, se basa en el diagrama de flujo determinado por las estructuras de control de un determinado código. De dicho análisis se puede obtener una medida cuantitativa de la dificultad de crear pruebas automáticas del código y también es una medición orientativa de la fiabilidad del mismo.\n\nEl resultado obtenido en el cálculo de la complejidad ciclomática define el número de caminos independientes dentro de un fragmento de código y determina la cota superior del número de pruebas que se deben realizar para asegurar que se ejecuta cada sentencia al menos una vez.\n\nse calcula con $M = E - N + 2 * P$\n\n* M = Complejidad ciclomática\n* N = Número de nodos del grafo correspondientes a sentencias del programa\n* P = Número de componentes conexos, nodos de salida",
        "slug": "Complejidad-Ciclomatica",
        "date": "2019-05-01 09:27:05",
        "lang": "es",
        "tags": ["Software Quality Metrics"],
        "path": "/Complejidad-Ciclomatica/index.html"
      },
      {
        "title": "Testing in the Toilet",
        "markdownContentSource": "\n# Testing In The Toilet\n\nUna buena prueba unitaria debería exhibir otra serie de propiedades a parte de la de comprobar nuestro código para considerarse leíble y mantenible.\n\nEl código debe ser legible como documentación, que describa el código que se está testeando. Un test completo y breve contiene toda la información necesaria para entenderlo. Y otra propiedad es la resistencia y adaptabilidad, una vez escrito, un test resistente no necesita cambiar a no ser que el propósito de la clase que es testeada cambie.\n\n# Change detector Tests\n\nLas pruebas no detectan ningún defecto y el costo de mantenimiento agregado ralentiza el desarrollo.\n\n# Don t Put Logic in Tests\n\nAñadir lógica a un test, es aumentar la probabilidad de crear algún tipo de bug en el test, ya se hace que el test no funcione. \n\nCuando las pruebas necesitan su propia lógica, dicha lógica a menudo debe moverse fuera de los cuerpos de prueba hacia las utilidades y funciones auxiliares.\n\nDado que estos ayudantes pueden ser bastante complejos, generalmente es una buena idea que cualquier utilidad de prueba no trivial, a su vez tenga sus propias pruebas.\n\n# Effective testing\n\nExisten 3 cualidades que hay que tratar de maximizar a la hora de diseñar pruebas para nuestro código.\n\nFidelidad: una prueba de alta fidelidad ayuda a evitar que los errores se introduzcan en el código. Se debe cubrir todos las posibles rutas y esperar el estado final.\n\nResistencia: una prueba resistente es aquella que solo falla cuando hay un cambio de ruptura en el código. Se puede realizar refactorización y otros cambios sin que afecte a la prueba y sin necesidad de modificarla.\n\nPrecisión: cuando una prueba de alta precisión falla, se indica exactamente dónde está el fallo. Se maximiza la precisión manteniendo pruebas pequeñas y bien enfocadas. Para las pruebas de integración, hay que validar el estado en cada límite.\n\n# Prefer Testing Public APIs Over Implementation\n\nTodos los caminos se pueden probar a través de interface. Una API que puede pasar cualquier combinación posible a los métodos.\n\nProbar con frecuencia implementation-detail class lleva a dos fallos:\n\n1. El código es más difícil de mantener, ya que necesita actualizar las pruebas con mayor frecuencia.\n2. Si prueba un comportamiento solo a través de ella, puede resultar en falsa confianza en el código, ya que la ruta de acceso puede no funcionar de manera correcta cuando accede a través de la API pública.\n\n# Printer Friendly\n\n**CLARIDAD**: esto significa que el código sea legible como documentación, que describa el código que se está testeando.\n\n**COMPLETITUD**: Un test completo contiene toda la información necesaria para entenderlo, pero nada extra que pueda distraer.\n\n**RESISTENCIA**: Una vez escrito, un test resistente no necesita cambiar a no ser que el propósito/comportamiento de la clase que es testeada cambie\n\n# Descriptive Test Names\n\nNos permite comprender que se está testeando solo con leer el nombre, sin tener la necesidad de pasar por el cuerpo del método. También, dar nombres específicos te fuerza a dividir los tests sobre diferentes comportamientos.\n\n# Risk-Driven Testing\n\nHacer al principio del proyecto una brainstorm de los riesgos clave y de las mejores opciones para reducirlos nos ayudará a no malgastar esfuerzo y a adaptar el diseño.",
        "slug": "Test-in-the-Toilet",
        "date": "2019-04-30 00:34:18",
        "lang": "es",
        "tags": ["Testing", "Software Quality Metrics"],
        "path": "/Test-in-the-Toilet/index.html"
      },
      {
        "title": "SonarQube",
        "markdownContentSource": "\nSonarQube es la implementación SQALE, que se trata de \"organizar los requisitos no funcionales relacionados con la calidad del código\".\n\nLa implementación de SQALE en SonarQube se basa únicamente en reglas y problemas.\n\n* Bloques duplicados\n* Pruebas unitarias fallidas\n* Insuficiente cobertura de sucursales por pruebas unitarias.\n* Densidad de comentarios insuficiente\n* Cobertura de línea insuficiente por pruebas unitarias.\n* Pruebas unitarias omitidas\n\n![Quality](quality.png)\n\nEstas mediciones se realizan sumando la deuda técnica acumulada para cada emisión, que puede ver en cada bloque de emisión. También puede ver los totales de deuda por criterios en la interfaz de problemas seleccionando la visualización de la deuda en la parte superior de la interfaz de búsqueda de problemas. La deuda técnica de un proyecto es simplemente la suma de la deuda técnica de cada “bad smell” de código en el proyecto.",
        "slug": "SonarQube",
        "date": "2019-04-28 23:24:42",
        "lang": "es",
        "tags": ["Software Quality Metrics", "SonarQube"],
        "path": "/SonarQube/index.html"
      },
      {
        "title": "Behat",
        "markdownContentSource": "\nBehat es una herramienta Story BDD de código abierto creada para aplicaciones PHP. Behat permite crear historias de usuario centradas en el ejemplo. No solo se pueden usar para comprender mejor el propósito de su aplicación, sino que también se puede usar para probar estas características una vez que se implementan.",
        "slug": "Behat",
        "date": "2019-04-28 23:08:37",
        "lang": "es",
        "tags": ["BDD"],
        "path": "/Behat/index.html"
      },
      {
        "title": "Github Trello",
        "markdownContentSource": "\nUna vez incluyes una Pull Request (PR) a una tarjeta de Trello toda la información relevante a cerca de la rama se cargará directamente en la tarjeta. Esto incluye el nombre del PR, si ha pasado checkeos, quien ha abierto el PR.\n\nTrello sugiere el PR en el que se ha trabajado más recientemente, haciendo fácil el seleccionar el PR que deseas. El resumen también muestra los últimos datos de GitHub, así que los cambios de tu equipo se verán reflejados en las tarjetas. También muestra el nombre de la rama en la que se mergeará un commit en particular.",
        "slug": "Github-Trello",
        "date": "2019-04-28 22:19:41",
        "lang": "es",
        "tags": ["Version Control"],
        "path": "/Github-Trello/index.html"
      },
      {
        "title": "Deuda Técnica",
        "markdownContentSource": "\nLa deuda técnica surge de un desarrollo con mala calidad, obtiene beneficios a corto plazo. Pero puede generar deudas cuyos intereses sean imposibles a posteriori. Hce que seamos más lentos añadiendo funcionalidades. Poca deuda técnica acelera el desarrollo, siempre que se pague con prontitud.\n\nSegún Kruchten, se podría decir que la deuda técnica es la parte negativa e invisible de un código.\n\n* Complejidad Ciclomática elevada\n* Problemas de eficiencia en tiempo de ejecución\n* Problemas de mantenimiento y evaluación\n* Problemas de rendimiento\n* Problemas para comprender el código\n* Pérdida de tiempo en la refactorización\n\n# Recomendaciones para evitarlo\n\n* Integración continua\n* Refactorización y modularización\n* Testing de regresión o unitario\n\nMetódo de cálculo\n\nSQALE (Software Quality Assessment based on Life-cicle Expectations)\n\n* Medir la calidad del software equivale a medir su deuda técnica.\n* Define 8 características en base a la ISO 9126 (añade la reutilización):\nReusabilidad, Portabilidad, Mantenibilidad, Seguridad, Eficiencia, Cambiabilidad, Fiabilidad, Capacidad de ser probado.\n\nSe podrá calcular la deuda técnica del proyecto, realizando un análisis de código y sumando cada requisito no funcional incumplido que encuentre por su coste de asociado, herramienta SonarQube.",
        "slug": "Deuda-Tecnica",
        "date": "2019-04-28 20:14:22",
        "lang": "es",
        "tags": ["Deuda Técnica"],
        "path": "/Deuda-Tecnica/index.html"
      },
      {
        "title": "Quality Ágil",
        "markdownContentSource": "\nEn aquellos tiempos en que los equipos no eran multifuncionales y QA era un departamento marginal y la calidad era papel. Para abaratar el proyecto la calidad pasaba a un segundo plano, y la agilidad soluciona esto con ciclos de vida iterativos e incrementales en los que si no tienes calidad no avanzas.\n\n¿Para qué voy a hacer calidad si nadie la paga?\n\nSe ganaba más dinero haciendo mal software y no gestionar la calidad generaba deuda técnica. El problema gordo que se había ido acumulando a lo largo del desarrollo aparecía en la semana final si no gestionar la calidad generaba deuda técnica.",
        "slug": "QA-Agil",
        "date": "2019-04-28 19:39:23",
        "lang": "es",
        "tags": ["Software Quality Metrics"],
        "path": "/QA-Agil/index.html"
      },
      {
        "title": "Mock Fake Testing",
        "markdownContentSource": "\nMock se refiere al término Mock Object, los cuales son objetos que imitan el comportamiento de objetos reales de una forma controlada. Se usan para probar a otros objetos en pruebas unitarias que esperan mensajes de una clase.\n\nUn fake es un tipo de test unitario automatizado que puede contener comportamientos de negocio. Los fakes encajan con una interfaz, el mayor beneficio que nos aportan los fakes es que reducen el acoplamiento en el código.\n\nEl mocking introduce suposiciones que introduce riesgo.\n\nEscribiendo fakes sencillos que se adhieren a las interfaces, podemos ver que no necesitamos los mocks.",
        "slug": "Mock-Fake-Testing",
        "date": "2019-04-28 18:51:51",
        "lang": "es",
        "tags": ["Testing", "Mock", "Fake"],
        "path": "/Mock-Fake-Testing/index.html"
      },
      {
        "title": "Code Smell",
        "markdownContentSource": "\nEs cualquier síntoma en el código fuente de un programa que posiblemente indica un problema más profundo.\n\n* Código duplicado\n* Método grande\n* Clase grande\n* Demasiados parámetros\n* Una clase que usa excesivamente métodos de otra clase\n* una clase que tiene dependencias en detalles de implementación de otra clase\n* No cumple el principio de sustitución de Liskov\n* Clase perezosa que hace poco\n* Uso de patrones de diseño demasiado complicados\n* Identificadores excesivamente largos, cortos\n* Callback excesivos",
        "slug": "Code-Smell",
        "date": "2019-04-28 10:01:41",
        "lang": "es",
        "tags": [
          "Software Quality Metrics",
          "Code Smell",
          "Agile Software Development"
        ],
        "path": "/Code-Smell/index.html"
      },
      {
        "title": "Evolución de la calidad",
        "markdownContentSource": "\n# La calidad de un software\n\nUn software funcione no significa que esté bien hecho. No gestiona la calidad del producto genera deuda técnica. Gestionar sólo procesos no es suficiente, es sólo parte de la solución. Hay que fijarse en cómo está el producto además del proceso.\n\nCuando externalizamos, la certificación del proceso no es garantía suficiente:\n\n1. Se basa en un muestreo\n2. Sello concedido en el pasado\n\n# Qué refactorizamos\n\nTengo 3 Millones de LOC y 500 clases. Las tengo ordenadas por Complejidad Ciclomática. ¿Cómo selecciono cuales modificar?\n\nLo primero que hay que tener en cuenta es que la complejidad ciclomática mide la **mantenibilidad**. Y el segundo es comprobar la probabilidad de que una clase cambie, y evitar realizar un esfuerzo inútil intentando mejorar algo que nunca va a cambiar. Una manera de comprobar si una clase va a cambiar es fijarnos en la evolución que ha tenido en el pasado. La media de cambios por mes de cada una de las clases se le multiplica su complejidad ciclomática. Nos da una lista que tiene en cuenta el valor de la métrica de calidad y su probabilidad de cambio.",
        "slug": "Evolucion-De-Calidad",
        "date": "2019-04-28 09:24:43",
        "lang": "es",
        "tags": ["Software Evolution"],
        "path": "/Evolucion-De-Calidad/index.html"
      },
      {
        "title": "Escuelas del Testing",
        "markdownContentSource": "\n# Cinco manera de ver el testing\n\n1. Testing formal\n2. Testing de los procesos, estándares\n  * Muy relacionada con la tabla de estándares\n  * Habla de seguir un proceso riguroso y metódico de Testing\n3. Testing factoria\n  * Testing externalizado\n4. Contest driven (testing exploratorio)\n  * Humanista, rebaja el papel de la automazación\n5. Testing ágil\n  1. Es una tarea no una fase.\n  2. No hay equipo externo de testing.\n  3. La calidad es responsabilidad de todos.\n  5. DoD: El testing debe estar en el DoD, una historia de usuario no está terminada si no ha sido testeada.\n  6. Controlar Deuda técnica: Caja blanca, control de métricas, SONAR\n  7. Test Driven: el test aparece antes de empezar a desarrollar para aseguramos de que el código sea testeable\n  8. BDD (Behaviour Driven Development)\n  9. Control de entornos\n  10. Checklist",
        "slug": "Escuelas-del-Testing",
        "date": "2019-04-28 00:18:12",
        "lang": "es",
        "tags": ["Testing", "Agile Software Development", "BDD", "TDD"],
        "path": "/Escuelas-del-Testing/index.html"
      },
      {
        "title": "Smoke Test",
        "markdownContentSource": "\n# Smoke Testing\n\nEn programación informática y pruebas de software, smoke testing (también conocido como \"Build Verification Testing\") son un subconjunto de casos de prueba definido que cubren la funcionalidad más importante de un componente o sistema. Su objetivo es ser ejecubajo en el proceso de release de un posible versión de software, comprobar que los elementos más básicos y críticos de la aplicación funcionan correctamente, y rechazar en caso contrario, se conoce además como \"Sanity Testing\".\n\nPor lo tanto, para elaborar este test se deben detectar las partes más críticas de nuestro producto y desarrollar casos de prueba que comprueben estas funcionalidades. Una forma de verlo sería que los smoke tests testean si tu software está listo para el testeo, y pierdes menos tiempo y menos esfuerzo testeando. Si estas funcionalidades críticas de nuestra aplicación no funcionan, no seguimos con otras pruebas más exhaustivas. Smoke test nos permite descubrir problemas principales tempranamente si los cambios en el software han afectado de manera negativa.",
        "slug": "Smoke-Test",
        "date": "2019-04-27 23:50:38",
        "lang": "es",
        "tags": [
          "Testing",
          "Agile Software Development",
          "Integración continua",
          "IC",
          "Continuous Integration",
          "CI",
          "Smoke Test"
        ],
        "path": "/Smoke-Test/index.html"
      },
      {
        "title": "Testing TDD BDD y ATDD",
        "markdownContentSource": "\n# Común problema de desarrollo software\n\n* Alejamiento entre usuario y desarrollo\n  * incumplimiento de requisitos del usuario\n  * la funcionalidad del software final no es lo que quiere usuario\n  * diferencia entre uso del lenguaje\n* Alejamiento entre testing y desarrollo\n  * Separación entre testing y desarrollo\n  * ciclo de desarrollo es demasiado largo\n  * bajo porcentaje de automatización\n\n# Solución\n\n* Testing throughout the Software Life Cycle: prueba unitaria, prueba de integración, prueba de sistema\n* Testing automátizada\n* Integración continua\n  * Check-in continua\n  * Build continua\n  * Deploy continua\n  * Test continua\n    * Testing para cada check-in\n    * Una prubea de integración por día\n    * Una prueba de sistema por día\n\n# Test Driven Development\n\nUna práctica de desarrollo software que se basa en escribir las pruebas primero y luego refactorizar. En primer lugar, se escribe una prueba y se verifica que las pruebas fallan. A continuación, se implementa el código que hace que la prueba pase satisfactoriamente. Una vez pase la prueba unitaria refactorizamos y volvemos a repetir el ciclo.\n\n1. Elegir un requisito\n2. Escribir una prueba\n3. Verificar que la prueba falla\n4. Escribir la implementación\n5. Ejecutar las pruebas automatizadas\n6. Eliminación de duplicación\n7. Actualización de la lista de requisitos\n\n# Behauvior Driven Development\n\n(**Behavior-Driven Development** - BDD) deriva de TDD, y combina los principios de [domain-driven design](https://en.m.wikipedia.org/wiki/Domain-driven_design) con ideas del uso de un lenguaje común ([**domain-specific language**](https://en.m.wikipedia.org/wiki/Domain-specific_language) - DSL) para elaborar el testing. Utiliza sintaxis como Given， When, Then para expresar el comportamiento y salida esperada. Las pruebas se escriben usando historia de usuario, el que ya esta escrito en un documento dedicado. Un problema común de TDD es el test depende de la implementation la función. En BDD afrontamos este problema en testear el comportamiento de la función sin tener en cuenta la detalle de su implementación.\n\n## Especificaciones del comportamiento\n\nEl comportamiento deseado deber ser especificado por el DSL(Domain-Specific-Language) por ejmplo Gherkin, que usa 5 sentencias\n\n**Fuature**: Un título claro y explícito de la historia\n  Una pequeña sección de introducción que especifique\n\n* quién\n* qué efecto se quiere\n* qué beneficia la parte interesada a partir de este efecto\n\n**Criterios de aceptación o escenarios**\n**Scenario:** Una descripción de un ejemplo específico de la feature\n\n* Comienza a especificar la condición inicial con la sentencia **Given:Precondición**, puede consistir en una causa o varias\n* Después declara cuál evento causa el inicio del escenario **When:Condición**\n* Finalmente, declara el resultado esperado, en una o más cláusulas **Then:Postcondición**\n\n# Acceptance Test Driven Development\n\nEs una práctica en la que todo el equipo analiza y determina de forma colaborativa los criterios ejemplificativos de aceptación, y son divididos en un conjunto de pruebas antes de comenzar el desarrollo.\n\n# Diferencia\n\n|    Diferencia    |                  ATDD                  |              TDD            |        BDD        |\n|:----------------:|:--------------------------------------:|:---------------------------:|:-----------------:|\n|**Colaboradores**|Cliente|Desarrollador y Tester|ATDD + TDD|\n|**Objetivo**|Participa los usuarios en la fase de diseño|Una practica de desarrollo|Unit tester y negocio con un lenguaje común|\n|**Documento**|Criterio de aceptación ejemplificativos|Documento de requisito|documento escrito en lenguaje Gherkin|\n|**Automatización**|No es necesario|necesario|necesario|\n|**Testing**|Cada historia de usuario|Cada funcionalidad|Cada historia de usuario|\n",
        "slug": "TDD-BDD-ATDD",
        "date": "2019-04-27 12:55:45",
        "lang": "es",
        "tags": [
          "Testing",
          "Agile Software Development",
          "BDD",
          "Behauvior Driven Development",
          "ATDD",
          "Acceptance Test Driven Development",
          "TDD",
          "Test Driven Development",
          "Integración continua",
          "IC",
          "Continuous Integration",
          "CI",
          "Domain-Driven Design"
        ],
        "path": "/TDD-BDD-ATDD/index.html"
      },
      {
        "title": "Cracking Simpler Cipher",
        "markdownContentSource": "\n# Cifrado por sustitución monoalfabética (Cifrado César)\n\nEl cifrado César, también conocido como cifrado por desplazamiento es un cifrado por sustitución monoalfabética.\n\nLa codificación de cifrado Cesar tiene la siguiente forma\n\n$$\nE_n(x) = x + n \\mod 27\n$$\n\nLa decodificación se hace de manera similar\n\n$$\nD_n(x) = x - n \\mod 27\n$$\n\n# Procedimiento de descifración\n\nSupongamos que tenemos siguiente texto cifrado por el cifrado César con un desplazamiento desconocido\n\n    OV M1SZ3YKXKVS2S2 O2 VK ZK13O NO VK M1SZ3YVYQSK 04O 2O NONSMK KV O234NSY NO 2S23OWK2 M1SZ3YQ1KPSMY2 MYX OV PSX NO OXMYX31K1 NOLSVSNKNO2 OX VY2 2S23OWK2 8 1YWZO1 24 2OQ41SNKN 2SX OV MYXYMSWSOX3Y NO SXPY1WKMSYX 2OM1O3K  OX OV VOXQ4KTO XY 3OMXSMY  2O MYXYMO O23K Z1KM3SMK MYWY 1YWZO1 Y PY19K1 OV MYNSQY  K4X04O O23K O7Z1O2SYX 3SOXO 4X 2SQXSPSMKNY O2ZOMSPSMY NOX31Y NOV K1QY3 3OMXSMY  K VK2 ZO12YXK2 04O 2O NONSMKX KV M1SZ3YKXKVS2S2 2O VO2 VVKWK M1SZ3YKXKVS23K2\n\nSi el texto no es aleatorio, con el análisis de frecuencia podemos encontrar la clave $n$ sin mucha dificultad. Sabemos que normalmente en un texto español los vocales aparecen más frecuente.\n\nHemos creado una función que analiza la frecuencia de aparición de cada letra dada, y observa cual era las letras que tenía una mayor frecuencia de aparición y las distancias entre ellas obtuvimos la “A”.\n\nCon lo cual, sacamos el número -10 para descifrar y 10 para cifrar, en este caso, a la hora de descifrar, es lo mismo poner -10 que 26.\n\n    def count(content):\n        for c in \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\":\n            print(c, \" appears \", content.count(c))\n\nEl resultado es siguiente\n\n    A  appears  0\n    B  appears  0\n    C  appears  0\n    D  appears  0\n    E  appears  0\n    F  appears  0\n    G  appears  0\n    H  appears  0\n    I  appears  0\n    J  appears  0\n    K  appears  37\n    L  appears  1\n    M  appears  27\n    N  appears  18\n    O  appears  51\n    P  appears  6\n    Q  appears  7\n    R  appears  0\n    S  appears  37\n    T  appears  1\n    U  appears  0\n    V  appears  21\n    W  appears  8\n    X  appears  27\n    Y  appears  35\n    Z  appears  12\n    0  appears  3\n    1  appears  23\n    2  appears  34\n    3  appears  21\n    4  appears  9\n    5  appears  0\n    6  appears  0\n    7  appears  1\n    8  appears  1\n    9  appears  1\n\nNotamos que K, O, S, Y apareces muchas veces y las distancias entre ellos es 4, 4, 6 que justo son las distancias entre a, e, i, o, deducimos que la **K** es **a** y el desplazamiento es **10**\n\n    def encrypt(content, n):\n        alphabets = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n        return \"\".join([alphabets[(alphabets.index(c) + n + len(alphabets)) % len(alphabets)] if c in alphabets else c for c in content])\n\nPara descifrar el algoritmo que se emplea es el mismo que el del cifrado y **n** tenemos que usar **-10**.\n\nEl contenido del archivo descifrado es\n\n    EL CRIPTOANALISIS ES LA PARTE DE LA CRIPTOLOGIA QUE SE DEDICA AL ESTUDIO DE SISTEMAS CRIPTOGRAFICOS CON EL FIN DE ENCONTRAR DEBILIDADES EN LOS SISTEMAS Y ROMPER SU SEGURIDAD SIN EL CONOCIMIENTO DE INFORMACION SECRETA  EN EL LENGUAJE NO TECNICO  SE CONOCE ESTA PRACTICA COMO ROMPER O FORZAR EL CODIGO  AUNQUE ESTA EXPRESION TIENE UN SIGNIFICADO ESPECIFICO DENTRO DEL ARGOT TECNICO  A LAS PERSONAS QUE SE DEDICAN AL CRIPTOANALISIS SE LES LLAMA CRIPTOANALISTAS\n\n# Cifrado por sustitución simple polialfabético (Cifrado Vigenère)\n\nEl cifrado **Vigenère** es un cifrado de **sustitución simple poli alfabético**. Su funcionamiento es siguiente\n$$\nE(X_i) = (X_i + K_i) \\mod L\n$$\ndonde $X_i$ es la letra en la posición $i$ del texto a cifrar, $K_{i}$ es el carácter de la clave correspondiente a $X_i$, pues se encuentran en la misma posición, y $L$ es el tamaño del alfabeto.\n\nPara descifrar realizamos la operación inversa:\n$$\nD(C_i) = (C_i - K_i) \\mod L\n$$\nDonde $C_{i}$ es el carácter en la posición i del texto cifrado, $K_{i}$ viene siendo el carácter de la clave correspondiente a $C_{i}$, y $L$ el tamaño del alfabeto.\n\n# Descifrar\n\nPara el texto cifrado más corto que la clave es imposible crackearlo, y si la clave no es aleatoria y el texto es sufiencientemente largo entonces se puede obtener información sobre la clave utilizada.\n\nAhora tenemos un texto cifrado que queremos descifrar\n\n    GW CCMR4OVRCWIDMU PS 6E RLREI FP LV GTTPESNZG3E S5E DI FPD3GC LL ZWV5D3S FP S3WVPMVW E2IAXQRRVJKNOD GQY E6 JKY DZ IPNO8XTLR YIDTL3HCOED IP WOD WK3TZQC3 Y CSO0EC WW 3E1YTTDVH UTN ZP EZN9GKXIZRVZ DZ MPQOCQCNI9R UPCCIVL  E8 IN WE8KWLJZ RQ 4EXRKNO  DI EZN9GG PSEE R2AXXKNA XSOZ R9QRPR 9 JQ2ZVV GW C9HKRO  VYP1UZ IU4A Z1R2EDMQY T3IPP U8 WKRN3JKNAYS G3PZGKQIXS FPNEVQ OE6 ETROE XGNN3GQ  L LVW RPRDSPLS BYG 3E YIFTCVR CW CCMR4OVRCWIDMU 3E 6IU WLVQC NR3TVZA8ENTSEEU\n\n## Adivinar la longitud de la clave\n\nLo primero que vamos a hacer es buscar las repeticiones de las secuencias, para ello, hemos implementado este script.\n\n    from collections import OrderedDict\n    def cal_distance(content):\n        alphabets = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\n        sequences = content.split()\n        for s in list(OrderedDict.fromkeys(sequences)):\n            count = sequences.count(s)\n            if count > 1:\n                index = sequences.index(s)\n                lastIndex = len(sequences) - sequences[::-1].index(s) - 1\n                distance = 0\n                for i in range(index, lastIndex):\n                    distance += len(sequences[i])\n                print(s, index, lastIndex, distance)\n\nY el resultado que obtenemos es\n\n| secuencia      | distancia     |\n| -------------- |:-------------:|\n| GW             | 240           |\n| CCMR4OVRCWIDMU | 340           |\n| FP             | 35            |\n| DI             | 160           |\n| DZ             | 70            |\n| 3E             | 25            |\n\nSiguiendo el proceso de encriptación de **Vigenère** sabemos que cada letra de clave se vuelve a aplicar otra vez cuando han pasado **L** caracteres. Deducimos desde aquí́ que la longitud de la clave debe ser como **máximo el común divisor** de las distancias que hemos encontrado. A ojo creemos que la clave tiene la longitud **5**.\n\n## Dividir la entrada en longitud de cinco\n\nCuando ya sabemos la longitud de la clave, dividimos la entrada en bloque de cinco caracteres también, la misma posición de cada bloque se cifra contra la misma posición de la clave. Y vemos si existe algún patrón\n\n    def divive_bloque(string):\n        strings = \"\".join(string.split())\n        blocks = [strings[i:i+5] for i in range(0, len(strings), 5)]\n        for block in blocks:\n            print(block)\n\nEl resultado que tenemos siguiente\n\n    GWCCM\n    R4OVR\n    CWIDM\n    UPS6E\n    RLREI\n    FPLVG\n    TTPES\n    NZG3E\n    S5EDI\n    FPD3G\n    CLLZW\n    V5D3S\n    FPS3W\n    VPMVW\n    E2IAX\n    QRRVJ\n    KNODG\n    QYE6J\n    KYDZI\n    PNO8X\n    TLRYI\n    DTL3H\n    COEDI\n    PWODW\n    K3TZQ\n    C3YCS\n    O0ECW\n    W3E1Y\n    TTDVH\n    UTNZP\n    EZN9G\n    KXIZR\n    VZDZM\n    PQOCQ\n    CNI9R\n    UPCCI\n    VLE8I\n    NWE8K\n    WLJZR\n    Q4EXR\n    KNODI\n    EZN9G\n    GPSEE\n    R2AXX\n    KNAXS\n    OZR9Q\n    RPR9J\n    Q2ZVV\n    GWC9H\n    KROVY\n    P1UZI\n    U4AZ1\n    R2EDM\n    QYT3I\n    PPU8W\n    KRN3J\n    KNAYS\n    G3PZG\n    KQIXS\n    FPNEV\n    QOE6E\n    TROEX\n    GNN3G\n    QLLVW\n    RPRDS\n    PLSBY\n    G3EYI\n    FTCVR\n    CWCCM\n    R4OVR\n    CWIDM\n    U3E6I\n    UWLVQ\n    CNR3T\n    VZA8E\n    NTSEE\n    U\n\n## Análisis sobre cada grupo \n\nPara cada posición de la clave formamos cada grupo de entrada y nos encontraría con el problema de cifrado Cesar que podemos hacer el análisis de frecuencia como hemos comentado en su apartado. Agrupamos la salida del resultado anterior con el siguiente script\n\n    def group(content):\n        lines = content.split(\"\\n\")\n        groups = [\"\"] * 5\n        for line in lines:\n            for i in range(len(line)):\n                groups[i] += line[i]\n        for g in groups:\n            print(g)\n\nObtenemos siguientes cincos tiras de cadenas\n\n    GRCURFTNSFCVFVEQKQKPTDCPKCOWTUEKVPCUVNWQKEGRKORQGKPURQPKKGKFQTGQRPGFCRCUUCVNU\n    W4WPLPTZ5PL5PP2RNYYNLTOW3303TTZXZQNPLWL4NZP2NZP2WR142YPRN3QPORNLPL3TW4W3WNZT\n    COISRLPGEDLDSMIROEDORLEOTYEEDNNIDOICEEJEONSAARRZCOUAETUNAPINEONLRSECCOIELRAS\n    CVD6EVE3D3Z33VAVD6Z8Y3DDZCC1VZ9ZZC9C88ZXD9EXX99V9VZZD383YZXE6E3VDBYVCVD6V38E\n    MRMEIGSEIGWSWWXJGJIXIHIWQSWYHPGRMQRIIKRRIGEXSQJVHYI1MIWJSGSVEXGWSYIRMRMIQTEE\n\nUsamos la función que usamos para contar la frecuencia en cifrado Cesar para cada cadena\n\n    A  appears  0\n    B  appears  0\n    C  appears  8\n    D  appears  1\n    E  appears  3\n    F  appears  5\n    G  appears  6\n    H  appears  0\n    I  appears  0\n    J  appears  0\n    K  appears  10\n    L  appears  0\n    M  appears  0\n    N  appears  3\n    O  appears  2\n    P  appears  6\n    Q  appears  7\n    R  appears  7\n    S  appears  1\n    T  appears  4\n    U  appears  7\n    V  appears  5\n    W  appears  2\n    X  appears  0\n    Y  appears  0\n    Z  appears  0\n    0  appears  0\n    1  appears  0\n    2  appears  0\n    3  appears  0\n    4  appears  0\n    5  appears  0\n    6  appears  0\n    7  appears  0\n    8  appears  0\n    9  appears  0\n\nEl primer caracter de la clave parece que es **C**.\n\nRepetimos las prueba y finalmente hemos encontrado que la clave es **CLAVE**.\n\n    def frecuency_per_group(text, x):\n        alphabets = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n        text = \"\".join([b if b in alphabets else \"\" for b in text])\n        groups = []\n        for i in range(x):\n            groups.append(\"\")\n        for i in range(len(text)):\n            groups[i % 5] += text[i]\n        for i in range(x):\n            print(\"columna \", i)\n            count(groups[i])\n\n# Cifrado por transposición\n\nUn cifrado por transposición es un tipo de cifrado en el que unidades de texto plano se cambian de posición siguiendo un esquema bien definido. Es decir, hay una permutación de **unidades de texto**.\n\nEn una transposición columnar, el mensaje se escribe en filas de una longitud fija, la longitud de clave, y luego se lee columna por columna, y las columnas se eligen por el orden alfabético de las letras en la palabra clave.\n\nPor ejemplos con la clave **432143** ciframos **WE ARE DISCOVERED. FLEE AT ONCE** y un padding al final\n\n    6 3 2 4 1 5\n    W E A R E D\n    I S C O V E\n    R E D F L E\n    E A T O N C\n    E ? ? ? ? ?\n\nEl resultado es\n\n    EVLN? ACDT? ESEA? ROFO? DEEC? WIREE\n\n# Desencriptación\n\nSupongamos que tenemos siguiente texto cifrado\n\n    IA    O ECEOISTIOF TEANSAOSU LCTIASAEGNNSOTCCOOAC,UAETUNDEOR  CLR EC OS LRNA LTISAEROUD TDTCGO NNAIELS P IICM FIC  A C E IMPF DA EIE F ID RE.SOUDNRNSEMPL.CAILTLPI DLD MIA LDO I SE REA NEERNENEEE,OERA RRLGNSPNEICSINEONAPA DAPLS  OS EPLEPDCLQ AS S OCNIERBD ISMURS IONCE.LUOIECATOM RO E SINIOC OATOASQ ACAILAIASRNSAEATASI ISAPFC ENDDE MR GDEON M T N C NSA R Z OQTR  GAPCTLTI ESSILTIELCAT  OS R IGEEAUEERRSE CRLSOTYESDNOIDOORELJTOC PCOEOEIUEXONSIEFEDGC  NEE IA SATID\n\nPrimero de todo tenemos que fijar la longitud de la clave, con la esquema anterior sabemos que la longitud de la debe ser tiene un divisor de la longitud del texto cifrado. La longitud de nuestro texto cifrado es 462 y sus divisores son 1, 2, 3, 6, 7, 11, 14, 21, 22, 33, 42, 66, 77, 154, 231, 462.\n\nProbamos diferentes longitudes que sea divisor de la longitud del texto usando siguiente función Python\n\n    def split(text, x):\n        alphabets = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n        s = \"\"\n        n = int(len(text) / x)\n        for i in range(n):\n            for j in range(x):\n                if text[i + j * n] in alphabets:\n                    s += text[i + j * n]\n                else:\n                    s += \"-\"\n                s += \" \"\n            s += \"\\n\"\n        return s\n\nObservamos que en el caso de la longitud 6\n\n    I L C E R -\n    A T A P N O\n    - I I L S S\n    - S L E A -\n    - A T P E R\n    - E L D A -\n    O R P C T I\n    - O I L A G\n    E U - Q S E\n    C D D - I E\n    E - L A - A\n    O T D S I U\n    I D - - S E\n    S T M S A E\n    T C I - P R\n    I G A O F R\n    O O - C C S\n    F - L N - E\n    - N D I E -\n    T N O E N C\n    E A - R D R\n    A I I B D L\n    N E - D E S\n    S L S - - O\n    A S E I M T\n    O - - S R Y\n    S P R M - E\n    U - E U G S\n    - I A R D D\n    L I - S E N\n    C C N - O O\n    T M E I N I\n    I - E O - D\n    A F R N M O\n    S I N C - O\n    A C E E T R\n    E - N - - E\n    G - E L N L\n    N A E U - J\n    N - E O C T\n    S C - I - O\n    O - O E N C\n    T E E C S -\n    C - R A A P\n    C I A T - C\n    O M - O R O\n    O P R M - E\n    A F R - Z O\n    C - L R - E\n    - D G O O I\n    U A N - Q U\n    A - S E T E\n    E E P - R X\n    T I N S - O\n    U E E I - N\n    N - I N G S\n    D F C I A I\n    E - S O P E\n    O I I C C F\n    R D N - T E\n    - - E O L D\n    - R O A T G\n    C E N T I C\n    L - A O - -\n    R S P A E -\n    - O A S S N\n    E U - Q S E\n    C D D - I E\n    - N A A L -\n    O R P C T I\n    S N L A I A\n    - S S I E -\n    L E - L L S\n    R M - A C A\n    N P O I A T\n    A L S A T I\n    - - - S - D\n\nObservamos el resultado obtenido y ordenamos a ojo y obtenemos el orden de aparición es Columna 4, Columna 2, Columna 6, Columna 1, Columna 5, Columna 3, su clave númerica es 426351 y la clave alfabético es **DBFCEA**, la cual se obtiene por orden de columnas tomando como referencia la posición de letra en su alfabeto.\n\n# Cifrado por sustitución monoalfabética y transposición\n\nSi nos tocamos hacer una desencriptación combinada de cifrado por César y transposition que haríamos. Si tenemos siguiente texto cifrado:\n\n     TX W NLJJFZJJWWXJ HWQXTY3JXISTNITTWJQOYTH UHTJTJNZJ2TSXNJKJILH  SJJ NF XFYNDJUQJUIHQV FX X THSNJWGI NXRZWX NTSHJ QZTNJHFYTR WT J XNSNTH TFYTFXV FHFNQFNFXNF    T JHJTNXYNTK YJFSXFTXZ QHYNFXFJLSSXTYHHTTFH ZFJYZSIJTW  HQW JH TX QWSF WSXFJFYFXN NXFUKH JSIIJ RW LIJTS R Y S H SXF W 4 TVYW  LFUHYQYN JXXNQYNJQHFY HFNQYQUN IQI RNF QIT N XJ WJF SJJWSJSJJJ TJWF WWQLSXUSJNHXNSJTSFUF IFUQX  TX QYNXFJWTZI YIYHLT SSFNJQX U NNHR KNH  F H J NRUK IF JNJ K NI WJ XTZISWSXJRUQ\n\n# Texto cifrado\n\nPrimero desencriptamos la parte de sustitución monoalfabética, usamos la estrategia que hemos empleado en el cifrado César, contamos la frecuencia de aparición de cada letra.\n\n    A  appears  0\n    B  appears  0\n    C  appears  0\n    D  appears  1\n    E  appears  0\n    F  appears  37\n    G  appears  1\n    H  appears  27\n    I  appears  18\n    J  appears  51\n    K  appears  6\n    L  appears  7\n    M  appears  0\n    N  appears  37\n    O  appears  1\n    P  appears  0\n    Q  appears  21\n    R  appears  8\n    S  appears  27\n    T  appears  35\n    U  appears  12\n    V  appears  3\n    W  appears  23\n    X  appears  34\n    Y  appears  21\n    Z  appears  9\n    0  appears  0\n    1  appears  0\n    2  appears  1\n    3  appears  1\n    4  appears  1\n    5  appears  0\n    6  appears  0\n    7  appears  0\n    8  appears  0\n    9  appears  0\n\nObservamos que la clave de encriptación de sustitución es muy probable que sea 5.\n\nDesencriptamos primero el cifrado monoalfabética usando la llave y la función que usemos en cifrado de César. Ahora tenemos siguiente texto:\n\n    OS R IGEEAUEERRSE CRLSOTYESDNOIDOORELJTOC PCOEOEIUEXONSIEFEDGC  NEE IA SATI8EPLEPDCLQ AS S OCNIERBD ISMURS IONCE LUOIECATOM RO E SINIOC OATOASQ ACAILAIASIA    O ECEOISTIOF TEANSAOSU LCTIASAEGNNSOTCCOOAC UAETUNDEOR  CLR EC OS LRNA\\x00RNSAEATASI ISAPFC ENDDE MR GDEON M T N C NSA R Z OQTR  GAPCTLTI ESSILTIELCAT\\x00CAILTLPI DLD MIA LDO I SE REA NEERNENEEE OERA RRLGNSPNEICSINEONAPA DAPLS  OS\\x00LTISAEROUD TDTCGO NNAIELS P IICM FIC  A C E IMPF DA EIE F ID RE SOUDNRNSEMPL\n\nSeguimos con los pasos que hemos explicado en cifrado por transposición, hallamos primero la longitud de la clave a partir de la longitud de texto cifrado que es **462**, y sus divisores son 1, 2, 3, 6, 7, 11, 14, 21, 22, 33, 42, 66, 77, 154, 231, 462. Probamos esas posibilidades y encontramos que con la longitud 6, obtenemos siguiente resultado\n\n    - E I R C L\n    O P A N A T\n    S L - S I I\n    - E - A L S\n    R P - E T A\n    - D - A L E\n    I C O T P R\n    G L - A I O\n    E Q E S - U\n    E - C I D D\n    A A E - L -\n    U S O I D T\n    E - I S - D\n    E S S A M T\n    R - T P I C\n    R O I F A G\n    S C O C - O\n    E N F - L -\n    - I - E D N\n    C E T N O N\n    R R E D - A\n    L B A D I I\n    S D N E - E\n    O - S - S L\n    T I A M E S\n    Y S O R - -\n    E M S - R P\n    S U U G E -\n    D R - D A I\n    N S L E - I\n    O - C O N C\n    I I T N E M\n    D O I - E -\n    O N A M R F\n    O C S - N I\n    R E A T E C\n    E - E - N -\n    L L G N E -\n    J U N - E A\n    T O N C E -\n    O I S - - C\n    C E O N O -\n    - C T S E E\n    P A C A R -\n    C T C - A I\n    O O O R - M\n    E M O - R P\n    O - A Z R F\n    E R C - L -\n    I O - O G D\n    U - U Q N A\n    E E A T S -\n    X - E R P E\n    O S T - N I\n    N I U - E E\n    S N N G I -\n    I I D A C F\n    E O E P S -\n    F C O C I I\n    E - R T N D\n    D O - L E -\n    G A - T O R\n    C T C I N E\n    - O L - A -\n    - A R E P S\n    N S - S A O\n    E Q E S - U\n    E - C I D D\n    - A - L A N\n    I C O T P R\n    A A S I L N\n    - I - E S S\n    S L L L - E\n    A A R C - M\n    T I N A O P\n    I A A T S L\n    8 S - - - -\n\nObservamos que el orden de columnas es: 316542 y por lo tanto, la clave de la transposición es BFAEDC por la misma razón que explicamos que cifrado por transposición, ahora sobre el texto desencriptado aplicamos esta transposición y obtenemos texto original.\n\n# Cifrado de Vigenère más transposición\n\nPrimero buscamos la longitud de la clave, la longitud de texto cifrado es 460, y sus divisores son 1, 2, 4, 5, 10, 20, 23, 46, 92, 115, 230, 460. Y con la longitud de la clave 5 obtenemos las siguientes columnas\n\n    P J T R -\n    1 T U A 1\n    V Y F S T\n    M T X 5 -\n    - - L U L\n    P I 4 - T\n    Y I M A -\n    Q - N 2 W\n    W T Z T Q\n    V I L 2 -\n    P R - - S\n    I I M N Q\n    Y F - - I\n    2 E 3 Q Y\n    I I Z M -\n    3 - 5 Y I\n    3 M Z - A\n    P H Z 4 V\n    A T O Q 4\n    S N K - 1\n    - N T R V\n    N L - V Q\n    - - Q P E\n    N S K 4 1\n    - W I D 4\n    Y P G I Q\n    R O F S L\n    - - P T S\n    3 1 S N -\n    X 0 6 F E\n    - 0 - R B\n    R Z R R X\n    - - 3 0 Z\n    W R G Q 5\n    - Q A X O\n    E Q 0 W -\n    0 - H O W\n    V N N E U\n    - Y Y Q W\n    S E - N T\n    F 1 R K X\n    - V O X Y\n    P M P Y R\n    R I - N -\n    - - P T Q\n    Z R N I R\n    Y W E T -\n    C - 1 Y R\n    - N K - 1\n    H S P W -\n    J 0 O - N\n    L M 5 - T\n    C U Z 4 N\n    - N K C N\n    - Z R 4 W\n    M O X 4 U\n    Q - O T -\n    2 Z C - A\n    P J T O -\n    1 O N - O\n    S - A Y 5\n    P 7 E X -\n    E 1 N 8 -\n    S U Z T R\n    6 T V I -\n    - P S 7 M\n    N N - O 3\n    N 0 I K Q\n    - N D J Z\n    N 0 2 N E\n    Z N V - C\n    T I M 2 0\n    R T - L L\n    O - L 1 W\n    J T - K 4\n    T 0 I - N\n    Y - I A -\n    M 3 - 4 U\n    I S Z 5 S\n    J - Q - 5\n    D 0 R P -\n    A I Q Y P\n    - - F P T\n    1 R T 1 U\n    T A Y V F\n    - S T 0 X\n    P R - X L\n    A - T X Y\n    4 F - I K\n    N 0 Y N W\n    5 L Q T Q\n    B L X - -\n\nY con la aparición de los espacios podemos deducir el orden, reordenamos las columnas\n\nJ T - P R\nT U 1 1 A\nY F T V S\nT X - M 5\n- L L - U\nI 4 T P -\nI M - Y A\n- N W Q 2\nT Z Q W T\nI L - V 2\nR - S P -\nI M Q I N\nF - I Y -\nE 3 Y 2 Q\nI Z - I M\n- 5 I 3 Y\nM Z A 3 -\nH Z V P 4\nT O 4 A Q\nN K 1 S -\nN T V - R\nL - Q N V\n- Q E - P\nS K 1 N 4\nW I 4 - D\nP G Q Y I\nO F L R S\n- P S - T\n1 S - 3 N\n0 6 E X F\n0 - B - R\nZ R X R R\n- 3 Z - 0\nR G 5 W Q\nQ A O - X\nQ 0 - E W\n- H W 0 O\nN N U V E\nY Y W - Q\nE - T S N\n1 R X F K\nV O Y - X\nM P R P Y\nI - R N -\nP Q - T R\nN R Z I W\nE - Y T -\n1 R C Y N\nK 1 - S P\n- H W 0 O\nN J - M 5\nT L - U Z\nN C 4 N K\nN - C Z R\nW - 4 O X\nU M 4 - O\n- Q T Z C\nA 2 - J T\n- P O O N\nO 1 - A 5\nS Y 7 E -\nP X 1 N -\nE 8 U Z R\nS T T V -\n6 I P S M\n- 7 N - 3\nN O 0 I Q\nN K N D Z\n- J 0 2 E\nN N N V C\nZ - I M 0\nT 2 T - L\nR L - L W\nO 1 T - 4\nJ K 0 I N\nT - I - Y\nA 3 - U M\n4 S Z S I\n5 - Q 5 J\n- 0 R - D\nP I Q P A\nY - F T -\nP R T U 1\n1 A Y F T\nV S T X -\n0 R - L P\nX - T Y A\nX F - K 4\nI 0 Y W N\nN L Q Q 5\nT L X - -\n\nAgrupamos en 5 grupos que debemos tener en cuenta las letras que no están en el alfabeto no cifra por Vigenère, usamos función que hemos comentado en cifrado por Vigenère frecuency_per_group y analizando las frecuencias de vocales hemos obtenido que la clave.",
        "slug": "Cracking-Simpler-Cipher",
        "date": "2019-03-25 15:43:58",
        "lang": "es",
        "tags": [
          "Caesar Cipher",
          "Cifrado César",
          "Código de César",
          "Vigenère cipher",
          "Cifrado de Vigenère",
          "Transposition Cipher",
          "Cifrado por transposición"
        ],
        "path": "/Cracking-Simpler-Cipher/index.html"
      },
      {
        "title": "Virtualización, Contenedores y Cloud Computing",
        "markdownContentSource": "\n# Introducción\n\nLa virtualización es una técnica que permite la emulación de algún recurso tecnológico.\n\n# Máquina virtual\n\nVirtualización de un entorno de ejecución para la ejecución de aplicaciones.\n\n# Virtualización del hardware\n\nVirtualización de un hardware completo en el que se puede ejecutar un sistema operativo como si ejecutara sobre HW real.\n\n# Sistemas virtualizados\n\nDistinguimos dos sitema operativo\n\n* **HOST**: es el sistema operativo que se arranca en el HW físico.\n* **GUEST**: es el sistema operativo que se ejecuta sobre el HW virtualizado\n\n![Máquina virtual](virual_machie.png)\n\nLa virtualización se permite gracias al hypervisor, también llamado gestor de máquinas virtuales, virtual machine manager (VMM).\n\nUn hypervisor es un software que permite la ejecución de múltiples sistemas operativos guest sobre el sistema operativo host.\n\nVentajas:\n\n* Ejecución de un sistema operativo diferente al instalado\n* Posibilidad de clonar y mover la máquina virtual de un ordenador físico a otro\n\nInconvenientes: penalización en rendimiento\n\n# Gestión de sistemas virtualizados\n\n* Pausarse\n* Reanudarse\n* Crearse \"instantáneas\"\n\n# Desarrollo\n\nConfiguramos una máquina virtual equivalente a la que se usará en producción que nos permite compartir entorno entre desarrolladores y un mismo desarrollador puede tener accesible diferentes entornos para diferentes proyectos. Podemos crear instantánea que vuelve a un punto anterior.\n\n# Computación en la nube\n\nLa prestación de servicios en los preveedores de alojamient en Internet, que son empresas de alojamiento que alquilan recursos de computación. Nos permite la elasticidad de los recursos, el uso de recursos es dinámico, si necesita más recursos hardware, podemos adquirir, se suele cobrar por tiempo de uso de los recursos.\n\n## Infraestructura como servicio (laaS)\n\n* Servidores (instances)\n* Balanceadores de carga (load balancer)\n* Gestión de imágenes (images)\n* Copias se seguridad de servidores\n* Almacenamiento de datos\n* Direcciones IP\n* Servidores DNS\n\n## Plataforma como servicio (PaaS)\n\n* La plataforma está diseñada para ser escalable de forma automática (sin intervención del desarrollador/administrador)\n* Dependiendo del proveedor existen plataformas para las tecnologías mas usadas: Java, PHP, Ruby, .NET..\n* La plataforma ofrece servicios adicionales como un servicio: Bases de datos, servidor de correo, bus de comunicaciones, etc…\n\n## Software como Servicio (SaaS)\n\n* El usuario no instala el software, lo usa vía web\n* Generalmente se paga por uso o por número de usuarios\n\n## Nube privada\n\nExisten diferentes tecnologías que lo permiten instalar nubes privadas para controlar un data center.\n\nOfrecen APIs REST compatibles con los proveedores\n\n## Contenedores\n\nLos contenedores son una tecnología que ofrece unas ventajas similares a las VMs pero aprovechando mejor los recursos. Para ejecutar un contenedor no se necesita hypervisor, El contenedor es ejecutado directamente por el kernel del host como si fuera una app más pero de forma aislada del resto\n\n![Principales diferencias](difference-vm-container.png)\n\n![Formato de distribución y ejecución de servicios](distribution_execution.png)\n\n### Relación con Mircroservicios\n\nLas aplicaciones monolíticas son cada vez más grandes, más complejas y soportan más carga, y ahora están dando paso a microservicios, más elásticas y manejables. Cada equipo de desarrollo implementa y opera un\nmicroservicio independiente y reutilizable. Los contenedores están acelerando la adopción porque cada microservicio se ejecuta como uno o varios contenedores. La organización de contenedores y servidores físicos tratan como una única app\n\n# Vagrant\n\nVagrant es una herramienta pensada para desarrolladores que quieren configurar y compartir el entorno de trabajo (desarrollo) o despliegue de su aplicación\n\n# Docker\n\nDocker es una tecnología que ofrece la containerization.",
        "slug": "Virtualization",
        "date": "2019-02-26 23:19:07",
        "lang": "es",
        "tags": [
          "Virtualización",
          "DevOps",
          "Contenedor",
          "Cloud Computing",
          "Docker",
          "Vagrant"
        ],
        "path": "/Virtualization/index.html"
      },
      {
        "title": "Docker",
        "markdownContentSource": "\n# Introducción\n\nLa idea detrás de Docker es crear contenedores ligeros y portables para las aplicaciones software que puedan ejecutarse en cualquier máquina con Docker instalado, independientemente del sistema operativo que la máquina tenga por debajo, facilitando así también los despliegues y la integración continua.\n\n## Imagen Docker\n\nEs una plantilla para un contenedor. Tiene So como Ubuntu, Debian, librería como Java y app .jar.\n\n## Docker Hub\n\nServicio remoto que se usa para almacenar y traer imagenes.\n\n## Contenedor Docker\n\nun contener se crea a partir de un imagen docker, es equivalente a una máquina virtual. Cuando se modifica el contenido, se modifica el contenedor y la imagen no, se puede ejecutar, pausar o parar.\n\n## Docker Engine\n\n![Docker](docker.png)\n\nLa virtualización y los contendores facilitan la gestión del entorno de CI (Continuous Integration) porque son los propios desarrolladores.\n\n# Ejemplo\n\n    docker run alpine ls -l\n\nCrea un nuevo contenedor y lanzarlo, cuyo imagen se llama alpine, el imagen es descargado si no está almacenado en la máquina local, pasamos el comando **ls -l** que va a ejecutar en dicho contenedor.\n\n    docker run alpine seqvence/static-site\n\nEjecutamos el contenedor en background.\n\n    docker ps\n\nListar conjunto de contenedores que están ejecutando.\n\n    docker stop a7a0e504ca3e\n\nParar un contenedor identificado por a7a0e504ca3e\n\n    docker rm a7a0e504ca3e\n\nEliminar un contenedor identificado por a7a0e504ca3e\n\n    docker run --name static-site -e AUTHOR=\"Your Name\" -d -p 9000:80 seqvence/static-site\n\nEspecificamos explicitamente el nombre de contenedor, ejecutarlo como daemon, y mapear el puerto local 9000 al puerto 80 del contenedor.\n\n    docker stop static-site\n\nParar un contenedor\n\n    docker pull ubuntu:12.04\n\nDescargar la imagen de cierta versión.\n\n## DockerFile\n\nArchivo que usa para descripbir un nuevo imagen.\n\n[Dockerfile](https://github.com/docker/labs/blob/master/beginner/flask-app/Dockerfile)\n\n### Crear Imagen\n\nEn la carpteta de Dockerfile ejecutamos\n\n    docker build -t myfirstimage .\n\nGenera el imagen correspondiente\n\n### Macro\n\n* FROM: Imagen base\n* COPY: Copiar archivos desde la carpeta de Dockerfile\n* RUN ejecutar los comandos\n* EXPOSE: puertos publicos\n* CMD: comandos a ejecutar al crear la imagen\n\n## publicar nuestro imagen\n\n    docker build ­t <YOUR_USERNAME>/myfirstapp .\n\n## Volúmenes de datos\n\nDesde un contenedor se puede acceder al contenido de una o varias carpetas del host. ● Eso permite que el contenedor pueda leer su contenido y también pueda generar nuevos ficheros que guarda en el host. Los volúmenes de datos se configuran con el comando **-v host_folder:cont_folder**.\n\n    docker run ­d ­p 9000:80 ­v $PWD:/usr/share/nginx/html nginx\n\nServir por http un contenido estático que tengamos en el disco duro\n\n## Aplicaciones multicontenedor\n\nEs recomendable que cada contenedor se usa para un único proceso, pero es habitual que las aplicaciones tengan varios procesos. Pero es habitual que las aplicacaciones tengan varios procesos (web + bd). Docker-compose nos permite definir un conjunto de contenedores que colaboran entre si formando una aplicación. El fichero docker-compose.yml define los contenedores y las relaciones entre ellos.\n\n[Docker-Compose](https://github.com/dockersamples/example-voting-app/blob/master/docker-compose.yml)\n\nPara ejecutar la aplicación\n\n    docker­compose up ­d\n\n## Docker Swarm\n\nServicio Local que se usa para controlar docker, manejar imagenes, manejar contenedores.\n\n![Docker Swarm](docker-swarm.png)",
        "slug": "Docker",
        "date": "2019-02-26 22:31:02",
        "lang": "es",
        "tags": [
          "Docker",
          "Contenedor",
          "Container",
          "Virtualización",
          "DevOps"
        ],
        "path": "/Docker/index.html"
      },
      {
        "title": "Desarrollo de aplicaciones Web",
        "markdownContentSource": "\n# Introducción\n\nEl navegador hace la petición mediante URL a un servidor, suele ser servidor remoto y ese servidor devuelve la información. Todo esto va por protocolo HTTP.\n\n![Navegación](navegacion.png)\n\n## Evolución de la web\n\nAl principio los servidores web únicamente servían los ficheros del disco duro, pero en día de hoy se han transformado en aplicaciones que generan cada página con la información que envía el usuario y/o la que está en la base de datos.\n\n![Aplicación Web](aplicacion-web.png)\n\n## Tipo de aplicaciones\n\n### Web estático\n\nEl servidor web sirve contenido guardado en el disco duro. El navegador visualiza los recursos, suele ser HTML, CSS, JavaScript. \n\n#### Página web estática\n\nCuando el usuario hace clicl en un enlace, el navegador repite el proceso con la URL del link y recarga por completo la página web.\n\n#### Página web interactiva\n\nLas páginas incluyen código JavaScript que se ejecuta en el navegador, y se usa para incluir efectos gráficos.\n\n### Web dinámico\n\nEl servidor web sirve contenido generado mediante código.\n\n#### Aplicación web con cliente estático\n\nGenerar el recurso dinámicomente, normalmente se hacen consultas a una base de datos. Se recarga la página al completo.\n\n#### Aplicación web interactiva\n\nEl JavaScript se utiliza para crear efectos gráficos. También se utiliza para validaciones de datos en formularios.\n\n#### Aplicación web con AJAX\n\nEl JavaScript permite hacer petición al servidor web en segundo plano y actualiza aquellas partes necesarias de la página sin recargar la página al completo.\n\n![ajax-web.png](ajax-web.png)\n\n#### Aplicación web SPA\n\nEn el lado cliente son aplicaciones autónomas, es un conjunto de recursos HTML, CSS y JavaScript que se cargan en el navegador al acceder a la URL principal. Toda la información del servidor sea obtenida con JavaScript en segundo plano, haciendo peticiones a la **API REST** y obteniendo la información en **JSON**.\n\n# [HTML](https://www.w3schools.com/html/default.asp)\n\nEs una variante de XML, tiene un representación por defecto que permite escribir un documento. Entre las etiquetas de apertura y de cierre se puede incluir texto que será visualizado en el navegador.\n\n# [CSS](https://www.w3schools.com/css/default.asp)\n\nEs un formato que diseño para dar estilo a HTML, para separar el estilo del propio contenido. Algunos de los estilos se heredan.\n\n# [Bootstrap](https://getbootstrap.com/docs/)\n\n**Bootstrap** es un framework fácil de usar y permite la creación de aplicaciones web adaptables (**responsive**), proporciona compatibilidad entre los principales navegadores.\n\n# Ejercicios de HTML, CSS y Bootstrap\n\n[Ejercicio de estilos](css_ejers.zip)\n\n## Ejericio 1\n\nCrear una página que debe incluir\n\n* Varias secciones con subsecciones\n* Fotografías/Imágenes\n* Listas de elementos\n* Una o varias tablas\n* Hiperenlaces\n\n## Ejercicio 2\n\nCrea una página web con HTML y CSS con el siguiente botón\n![Twitter](ejercicio2.png)\n\n## Ejercicio 3\n\nAplica el siguiente estilo\n\n![Posición](ejercicio3_1.png)\n![Fuente](ejercicio3_2.png)\n![Menú](ejercicio3_3.png)\n![Imagenes](ejercicio3_4.png)\n![Pie de la página](ejercicio3_5.png)\n\n* Imágenes de fondo\n  * Propiedad background\n  * Se puede poner un color por si no carga la imagen\n  * Se indica la ruta de la imagen con la función url(…)\n  * Se indica la repetición de la imagen\n  * Otras propiedades de la imagen\n\n* Otros detalles CSS\n  * Padding y margin con valor cero a todos los elementos de la página\n  * Tamaño de texto a todos los elementos del body a 0.6em y tipo de letra sans-serif\n  * Posicionamiento en profundidad: z-index: 1\n  * Quitar los puntos de una lista:\n\n## Ejercicio 4\n\nActualizar la página del ejercicio 3 para que sea responsive usando bootstrap\n\n## [Más ejemplos](css-ejemplo.zip)\n\n# [JavaScript](https://www.w3schools.com/js/default.asp)\n\nEs un lenguaje de programación interpretado que permite mejorar en la interfaz de usuario y página web dinámica. Con JavaScript se puede modificar la página y ejecutar código cuando se interactúa con ella a través del modelo de objetos del documento **DOM**. También se pueden hacer peticiones al servidor web en segundo plano y actualizar el contenido de la web con los resultados (**AJAX**).\n\n## [DOM](https://www.w3schools.com/js/js_htmldom.asp) (Document Object Model)\n\nLibrería (API) para manipular el documento HTML cargado en el navegador. Permite la gestión de eventos, insertar y eliminar elementos, etc.\n\n## [BOM](https://developer.mozilla.org/en-US/docs/Web/API/Window) (Browser Object Model)\n\nAcceso a otros elementos del browser: historial, peticiones de red AJAX, etc... El **BOM** incluye al DOM como uno de sus elementos.\n\n## Integración con HTML\n\nEl código JavaScript se puede incluir directamente en el documento HTML en etiquetas \\<script\\>. Pero es recomendable que el código JS esté en ficheros aparte. El código será cargado y ejecutado cuando se\nencuentre en el documento, antes de continuar procesando el HTML. Cuando se carga el JavaScript no se pueden cargar otros recursos en paralelo, por ello, se recomienda poner el elemento \\<script\\> como último elemento de la página.\n\n# [jQuery](https://www.w3schools.com/jquery/default.asp)\n\njQuery es una librería JavaScript para lidiar con estos problemas e incompatibilidades. Además ofrece un interfaz mucho más directo e intuitivo interactuar con el documento y el navegador.\n\n## [Ejemplos](javascript-ejemplo.zip)\n\n## [Ejercicios](javascript-ejercicio.zip)\n\n# [Maven](https://maven.apache.org/)\n\n* Sistema de gestión de dependencias (librerías) y sus versiones\n* Sistema de construcción de proyectos\n* Estructura única de proyecto compatible con todos los **entornos de desarrollo** y sistemas de **integración continua**\n\n**pom.xml** Configuración del proyecto\n\n# [Spring](https://spring.io/guides)\n\nSpring permite el desarrollo de aplicaciones de servidor.\n\n## Spring Boot\n\nFacilita el desarrollo de aplicaciones con Spring, simplifica la configuración y acelera el desarrollo.\n\n## [Inyección de dependencias](https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-spring-beans-and-dependency-injection.html)\n\nLa inyección de dependencias es una técnica que permite especificar un módulo y sus dependencias. Cuando se inicia la aplicación, el framework crea todos los módulos e inyecta las dependencias en los módulos que las necesitan.\n\n![Inyección de dependencias](Inyeccion-de-dependencia.png)\n\n## [Spring MVC](https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html)\n\nSpring MVC es una parte de Spring para la construcción de aplicaciones web, sigue la arquitectura MVC (**Model View Controller**).\n\n![Spring MVC](SpringMVC.png)\n\n### Controlador\n\n1) Manipulan los datos\n2) Obtienen los datos\n3) Deciden qué plantilla generará el HTML partiendo de esos datos\n\n### Vista\n\nLas vistas en Spring MVC se implementan como plantillas HTML definidas en base a la información del modelo.\n\n#### Generación de HTML con [Mustache](https://mustache.github.io/mustache.5.html)\n\nLos ficheros HTML se generar con plantillas que contienen código HTML junto con referencias a variables y funciones.\n\n![Condición en Mustache](mustache-condition.png)\n![Repetición en Mustache](repetition-mustache.png)\n\n## Formularios y Enlaces\n\n### Formas de enviar información del navegador al servidor\n\n#### Mediante formularios HTML\n\n* La información se envía como pares clave=valor\n* Se accede a la información como parámetros en los métodos del controlador\n\n#### Insertando información en la URL de enlaces\n\nPara acceder a la información se usa el mismo mecanismo que para leer los campos del formulario.\n\n## Sesión y Información persistente\n\nEs habitual que las aplicaciones web gestionen información diferente para cada usuario, información\nespecífica para el usuario identificado en la página que los demás usuarios no podrán consultar\n\n### Sesión\n\nMantener información mientras el usuario navega por la web\n\n### Información persistente\n\nLa información se suele guardar en el servidor web en una BBDD y la lógica de la aplicación determina a qué\ninformación de la BBDD puede acceder cada usuario.\n\n* Objeto HttpSession\n* Componente específico para cada usuario\n\n![Objeto sessión](object-session.png)\n\n![Componente para el usuario 1](user-component-1.png)\n![Componente para el usuario 2](user-component-2.png)\n\n## [Ejemplos y Ejercicios](https://github.com/codeurjc/Sprint-T1-Web/)\n\n# APIs REST\n\nEn una aplicación web, el cliente (navegador) se comunica con el servidor (servidor web) usando el protocolo http. En una aplicación web sin AJAX, las peticiones http devuelven un documento HTML que será visualizado por el navegador. En las aplicaciones con AJAX y las aplicaciones SPA, las peticiones http se utilizan para intercambiar información entre el navegador y el servidor (pero no HTML), por ejmplo, con API REST.\n\n![APIs REST](APIs-REST.png)\n\nREST es acrónimo de REpresentational State Transfer, un servicio que ofrece operaciones CRUD (creación, lectura, actualización y borrado) sobre recursos (items de información) del servidor web. Se aprovecha de todos los aspectos del protocolo http: URL, métodos, códigos de estado, cabeceras...\n\n## La información se intercambia en formato **JSON** (o XML)\n\nJSON es acrónimo de JavaScript Object Notation, se utiliza para la codificación de la información en la mayoría de los servicios REST y se procesa de forma muy rápida en JavaScript.\n\n## Los recursos se identifican en la URI\n\nParte de la URL es fija y otra parte apunta al recurso concreto\n\n* http://server/anuncios/vendo-moto-23-10-2014\n* http://server/users/bob\n* http://server/users/bob/anuncio/comparto-piso\n* http://server/users/bob/anuncio/44\n\n## Las operaciones se codifican como métodos http\n\n* GET: Devuelve el recurso, generalmente codificado en JSON. No envían información en el cuerpo de la petición.\n* DELETE: Borra el recurso. No envían información en el cuerpo de la petición.\n* POST: Añade un nuevo recurso. Envía el recurso en el cuerpo de la petición.\n* PUT: Modifica el recurso. Habitualmente se envía el recurso obtenido con GET pero modificando los campos que se consideren (existen optimizaciones)\n\n## La información se devuelve codificada en JSON\n\nPetición:\nURL: http://server/bob/bookmarks/6\nMétodo: GET\n\nRespuesta:\nmime-type: application/json\nBody:\n\n    {\n        id:6,\n        uri: \"http://bookmark.com/2/bob\",\n        description: \"A description\"\n    }\n\n## Se usan los códigos de estado http para notificar errores\n\n* 100-199: No están definidos. Describen fases de ejecución de la petición.\n* 200-299: La petición fue procesada correctamente.\n* 300-399: El cliente debe hacer acciones adicionales para completar la petición, por ejemplo, una redirección a otra página.\n* 400-499: Se usa en casos en los que el cliente ha realizado la petición incorrectamente (404 No existe).\n* 500-599: Se usa cuando se produce un error procesando la petición.\n\n## [API REST Ejemplos](API-REST-ejemplos.zip)\n\n## [API REST Ejercicios](API-REST-ejercicios.zip)\n\n## Cliente JavaScript\n\nLas aplicaciones web con AJAX o con arquitectura SPA, implementadas con JavaScript, usan servicios REST desde el navegador\n\n    // Muestra en la página los títulos de los libros\n    $(document).ready(function(){\n        $.ajax({\n            url:\"https://www.googleapis.com/books/v1/volumes?q=intitle:java\"\n        }).done(function(data) {\n            for(var i=0; i<data.items.length; i++){\n                $(\"body\").append(\"<p>\"+data.items[i].volumeInfo.title+\"</p>\");\n            }\n        });\n    });\n\n## APIs REST con Spring\n\nPara implementar una API REST con Java se puede usar **JAX-RS** o **Spring MVC**.\n\nSe crea un controlador con la clase @RestController.\n\nSe implementa un método en la clase por cada URL de la API REST, se anota con **@RequestMapping** para indicar la URL y el método http. El método devuelve el objeto que quiere enviar al cliente.\n\n### POST\n\n* En @RequestMapping se indica que el método atiende peticiones POST\n* El cuerpo de la petición se obtiene con un parámetro anotado con @RequestBody\n* La anotación **@ResponseStatus(HttpStatus.CREATED)** indica que se devuelva el estado 201 al cliente si todo va bien\n* Se devuelve el nuevo objeto al cliente (con un id)\n\n![Spring MVC Post](Spring-Post.png)\n\n### GET\n\n* En **@RequestMapping** se indica que el método atiende peticiones GET\n* El id del recurso se condifica en la URL y se accede a él usando un @PathVariable\n* Si el recurso existe se devuelve, y si no, se devuelve 404 NOT FOUND. Por eso el método devuelve un **ResponseEntity**.\n\n![Spring MVC Get](Spring-Get.png)\n\n### DELETE\n\n* En **@RequestMapping** se indica que el método atiende peticiones DELETE\n* El id del recurso se condifica en la URL y se accede a él usando un @PathVariable\n* Si el recurso existe se borra y opcionalmente se devuelve\n* Si no existe, se devuelve 404 NOT FOUND. Por eso el método devuelve un ResponseEntity\n\n![Spring MVC Delete](Spring-Delete.png)\n\n### PUT\n\n* En **@RequestMapping** se indica que el método atiende peticiones PUT\n* El id del recurso se condifica en la URL y se accede a él usando un @PathVariable\n* El nuevo anuncio se envía en el body y se accede con @RequestBody\n* Si el recurso existe se actualiza y se devuelve de nuevo\n* Si no existe, se devuelve 404 NOT FOUND. Por eso el método devuelve un ResponseEntity\n\n![Spring MVC Put](Spring-Put.png)\n\n### Controller\n\nCuando todas las URLs de un controlador empiezan de forma similar, se puede poner la anotación **@RequestMapping** a nivel de clase con la parte común. Cada método sólo tiene que incluir la parte propia.\n\n### JSON\n\nCuando se implementa una API REST es deseable controlar cómo se convierten los objetos a JSON (y viceversa). Spring utiliza la librería Jackson en modo data binding para hacer esta tarea.\n\n#### Ignorando atributos circulares\n\nSe pueden ignorar del JSON los atributos de la clases que generan la referencia circular.\n\n#### Datos diferentes por URL\n\nTener más o menos información en función de si estamos accediendo a la lista de objetos o a un objeto concreto.\n\n1. Creamos un nuevo interfaz Java\n2. Anotamos algunos atributos con **@JsonView** pasando ese interfaz como parámetro\n3. Anotamos el método de **@RestController** igual que los atributos (**@JsonView** con el interfaz como parámetro)\n4. Los objetos que devuelva el método tendrán únicamente los atributos con ese interfaz\n\n![JSON View](JSON-view.png)\n\nSi queremos que en un método de la API REST se devuelvan atributos anotados con diferentes interfaces hay que crear un nuevo interfaz\n\nEse nuevo interfaz tiene que heredar de los interfaces usados por los atributos.\n\nUsamos ese interfaz en el **@JsonView** del método del **@RestController**\n\n![JSON View](JSON-view2.png)\n\n### RestTemplate\n\nPara hacer peticiones REST en Spring se usa un objeto de la clase RestTemplate. Se indica la URL y la clase de los objetos que devolverá la consulta.\n\n![Rest Template](Rest-Template.png)\n\nEs posible acceder a los datos directamente sin definir clases.\n\n![Rest Template JSON](Rest-Template-JSON.png)\n\n## [Ejemplos y Ejercicios de APIs REST](https://github.com/codeurjc/Spring-T2-REST)\n\n# Bases de datos con Spring\n\n![BBDD](BBDD.png)\n\nTiene un completo soporte de acceso a bases de datos de diferentes tipos. El proyecto Spring Data ofrece mecanismos para el acceso a Bases de datos SQL y no relacionales.\n\n* Creación del esquema partiendo de las clases del código Java (o viceversa)\n* Conversión automática entre objetos Java y el formato propio de la base de datos\n* Creación de consultas en base a métodos en interfaces\n\n![Entity](Spring-data-entity.png)\n\n![Query](Spring-data-query.png)\n\n![Repository](Spring-data-repository.png)\n\n## [JPA](https://spring.io/guides/gs/accessing-data-jpa/)\n\n**ORM** o “mapeo objeto relacional” realiza las conversiones pertinentes entre objetos/clases y filas/tablas. Se genera una tabla por cada entidad, por cada atributo de la clase de un tipo simple (entero, float, String, boolean...), se crea un campo en la tabla.\n\n![Spring Data ORM](Spring-data-ORM.png)\n\n### Relación 1:1 unidireccional\n\n![One to One](Spring-data-one-to-one.png)\n\n### Operaciones en cascada\n\nSi la anotación **@OneToOne** se configura con **cascade = CascadeType.ALL** entonces ambos objetos de la relación tienen el mismo ciclo de vida. Al guardar el objeto principal, se guarda el asociado, Al borrar el objeto principal, se borra el asociado.\n\n![Cascade](Spring-data-cascade.png)\n\n### Relación 1:1 bidireccional\n\n![One to One bidirectional](Spring-data-one-to-one-bidirectional.png)\n\n### Relación 1:N\n\nCuando existe una relación 1:N entre entidades se usan las anotaciones **@OneToMany** y **@ManyToOne**.\n\n![One to Many](Spring-data-one-to-many.png)\n![Many to One](Spring-data-many-to-one.png)\n\n### Relación M:N\n\nCuando existe una relación M:N entre entidades se usa la anotación **@ManyToMany**\n\n![Many to Many](Spring-data-many-to-many.png)\n\n## Repositorio\n\n* Consulta\n  * List find...By...(...)\n  * List read...By...(...)\n  * List query...By...(...)\n  * List get...By...(…)\n* Contar\n  * int count...By...(...)\n* Expresiones\n  * And\n  * Or\n* Comparadores\n  * Between\n  * LessThan\n  * GreatherThan\n* Modificadores\n  * IgnoreCase\n* Ordenación\n  * OrderBy...Asc\n  * OrderBy...Desc\n\n### Propiedades de los objetos relacionados\n\nNo sólo podemos filtrar por un atributo de la propia entidad, también podemos filtrar por un atributo de otra entidad con la que esté relacionada la principal\n\n![Spring Data Object Relation](Spring-data-object-relation.png)\n\n### Paginación\n\n![Pagination](Spring-data-pagination.png)\n\n#### Pageable\n\nEl objeto Pageable incluye la información de ordenación de la URL.\n\n![Pageable](Spring-data-pageable.png)\n\n#### Ordenación\n\nPodemos pasar un parámetro de tipo Sort que controla la ordenación\n\n    repository.findAll(new Sort(\"nombre\")));\n    repository.findAll(new Sort(new Order(Sort.Direction.ASC, \"nombre\"))));\n\n#### Limitar los resultados\n\n    User findFirstBy...();\n    User findTopBy...();\n    User findTopDistinctBy...();\n    List<User> queryFirst10By...();\n    List<User> findTop3By...();\n    List<User> findFirst10By...();\n\n### Java Persistence Query Language (JPQL)\n\n    public interface TeamRepository extends JpaRepository<Team, Long> {\n        @Query(\"select t from Team t where t.name = ?1\")\n        List<Team> findByName(String name);\n    }\n\n## Configuración\n\n![Spring data configuration](Spring-data-configuration.png)\n\n## Arquitectura\n\n![Spring Data Arquitecture](Spring-data-arquitecture.png)\n\nLos servicios y los módulos de integración suelen estar anotados con **@Service** para indicar su naturaleza **@Service** es similar a **@Component**\n\n## [Ejemplos y Ejercicios de Spring Data](https://github.com/codeurjc/Spring-T3-DB)\n\n# Seguridad con Spring\n\n## Autenticación\n\nSirve para garantizar que una entidad (persona o máquina) es quien dice ser, se consigue mediante unas credenciales **login-password**\n\n## Autorización\n\nSirve para discernir si una entidad tiene acceso a un recurso determinado, determina si un usuario puede acceder a un recurso determinado mediante **roles**\n\n## Integridad\n\nGarantiza al receptor del mensaje que los datos recibidos coinciden exactamente con los enviados por el emisor. La integridad se consigue típicamente con funciones **Hash** (resumen)\n\n## Confidencialidad\n\nProporciona protección para evitar que los datos sean revelados a un usuario no autorizado. La confidencialidad se consigue típicamente usando técnicas criptográficas de cifrado de mensajes.\n\n## HTTPS\n\nCon HTTPS se consigue que toda la información que se intercambie un navegador web con un servidor web esté cifrada.\n\n## Spring security\n\n### Comunicación cifrada con https\n\n    server.port = 8443\n    server.ssl.key-store = classpath:keystore.jks\n    server.ssl.key-store-password = password\n    server.ssl.key-password = secret\n\n### Usuario con credenciales en código\n\n* Spring-security impide que un usuario pueda acceder a ciertas páginas si no se ha autenticado correctamente\n* Si el usuario intenta acceder, se le redirige al formulario de login\n* El desarrollador configura qué páginas son públicas y cuales son privadas\n\n![Spring Security Configuration](Spring-Security-Config.png)\n\n![Credenciales en código](Spring-security-credenciales.png)\n\n### Protección con CSRF\n\nCross Site Request Forgery es un tipo de ataque en el que una página web intenta hacer una petición a otra web en la que estás logueado. La forma de evitarlo es generar un token por cada formulario y verificar que el token es válido al procesar los datos del formulario. Cada formulario en una web con protección CSRF\ndebería ser similar a este.\n\n![Spring Security CSRF](Spring-security-CSRF.png)\n\n    @RequestMapping(\"/login\")\n    public String login(Model model, HttpServletRequest request) {\n\n        CsrfToken token = (CsrfToken) request.getAttribute(\"_csrf\");\n        model.addAttribute(\"token\", token.getToken());\n\n        return \"login\";\n    }\n\nPara pasar el token al cada modelo implementamos un handler\n\n![Spring Security CSRF Handler](Spring-Security-CSRF-handler.png)\n\n## Diferentes tipos de usuarios\n\nConfiguramos las páginas que puede ver cada tipo de usuario\n\n    @Configuration\n    public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n        @Override\n        protected void configure(HttpSecurity http) throws Exception {\n\n            // Public pages\n            ...\n            // Private pages (all other pages)\n            http.authorizeRequests().antMatchers(\"/home\").hasAnyRole(\"USER\");\n            http.authorizeRequests().antMatchers(\"/admin\").hasAnyRole(\"ADMIN\");\n            // Login form\n            ...\n            // Logout\n            ...\n        }\n    }\n\n## [Usuarios en BBDD](https://www.baeldung.com/spring-security-authentication-with-a-database)\n\n## Características para Web SPA + API REST con seguridad\n\n* Acceso público y Acceso restringido\n* Comunicación cifrada con HTTPS\n* Autenticación mediante HTTP Basic Auth\n* Autorización basada en URLs\n* Gestión de sesión: Cookies y HttpSession\n* No se usa protección para CSRF\n\n## [Ejemplos y Ejercicios de Spring Security](https://github.com/codeurjc/Spring-T4-Security)\n\n# Despliegue de apps Spring\n\n## Jar\n\nEs lo más recomendable porque facilita la actualización de la aplicación al no estar limitado por el contenedor ni el administrador. Las arquitecuturas basadas en microservicios promueven este formato.\n\n## War\n\nEl formato de empaquetado de apps web Java más usado, ideal cuando varias aplicaciones web están en el mismo servidor físico y el mismo dominio\n\n### Ejecutar la app web con el .war\n\nNecesitamos tener un servidor disponible, cada servidor tiene su propio sistema de depliegue vía web o\nusando algún tipo de cliente. Veremos cómo desplegar en Tomcat vía web.\n\n## [Ejemplos y Ejercicios](https://github.com/codeurjc/Spring-T5-Deployment)",
        "slug": "Desarrollo-de-Aplicaciones-Web",
        "date": "2019-02-25 11:29:55",
        "lang": "es",
        "tags": [
          "Aplicación Web",
          "HTMl",
          "JavaScript",
          "CSS",
          "Spring",
          "JPA",
          "Tomcat"
        ],
        "path": "/Desarrollo-de-Aplicaciones-Web/index.html"
      },
      {
        "title": "Estructura Algebraica",
        "markdownContentSource": "\n# Intruducción\n\nUna estructura algebraica es una n-tuple $(a_1,a_2,a_3,...,a_n)$ donde $a_1$ es un conjunto no vacío, y $(a_2,...,a_n)$ un conjunto de operaciones aplicables a los elementos de dicho conjunto.\n\nLas estructras algebraicas se clasifican según las propiedades que cumplen las operaciones sobre el conjunto dado.\n\n# Ley de composicion\n\nLa ley de composición es un tipo de **operación binaria** que toma dos elementos de dos conjuntos dados y los asigna a otro elemento perteneciente a uno de los dos conjuntos.\n\n## Ley de composición interna\n\nDado un conjunto $A$ y una operación $\\odot$, que representaremos como el par $(A, \\odot)$, se dice que $\\odot$ es una ley de **composición interna** en $A$ cuando\n\n$$\n\\forall a,b \\in A \\quad \\exists! c \\in A : c = a \\odot b\n$$\n\n## Ley de composición externa\n\nSi los dos elementos operados no pertenecen al mismo conjunto la ley de composición es externa.\n\n### Ley de composición externa por la derecha\n\n$$\n\\forall a \\in A, \\forall b \\in B \\quad \\exists! c \\in A : c = a \\odot b\n$$\n\n### Ley de composición externa por la izquierda\n\n$$\n\\forall a \\in A, \\forall b \\in B \\quad \\exists! c \\in B : c = a \\odot b\n$$\n\n# Principales estructuras algebraicas\n\n## Con una ley de composición interna\n\n* Magma\n* Semigrupo\n* Monoide\n* **Grupo**\n* Bucle\n* Cuasigrupo\n\n## Con dos leyes de composición interna\n\n* Semianillo\n* **Anillo**\n* Pseudoanillo\n* Dominio de integridad\n* **Cuerpo**\n* Retículo (orden)\n* Álgebra booleana\n\n## Con leyes de composición interna y externa\n\n* **Módulo**\n* **Espacio vectorial**\n* Álgebra sobre un cuerpo\n\n# Grupo - Group\n\nUn grupo es una estructura algebraica formada por un conjunto no vacío $G$ dotado de una operación interna $\\odot$ que combina cualquier par de elementos para componer un tercero dentro del mismo conjunto y que satisface las propiedades **asociativas**, existencia de **elemento neutro** y **simétrico**.\n\n1. $G$ es cerrado bajo la operación. $\\forall a,b \\in G, a \\odot b \\in G$. (**Magma**)\n2. Es asociativa. $\\forall a,b,c \\in G, (a \\odot b) \\odot c = a \\odot (b \\odot c)$. (**Semigrupo**)\n3. Tiene a $n$ como elemento neutro. $\\forall a \\in G, a \\odot n = n \\odot a = a$. (**Monoide**)\n4. Existe elemento simétrico. $\\forall a \\in G, \\exists b \\in G, a \\odot b = b \\odot a = n$. (**Grupo**)\n\n## Grupo abeliano\n\nSi la operación también tiene la propiedad conmutativa $\\forall a,b \\in A, a \\odot b = b \\odot a$ se dice que es un **grupo abeliano**.\n\nHay dos notaciones principales para los grupos abelianos: aditiva y multiplicativa\n\n  Notación        |        Operación        |        Elemento neutro        |        Potencias        |        Elementos inversos        |        Suma directa / Producto directo\n  ----------------|-------------------------|-------------------------------|-------------------------|----------------------------------|--------------------------\n  Adición         | $a + b$                 | **cero** 0                    | $na$                    | $-a$                             | a $\\oplus$ b\n  Multiplicación  | $a * b$                 | **identidad** 1               | $a^n$                   | $a^{-1}$                         | a $\\times$ b\n\n\n# Anillo - Ring\n\nUn **anillo** es un sistema algebraico dotado con dos operaciones internas llamadas **suma** y **producto**.\n\nSea $A$ un conjunto no vacío, y sean $+$ y $*$ dos operaciones binarias en $A$. Se dice que el conjunto $(A, +, *)$ es un anillo si se cumplen cinco propiedades de grupo abeliano para la suma, y tres condiciones adicionales acerca de la multiplicación\n\n1. $A$ es cerrado bajo la multiplicación. $\\forall a,b \\in A, a * b \\in A$.\n2. La multiplicación asociativa. $\\forall a,b,c \\in A, (a * b) * c = a * (b * c)$.\n3. La multiplicación es distributiva respecto de la suma. $\\forall a,b,c \\in A \\quad a * (b + c) = (a * b) + (a * c) \\land (a + b) * c = (a * c) + (b * c)$\n\nSi la multiplicación es conmutativa $\\forall a,b \\in A, a * b = b * a$. se llama un **anillo conmutativo**.\n\nSi un anillo cuenta con **identidad** se llama **anillo unitario**.\n\n# Cuerpo - Field\n\nUn **cuerpo** es un **anillo de división conmutativo**, un **anillo conmutativo y unitario** en el que todo elemento distinto de **cero** es **invertible respecto de la multiplicación**, es decir, que permiten efectuar las operaciones de **sustracción** y **división**. Los cuerpos eran llamados **dominios racionales**.\n\n* $K$ es cerrado para la adición y la multiplicación\n* **Asociatividad** de la adición y la multiplicación\n* **Conmutatividad** de la adición y la multiplicación\n* Existencia de un **elemento neutro** para la adición y la multiplicación\n* Existencia de **inverso aditivo**, de **inverso multiplicativo**\n* **Distributividad** de la multiplicación respecto de la adición\n\n# Espacio vectorial - Vector space\n\nUn **espacio vectorial** es una estructura algebraica creada a partir de un conjunto no vacío, una operación interna llamada **suma** y una operación externa llamanda **producto por un escalar**.\n\nA los elementos de un espacio vectorial se les llama **vectores** y a los elementos del cuerpo **escalares**.\n\n## Suma entre vectores\n\n$$\nV \\times V \\mapsto V\n$$\n\n1. **Propiedad conmutativa**.\n2. **Propiedad asociativa**.\n3. **Elemento neutro**.\n4. **Elemento opuesto**.\n\n## Producto por un escalar\n\n$$\nK \\times V \\mapsto V\n$$\n\n5. **Propiedad asociativa**. $\\forall a,b \\in K, \\forall \\textbf{u} \\in V : (a * b) * \\textbf{u} = a * (b * \\textbf{u})$\n6. **Elemento neutro multiplicactiva** $n$. $\\exists n \\in K, \\forall \\textbf{u} \\in V: n * \\textbf{u} = \\textbf{u}$\n7. **Propiedad distributiva del producto respecto la suma de vectores**. $\\forall k \\in K, \\forall \\textbf{u},\\textbf{v} \\in V : k * (\\textbf{u} + \\textbf{v}) = k * \\textbf{u} + k * \\textbf{v}$\n8. **Propiedad distributiva del producto respecto la suma de escalares**. $\\forall a,b \\in K, \\forall \\textbf{u} \\in V : (a + b) * \\textbf{u} = a * \\textbf{u} + b * \\textbf{u}$\n\n## Propiedad\n\n### Unicidad del vector neutro\n\n$$\n   \\mathbf{u} + \\mathbf{0_1} = \\mathbf{u} + \\mathbf{0_2}\n   \\Rightarrow  \\mathbf{0_1} = \\mathbf{0_2}\n   \\Rightarrow  \\exists ! \\; \\mathbf{0} \\in V \n$$\n\n### Unicidad del vector opuesto\n\n$$\n   \\mathbf{u}   - \\mathbf{u_1} = \\mathbf{u} - \\mathbf{u_2}\n   \\Rightarrow  - \\mathbf{u_1} = - \\mathbf{u_2}\n   \\Rightarrow  \\exists ! - \\mathbf{u} \\in V\n$$\n\n### Unicidad del elemento unitario en el cuerpo $K$\n\n$$\n   \\mathit{a}  * \\mathit{1_1} = \\mathit{a} * \\mathit{1_2}\n   \\Rightarrow \\mathit{1_1} = \\mathit{1_2}\n   \\Rightarrow \\exists ! \\; \\mathit{1} \\in K\n$$\n\n### Unicidad del elemento inverso en el cuerpo $K$\n\n$$\n   \\mathit{a}  * \\mathit{a_1^{-1}} = \\mathit{a} * \\mathit{a_2^{-1}}\n   \\Rightarrow \\mathit{a_1^{-1}} = \\mathit{a_2^{-1}}\n   \\Rightarrow \\exists ! \\mathit{a^{-1}} \\in K\n$$\n\n### Producto de un escalar por el vector cero\n\n$$\n   \\mathit{a} * \\mathbf{u} =\n   \\mathit{a} * (\\mathbf{u} + \\mathbf{0}) =\n   \\mathit{a} * \\mathbf{u} + \\mathit{a} * \\mathbf{0}\n   \\Rightarrow \n   \\mathit{a} * \\mathbf{0} = \\mathbf{0}\n$$\n\n### Producto del escalar cero por un vector es vector cero\n\n$$\n   \\mathbf{u} =\n   \\mathit{1} * \\mathbf{u} =\n   (\\mathit{1} + \\mathit{0}) * \\mathbf{u} =\n   \\mathit{1} * \\mathbf{u} + \\mathit{0} * \\mathbf{u} =\n   \\mathbf{u} + \\mathit{0} * \\mathbf{u}\n   \\Rightarrow\n   \\mathit{0} * \\mathbf{u} = \\mathbf{0}\n$$\n\n## Subespacio vectorial\n\nSea $V$ un espacio vectorial sobre $K$, y $U \\subset V$ no vacío, $U$ es un **subespacio vectorial** de $V$ si:\n\ni. $\\forall \\textbf{u}, \\textbf{v} \\in U, \\textbf{u} + \\textbf{v} \\in U$\nii. $\\forall \\textbf{u} \\in U, \\forall k \\in K, k \\textbf{u} \\in U$\n\n## Combinación lineal\n\nDadoo un espacio vectorial $S$, diremos que un vector $\\textbf{v}$ es combinación de los vectores de $B = {e_1, ..., e_n} \\subset S$ si existen escalares $k_1, ..., k_n$ tales que\n\n$$\\textbf{v} = k_1e_1 + ... + k_ne_n$$\n\nNotamos como $\\langle B \\rangle_S$ el subespacio vectorial formado por el conjunto de todas las combinaciones lineales de los vectores de $B$.\n\n## Independencia lineal\n\nDiremos que un conjunto $B={e_1, ..., e_n}$ es linealmente independiente si el vector cero no se puede expresar como combinación lineal no nula de los vectores de $B$.\n\n## Base de un espacio vectorial\n\nUna base es el menor conjunto $B$ de vectores que generan todo el espacio. Y cualquier vector $v$ puede ser expresado unívocamente como una suma de elementos de la base.\n\n## Dimesión\n\nDado un espacio vectorial sobre $K$.\n\n* Si tiene base finita diremos dimensión al número de elementos de dicha base.\n* Si tiene base no finita diremos que es de dimensión infinita.\n\n## Intersección de subespacios vectoriales\n\n$$\nF \\cap G := \\{\\textbf{u} : \\textbf{u} \\in F, \\textbf{u} \\in G\\}\n$$\n\n## Suma de subespacios vectoriales\n\n$$\nF + G := \\{\\textbf{u} = \\textbf{v}_1 + \\textbf{v}_2 : \\textbf{v}_1 \\in F, \\textbf{v}_2 \\in G\\}\n$$\n\n### Suma directa de subespacios vectoriales\n\n$F + G$ es una suma directa $F \\oplus G$ si $S \\cap G = \\emptyset$\n\n## Aplicaciones lineales\n\nSon aplicaciones entre espacios vectoriales que mantienen la estructura de los espacios vectoriales, es decir, conservan las dos operaciones y las propiedades de estas de uno a otro de dichos espacios\n\nDado dos espacios vectoriales $E$ y $F$ sobre un mismo cuerpo diremos que un aplicación $f: E \\mapsto F$ es **lineal** si:\n\n$$\nf(\\textbf{u} +_E \\textbf{v}) = f(u) +_F f(v)\\\\\nf(k *_E \\textbf{v}) = k *_F f(v)\\\\\n$$\n\n# Módulo - Module\n\nUn módulo sobre un anillo es una generalización de la noción de espacio vectorial sobre un cuerpo, donde los correspondientes escalares son los elementos un anillo (con identidad) arbitrario y donde está definida una multiplicación (a la izquierda y/o a la derecha) entre elementos del anillo y elementos del módulo.\n\nSea $A$ un anillo con identidad y sea $1_{A}$ su identidad multiplicativa. Un $A$-módulo izquierdo de $M$ o simplemente $A_M$ es un grupo abeliano $(M,+)$ y una operación $A \\times M \\mapsto M$ tal que para cualesquiera $r,s \\in A$, $x,y \\in M$, se tiene\n\n1. $(r * s) *x = r * (s * x)$\n2. $(r + s) * x = r * x + s * x$\n3. $r * (x + y) = r * x + r * y$\n4. $1 * x = x$\n\nUn $A$-módulo derecho de $M$ o $M_A$ se define de forma semejante, sólo que el anillo actúa por la derecha. $M \\times A \\mapsto M$. Si $A$ es conmutativa, entonces $M_A$ es lo mismo que $A_M$.",
        "slug": "Estructura-Algebraica",
        "date": "2019-01-26 10:45:44",
        "lang": "es",
        "tags": [
          "Estructura Algebraica",
          "Grupo",
          "Grupo abeliano",
          "Anillo",
          "Cuerpo",
          "Espacio vectorial",
          "Módulo"
        ],
        "path": "/Estructura-Algebraica/index.html"
      },
      {
        "title": "Caso de estudio - Simulación de redes de colas",
        "markdownContentSource": "\n# Introducción\n\nComo responsable de operaciones del aeropuerto, debemos encontrar una solución al problema planteado. Para ello debemos construir un modelo de simulación, un modelo numérico que reproduce su comportamiento, con el objetivo de estudiar el funcionamiento y las prestaciones del sistema.\n\nEl software de modelado y resolución de problemas de simulación que hemos utilizado es [Enterprise Dynamics de INCONTROL V10.1](http://support.incontrolsim.com/en/enterprise-dynamics.html) junto con su [manual](http://support.incontrolsim.com/en/ed-tutorials.html).\n\n# [Escenario](practica2.pdf)\n\nEn uno de los aeropuertos españoles, se va a instalar un nuevo sistema automático de tratamiento de equipajes (SATE). Este sistema realiza de forma totalmente automática el transporte de las maletas desde los puestos de facturación (check-in), las maletas se transportan a través de cintas a los hipódromos de carga, tienen que pasar por varias estaciones de inspección en cascada, donde finalmente son recogidas y llevadas a los aviones correspondientes a través de carritos.\n\n# Descripción de la red\n\n## Entrada\n\nLas maletas que salen de los check-in y entran en el sistema de transporte siguen un proceso tipo Poisson a un ritmo de **$\\lambda=5000$ maletas/hora** total para todo el sistema.\n\n$$\\lambda=5000$$\n\n## N1\n\nEl 100% de estas maletas que tienen que pasar un primer nivel de inspección automática (N1) denominado inspección de explosivos. El tiempo promedio de inspección para cada maleta es de **$\\overline{X_1}=4$ segundos** y sigue un proceso de Poisson. \n\n$$I_1 = \\lambda = 5000$$\n\n$$\\mu_1 = \\frac{1}{4 / (60 * 60)} = 900$$\n\n## N2\n\nAproximadamente el **15%** de las inspecciones tipo N1 resultan dudosas, por lo tanto es necesario realizar una segunda operación de inspección (N2) a través de operadores que puedan procesar un promedio de **$\\mu_2=3$ maletas/min** siguiendo un proceso de tipo Poisson.\n\n$$I_2 = 0.15 * I_1$$\n\n$$\\mu_2 = 3 * 60 = 180$$\n\n## N3\n\n* De las maletas que pasan por N2, los operadores solicitan, en un **20%** de los casos, una inspección adicional de tipo manual (N3). El tiempo de inspección en este caso se ajusta a una distribución exponencial con un promedio de **$\\overline{X_3}=5$ minutos**.\n\n$$I_3 = 0.2 * I_2$$\n\n$$\\mu_3 = \\frac{1}{5/60} = 12$$\n\n* El resultado de esta última inspección (N3) es que en el **2%** de los casos las maletas se consideran _peligrosas_ y las restantes se consideran _válidas_.\n\n$$\\lambda_{peligrosas} = 0.02 * I_3$$\n\n## Reciclo\n\nHay que considerar que en cada uno de los procesos de inspección (N1, N2 y N3), en el **1%** de los casos, se pierde el seguimiento del equipaje y, por lo tanto, debe recircular por el mismo equipo de inspección. Reformulamos las ecuciones de trafico:\n\n$$\n\\begin{split}\nI_1 &= \\lambda + 0.01 * I_1\\\\\nI_2 &= 0.15 * 0.99 * I_1 + 0.01 * I_2\\\\\nI_3 &= 0.2 * 0.99 * I_2 + 0.01 * I_3\\\\\n\\lambda_{peligrosas} &= 0.02 * 0.99 * I3\\\\\n\\end{split}\n$$\n\n## Hipódromos\n\n* Las maletas clasificadas como _váidas_ (es decir, las que pasan satisfactoriamente algunos los controles N1, N2 o N3) llegan a los hipódromos y permanecen en espera de la llegada de los carritos de carga. \n\n$$\n\\begin{split}\n\\lambda_{validas}\n&= 0.85 * 0.99 * I_1 + 0.8 * 0.99 * I_2 + 0.98 * 0.99 * I_3\\\\\n&= \\lambda - \\lambda_{peligrosas}\\\\\n\\end{split}\n$$\n\n* En cada hipódromo hay dos operarios que cargan las maletas en carritos. Un operario puede cargar en el carrito un promedio de **$\\mu_{hipódromo}=15$ maletas por minuto** (considérese que cada operario gestiona un solo carrito).\n\n$$\\mu_{hipódromo} = 15 * 60 = 900$$\n\n## Boom!\n\nLas maletas que no pasan las inspecciones y finalmente se consideran _peligrosas_ son destruidas.\n\n$$\n\\begin{split}\n\\lambda_{peligrosas} \n&= 0.02 * 0.99 * I_3\\\\\n&= 0.02 * 0.99 * \\frac{0.2 * 0.99 * \\frac{0.15 * 0.99 * \\frac{\\lambda}{1 - 0.01}}{1 - 0.01}}{1 - 0.01}\\\\\n&= 3 \\, \\textbf{maletas por hora}\\\\\n\\end{split}\n$$\n\n# Restricciones\n\n* Los equipos de inspección y los hipódromos no pueden tener un nivel de saturación/uso superior al **80%**\n\n* Se puede asumir que las maletas llegan de forma **aleatoria e igualmente distribuída** a los distintos hipódromos.\n\n# Resolución del problema\n\n## 1. Diagrama de red de colas\n\n**Elaborar el diagrama de red de colas indicando todos los parámetros de los elementos (tasas y capacidades) y de los flujos (en porcentaje o en proporción).**\n\n![diagrama](diagrama.jpg)\n\n## 2. Análisis\n\n**Determinar, utilizando criterios analiticos y/o de teoría de las colas, el número de equipos de inspección necesarios en cada nivel de inspección (N1, N2 y N3) y el número de hipódromos necesarios.**\n\nA partir de los resultados anteriormente obtenidos:\n\n$$\n\\begin{split}\nI_1 &= \\lambda + 0.01 * I_1\\\\\nI_2 &= 0.15 * 0.99 * I_1 + 0.01 * I_2\\\\\nI_3 &= 0.2 * 0.99 * I_2 + 0.01 * I_3\\\\\n\\lambda_{validas} &= 0.85 * 0.99 * I_1 + 0.8 * 0.99 * I_2 + 0.98 * 0.99 * I_3\\\\\n\\lambda_{peligrosas} &= 0.02 * 0.99 * I3\\\\\n\\end{split}\n$$\n\nDebemos cumplir que\n\n$$\n\\begin{split}\n\\rho_i &< 0.8\\\\\n\\frac{I_i}{c_i \\mu_i} &< 0.8\\\\\nc_i &> \\frac{I_i}{0.8 * \\mu_i}\\\\\n\\end{split}\n$$\n\nPodemos deducir las tasas de llegadas para diferentes nodos.\n\n### En N1\n\n$$\n\\begin{split}\nI_1 &= \\lambda + 0.01 * I_1\\\\\n(1 - 0.01)I_1 &= \\lambda\\\\\nI_1 &= \\frac{\\lambda}{1 - 0.01}\\\\\nI_1 &\\approx 5050.5\\\\\nc_1 &> \\frac{I_1}{0.8 * \\mu_1}\\\\\nc_1 &> \\frac{5050.5}{0.8 * 900}\\\\\nc_1 &> 7.0146\\\\\n\\end{split}\n$$\n\nnecesitamos al menos **8 equipos**.\n\n### En N2\n\n$$\n\\begin{split}\nI_2 &= 0.15 * 0.99 * I_1 + 0.01 * I_2\\\\\n(1 - 0.01)I_2 &= 0.15 * 0.99 * I_1\\\\\nI_2 &= \\frac{0.15 * 0.99 * I_1}{1 - 0.01}\\\\\nI_2 &\\approx 757.57\\\\\nc_2 &> \\frac{I2}{0.8 * \\mu_2}\\\\\nc_2 &> \\frac{757.57}{0.8 * 180}\\\\\nc_2 &> 5.26\\\\\n\\end{split}\n$$\n\nnecesitamos al menos **6 equipos**.\n\n### En N3\n\n$$\n\\begin{split}\nI_3 &= 0.2 * 0.99 * I_2 + 0.01 * I_3\\\\\n(1 - 0.01)I_3 &= 0.2 * 0.99 * I_2\\\\\nI_3 &= \\frac{0.2 * 0.99 * I_2}{1 - 0.01}\\\\\nI_3 &\\approx 151.51\\\\\nc_3 &> \\frac{I3}{0.8 * \\mu_3}\\\\\nc_3 &> \\frac{1.5151}{0.8 * 12}\\\\\nc_3 &> 15.783\\\\\n\\end{split}\n$$\n\nnecesitamos al menos **16 equipos**.\n\n### En Hipódromos\n\n$$\n\\begin{split}\n\\lambda_{validas} &= 0.85 * 0.99 * I_1 + 0.8 * 0.99 * I_2 + 0.98 * 0.99 * I_3\\\\\n\\lambda_{validas} &= 4.997\\\\\n\\lambda_{peligrosas} &= 0.02 * 0.99 * I3\\\\\n\\lambda_{peligrosas} &= \\lambda - \\lambda_{validas}\\\\\n\\lambda_{peligrosas} &= 3\\\\\nc_{hipódromo} &> \\frac{\\lambda_{validas}}{0.8 * \\mu_{hipódromo}}\\\\\nc_{hipódromo} &> \\frac{4997}{0.8 * 900}\\\\\nc_{hipódromo} &> 6.94\\\\\n\\end{split}\n$$\n\nNecesitamos al menos **7 operarios**, sabemos que en cada hipódromo obligariamente hay dos operarios, habrá **4 hipódromos 8 operarios**.\n\n## 3. Diagrama TQM\n\n**Elaborar el diagrama TQM del modelo.**\n\n[![diagrama TQM](TQM.jpg)](TQM.jpg)\n\n## 4. [Simulación](simulacion1.mod)\n\n**Crear un modelo de simulación que represente el sistema indicado según las dimensiones calculadas previamente.**\n\nLos diferentes elementos del modelado son:\n\n* Entidades: Maletas\n* Atributos: si son peligrosas o no\n* Actividades: Las diferentes inspecciones en N1, N2, N3 y finalmente las recogidas si son válidas o destruidas si son peligrosas\n* Estados: si son clafisicadas como peligrosas o válidas\n* Eventos: la llegada de una nueva maleta, el resultado de diferentes inspecciones, o si se pierden el control y hay que reciclarse\n\nPara facilatar la medición de unos parametros hemos cambiado un poco la estructura de diseño. En vez de diseñar los carritos y destrccón como sink. Hemos puesto como dos cola que enlazan al mismo sitio y desde ahí ya podemos hacer la medición de algunos parámetros.\n\n[![simulacion](simulacion.png)](simulacion.png)\n\nEl sistema se divide entre la entrada **check-in** que modela con un átomo de **source** en el que el tiempo medio entre llegadas sigue una distribución exponencial de T ya calculada, y luego los distintos equipos de inspecciones se modelan cada uno con un átomo de **Multiservice** indicando su capacidad, calculada en el apartado anterior así como su tiempo de servicio, que viene especificado por el enunciado. Entre ellos se conectan por una **cola de capacidad infinita**. Las maletas salen o bien por N3 hacia la destruccion o de algún punto de inspección hacia la zona de acumulación que consiste en 4 hipódromos representados con los átomos de **Multiservice de capacidad 2** cada uno de los cuales posee su propia **cola de capacidad infinita**.\n\nCon canales:\n\n[![simulacion con canales](simulacion_con_canales.png)](simulacion_con_canales.png)\n\n## 5. [Experimento](simulacion.xlsx)\n\n**Realizar un experimento de simulación, con un número suficientemente alto de réplicas. Describir los experimentos (número y duración).**\n\nEl experimento consiste en **100** lanzamientos seperados y cada una dura **48** horas en el reloj de simulación.\n\nIntuitivamente que a mayor tiempo de ejecución reducimos la varianza de valores simulados, en nuestro caso **48 horas** la varianza de **$\\overline{x_{ij}}$** es:\n\n$$\\frac{\\sigma^2}{I_{ij}*48}$$ \n\ndonde $I_{ij}$ es la tasa de transferencia efectiva de j medición en i ejecucion.\n\nPor el teorema del límite central\n\n$$\\overline{x_{ij}} \\sim \\mathcal{N}(\\mu_j, \\frac{\\sigma_j^2}{I_{ij}*48})$$\n\nPara 100 ejecución la media de **$n=100$ ejecuciones** \n\n$\\overline{x_{j}}$ distribuye como\n\n$$\\overline{x_{j}} \\sim \\mathcal{N}(\\mu_j, \\frac{\\sigma_{j}^2}{I_{j}*48*100})$$\n\nPor ser $\\overline{x_{ij}}$ una variable con distribución normal\n\n$$S_{j}^2 \\sim \\mathcal{X}^2_{100 - 1}\\frac{\\frac{\\sigma_{j}^2}{I_{j}*48*100}}{100-1}$$\n\nPara el intervalo de confianza 95% y 100 ejecuciones de 48h nos garantiza que el error máximo de cada medición es:\n\n$$\\epsilon_j > z_{\\frac{95}{2}}\\frac{\\sigma_j}{\\sqrt{100*48*I_{j}}}$$\n\nPara la medición de tiempo medio de inspección total hemos puesto un triger de la salida en **check-in** que asigna el tiempo de comienzo la inspección a un label \"inspeccion\" y otro trigger de entrada en **el repartior** y otro trigger de salida en **N3** de calculamos y actualizamos al tiempo actual menos el tiempo de comienzo de la inspección, en la **salida** obtenemos los siguientes datos.\n\n| Átomo               | medición                                                        | Media     | Var       | SD     | Min       | P-25      | Mediana   | P-75      | Max       | IC 95% |\n|---------------------|-----------------------------------------------------------------|-----------|-----------|--------|-----------|-----------|-----------|-----------|-----------|--------|\n| Carritos de carga   | número de maletas validas                                       | 239851.97 | 290929.12 | 539.38 | 238401.00 | 239538.00 | 239799.50 | 240186.25 | 241376.00 | 105.72 |\n| Carritos de carga   | tiempo medio entre dos llegadas sucesivas de maletas validas    | 0.72      | 0.00      | 0.00   | 0.72      | 0.72      | 0.72      | 0.72      | 0.72      | 0.00   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Destruye            | número de maletas peligrosas                                    | 142.56    | 131.26    | 11.46  | 116.00    | 136.00    | 142.00    | 149.00    | 172.00    | 2.25   |\n| Destruye            | tiempo medio entre dos llegadas sucesivas de maletas peligrosas | 1220.05   | 10071.68  | 100.36 | 1004.65   | 1159.73   | 1216.90   | 1270.59   | 1489.66   | 19.67  |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Cola de hipodromo 1 | número medio de productos                                       | 1.29      | 0.00      | 0.05   | 1.18      | 1.26      | 1.29      | 1.33      | 1.41      | 0.01   |\n| Cola de hipodromo 1 | tiempo medio de espera                                          | 3.72      | 0.02      | 0.14   | 3.42      | 3.63      | 3.73      | 3.82      | 4.02      | 0.03   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Cola de hipodromo 2 | número medio de productos                                       | 1.29      | 0.00      | 0.05   | 1.18      | 1.25      | 1.29      | 1.31      | 1.45      | 0.01   |\n| Cola de hipodromo 2 | tiempo medio de espera                                          | 3.71      | 0.02      | 0.14   | 3.43      | 3.61      | 3.70      | 3.77      | 4.16      | 0.03   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Cola de hipodromo 3 | número medio de productos                                       | 1.29      | 0.00      | 0.05   | 1.18      | 1.25      | 1.29      | 1.32      | 1.49      | 0.01   |\n| Cola de hipodromo 3 | tiempo medio de espera                                          | 3.72      | 0.02      | 0.15   | 3.41      | 3.62      | 3.71      | 3.80      | 4.30      | 0.03   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Cola de hipodromo 4 | numero medio de productos                                       | 1.29      | 0.00      | 0.05   | 1.13      | 1.25      | 1.28      | 1.33      | 1.43      | 0.01   |\n| Cola de hipodromo 4 | tiempo medio de espera                                          | 3.72      | 0.02      | 0.14   | 3.29      | 3.61      | 3.71      | 3.82      | 4.12      | 0.03   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Cola de N1          | numero de medio productos                                       | 0.64      | 0.00      | 0.02   | 0.59      | 0.63      | 0.64      | 0.65      | 0.71      | 0.00   |\n| Cola de N1          | tiempo medio de espera                                          | 0.46      | 0.00      | 0.01   | 0.42      | 0.45      | 0.46      | 0.47      | 0.50      | 0.00   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Cola de N2          | numero de medio productos                                       | 0.79      | 0.00      | 0.06   | 0.67      | 0.75      | 0.79      | 0.84      | 0.96      | 0.01   |\n| Cola de N2          | tiempo medio de espera                                          | 3.77      | 0.07      | 0.27   | 3.17      | 3.59      | 3.76      | 3.97      | 4.57      | 0.05   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Cola de N3          | numero de medio productos                                       | 1.01      | 0.08      | 0.28   | 0.50      | 0.81      | 0.94      | 1.20      | 1.97      | 0.06   |\n| Cola de N3          | tiempo medio de espera                                          | 24.07     | 43.19     | 6.57   | 12.04     | 19.09     | 22.73     | 28.41     | 45.94     | 1.29   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Hipódromo 1         | nivel de uso                                                    | 0.69      | 0.00      | 0.00   | 0.69      | 0.69      | 0.69      | 0.70      | 0.70      | 0.00   |\n| Hipódromo 1         | numero de medio productos                                       | 1.39      | 0.00      | 0.01   | 1.37      | 1.38      | 1.39      | 1.39      | 1.41      | 0.00   |\n| Hipódromo 1         | tiempo medio de servicio                                        | 4.00      | 0.00      | 0.02   | 3.96      | 3.98      | 4.00      | 4.01      | 4.03      | 0.00   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Hipódromo 2         | nivel de uso                                                    | 0.69      | 0.00      | 0.00   | 0.68      | 0.69      | 0.69      | 0.70      | 0.70      | 0.00   |\n| Hipódromo 2         | numero de medio productos                                       | 1.39      | 0.00      | 0.01   | 1.37      | 1.38      | 1.39      | 1.39      | 1.41      | 0.00   |\n| Hipódromo 2         | tiempo medio de servicio                                        | 4.00      | 0.00      | 0.02   | 3.95      | 3.98      | 3.99      | 4.00      | 4.04      | 0.00   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Hipódromo 3         | nivel de uso                                                    | 0.69      | 0.00      | 0.00   | 0.68      | 0.69      | 0.69      | 0.70      | 0.70      | 0.00   |\n| Hipódromo 3         | numero de medio productos                                       | 1.39      | 0.00      | 0.01   | 1.37      | 1.38      | 1.39      | 1.39      | 1.41      | 0.00   |\n| Hipódromo 3         | tiempo medio de servicio                                        | 4.00      | 0.00      | 0.02   | 3.96      | 3.99      | 4.00      | 4.01      | 4.05      | 0.00   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Hipódromo 4         | nivel de uso                                                    | 0.69      | 0.00      | 0.00   | 0.68      | 0.69      | 0.69      | 0.70      | 0.70      | 0.00   |\n| Hipódromo 4         | numero de medio productos                                       | 1.39      | 0.00      | 0.01   | 1.36      | 1.38      | 1.39      | 1.39      | 1.40      | 0.00   |\n| Hipódromo 4         | tiempo medio de servicio                                        | 4.00      | 0.00      | 0.02   | 3.94      | 3.99      | 4.00      | 4.01      | 4.05      | 0.00   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| N1                  | nivel de uso                                                    | 0.70      | 0.00      | 0.00   | 0.70      | 0.70      | 0.70      | 0.70      | 0.71      | 0.00   |\n| N1                  | numero de medio productos                                       | 5.61      | 0.00      | 0.02   | 5.57      | 5.60      | 5.61      | 5.62      | 5.66      | 0.00   |\n| N1                  | tiempo medio de servicio                                        | 4.00      | 0.00      | 0.01   | 3.98      | 4.00      | 4.00      | 4.00      | 4.02      | 0.00   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| N2                  | nivel de uso                                                    | 0.70      | 0.00      | 0.01   | 0.69      | 0.70      | 0.70      | 0.71      | 0.71      | 0.00   |\n| N2                  | numero de medio productos                                       | 4.21      | 0.00      | 0.03   | 4.12      | 4.19      | 4.22      | 4.23      | 4.27      | 0.01   |\n| N2                  | tiempo medio de servicio                                        | 20.01     | 0.01      | 0.11   | 19.73     | 19.93     | 20.01     | 20.08     | 20.34     | 0.02   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| N3                  | nivel de uso                                                    | 0.79      | 0.00      | 0.01   | 0.74      | 0.78      | 0.79      | 0.80      | 0.82      | 0.00   |\n| N3                  | numero de medio productos                                       | 12.56     | 0.05      | 0.22   | 11.89     | 12.42     | 12.56     | 12.73     | 13.14     | 0.04   |\n| N3                  | tiempo medio de servicio                                        | 299.31    | 12.79     | 3.58   | 290.65    | 296.73    | 299.44    | 302.15    | 307.18    | 0.70   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Salida              | tiempo total de inspección                                      | 17.86     | 0.12      | 0.35   | 16.93     | 17.59     | 17.86     | 18.08     | 18.94     | 0.07   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Sistema             | Número total de maletas en el sistema                           | 35.54     | 0.26      | 0.51   | 34.06     | 35.23     | 35.54     | 35.86     | 37.30     | 0.10   |\n\nVemos que efectivamente **el nivel de uso de las diferentes inspecciónes están por debajo de 0.8**. Y para calcular el nivel de uso usamos el número medio de productos en cada sistema partidos la capacidad del mismo.\n\n[![tiempo medio entre dos llegadas sucesivas de maletas validas](tiempo medio entre dos llegadas sucesivas de maletas validas.png)](tiempo medio entre dos llegadas sucesivas de maletas validas.png)\n\n[![tiempo medio entre dos llegadas sucesivas de maletas peligrosas](tiempo medio entre dos llegadas sucesivas de maletas peligrosas.png)](tiempo medio entre dos llegadas sucesivas de maletas peligrosas.png)\n\nTambién notamos que los tiempos entre dos llegadas sucesivas de distintos tipos de maleta está centrado a los valores teoricos.\n\n$$\n\\begin{split}\nT_{validas} \n&= \\frac{1}{I_{validas}}\\\\\n&= 0.72\\\\\nT_{peligrosas}\n&= \\frac{1}{I_{validas}}\\\\\n&= 1200\\\\ \n\\end{split}\n$$\n\n## 6. Objetivos\n\n**A través de los experimentos de simulación, calcular los siguientes resultados y compararlos con los resultados teóricos:**\n\n### a. Tiempo medio de inspección total \n\n**Tiempo medio de inspección total** para las maletas.\n\nUsamos los resultados de I que obtuvimos anteriormente.\n\n$$\n\\begin{split}\nR_{inspección\\,total} &= \\frac{I_1}{\\lambda}R_1 + \\frac{I_2}{\\lambda}R_2 + \\frac{I_3}{\\lambda}R_3\\\\\nR_{inspección\\,total} &= \\frac{I_1}{\\lambda}*(\\frac{Q_1}{I_1}+X_1) + \\frac{I_2}{\\lambda}R_2*(\\frac{Q_2}{I_2}+X_2) + \\frac{I_3}{\\lambda}*(\\frac{Q_3}{I*3}+X_3)\\\\\nR_{inspección\\,total} &= 1.0101*(\\frac{Q_1}{5050.5}+0.00111111) + 0.153*(\\frac{Q_2}{757.57}+0.0055555) + 0.0309*(\\frac{Q_3}{151.51}+0.08333333)\\\\\n\\end{split}\n$$\n\nUsamos la fórmula de calcular Q en una sistema MMC $\\overline{Q}=\\frac{(c\\rho)^c\\lambda\\mu p_0}{(c-1)!(c\\mu-\\lambda)^2}$\n\n$$\n\\begin{split}\nR_{inspección\\,total} &= 1.0101*(\\frac{0.64126535}{5050.5}+0.00111111) + 0.153*(\\frac{0.79494307}{757.57}+0.0055555) + 0.0309*(\\frac{1.05087585}{151.51}+0.08333333)\\\\\nR_{inspección\\,total} &= 17.95\\,\\textbf{s}\\\\\n\\end{split}\n$$\n\nEl valor experimental obtenido es $17.86 \\pm 0.07$, el valor experiemental este valor está algo desviado del valor téorico.\n\n[![Tiempo medio de inspección total](tiempo medio de inspeccion total.png)](tiempo medio de inspeccion total.png)\n\n### b. Tiempo medio de espera\n\n**Tiempo medio de espera** en las distintas colas de los sistemas de inspección y en el hipódromo o zonas de acumulación.\n\nObtenemos **W** apartir de **Q** con la misma fórmula.\n\n$$\n\\begin{split}\nQ_1 &= 0.64126535\\\\\nW_1 &= Q_1 / I_1\\\\\nW_1 &= 0.457\\\\\nQ_2 &= 0.79494307\\\\\nW_2 &= Q_2 / I_2\\\\\nW_2 &= 3.78\\\\\nQ_3 &= 1.05087585\\\\\nW_3 &= Q_3 / I_3\\\\\nW_3 &= 24.97\\\\\n\\end{split}\n$$\n\n$W_1=0.457$ está dentro del intervalo de confianza de 95% entre $0.45661547-0.00262238$ y $0.45661547+0.00262238$\n\n$W_2=3.77756948$ está dentro del intervalo de confianza de 95% entre $3.77093044 - 0.05249099$ y $3.77093044 + 0.05249099$\n\n$W_3=24.96881008$ está dentro del intervalo de confianza de 95% entre $24.06570308 - 1.28800643$ y $24.06570308 + 1.28800643$\n\nPara las zonas de acumulación, tenemos 4 hipódromos, cada uno tiene su propia cola, suponemos que a cada hipódromo llegan de forma aleatoria e igualmente distribuída, de los cuales la tasa de llegagas entonces es **$\\frac{\\lambda_{validas}}{4}$**, la capacidad de cada uno de ellos es **2**.\n\nPara cada cola de hipódromo el tiempo de espera es:\n\n$$\n\\begin{split}\nW_{hipódromo} &= \\frac{Q_{hipódromo}}{\\frac{\\lambda_{validas}}{4}}\\\\\nW_{hipódromo} &= \\frac{\\frac{(2*0.694)^2*1249.227*900*0.180627}{(2-1)!(2*900-1249.227)^2}}{1249.25}\\\\\nW_{hipódromo} &= \\frac{1.2899}{1249.25}\\\\\nW_{hipódromo} &= 0.0010325395237142285\\,\\textbf{h}\\\\\nW_{hipódromo} &= 3.717\\,\\textbf{s}\\\\\n\\end{split}\n$$\n\n$W_{hipódromo}=3.717$ está dentro del intervalo de confianza de 95% entre \n    $3.72022139 - 0.02658777$ y $3.72022139 + 0.02658777$ y\n    $3.70558075 - 0.02680399$ y $3.70558075 + 0.02680399$ y\n    $3.72118768 - 0.02963179$ y $3.72118768 + 0.02963179$ y\n    $3.71955176 - 0.02786201$ y $3.71955176 + 0.02786201$.\n\n### c. Número de maletas\n\n**Número de maletas** presentes en el sistema en cada momento.\n\nPara las colas ya hemos calculado anteriormente:\n\n$$\n\\begin{split}\nQ_1 &= 0.64126535\\\\\nQ_2 &= 0.79494307\\\\\nQ_3 &= 1.05087585\\\\\nQ_{hipódromo} &= 1.28990589\\\\\nJ_1 &=  Q_1 + \\rho_1*c_1\\\\\nJ_1 &=  6.25293763\\\\\nJ_2 &=  Q_2 + \\rho_2*c_2\\\\\nJ_2 &=  5.00369728\\\\\nJ_3 &=  0.64417406 + 0.75780158*17\\\\\nJ_3 &=  13.67713847\\\\\nJ_{hipódromo} &=  Q_{hipódromo} + \\rho_{hipódromo}*c_{hipódromo}\\\\\nJ_{hipódromo} &=  2.6779614475\\\\\nJ &= J_1 + J_2 + J_3 + J_{hipódromo} * 4\\\\\nJ &= 35.64561916939008\\\\\n\\end{split}\n$$\n\n[![Número medio de maletas en el sistema](numero medio de maletas.png)](numero medio de maletas.png)\n\nEl valor téorico esta más o menos situado en el 3º percentil.\n\n## 7. Repetir el expemento para [nuevo modelo](simulacion2.mod)\n\nRepetir el experimento para el caso en el que **el tiempo de inspección dependa del tipo de maleta**. Existen dos tipos de maletas: normal (80%), cuyo tiempo de inspección es el que se ha indicado anteriormente, y especial (20%), cuyo tiempo de inspección es el doble del tiempo para una maleta normal. Comparar [los resultados con el modelo original](simulacion.xlsx).\n\n| Átomo               | medición                                                        | Media     | Var       | SD     | Min       | P-25      | Mediana   | P-75      | Max       | IC 95% |\n|---------------------|-----------------------------------------------------------------|-----------|-----------|--------|-----------|-----------|-----------|-----------|-----------|--------|\n| Carritos de carga   | número de maletas validas                                       | 239833.49 | 210649.85 | 458.97 | 238701.00 | 239485.25 | 239875.50 | 240154.25 | 241023.00 | 89.96  |\n| Carritos de carga   | tiempo medio entre dos llegadas sucesivas de maletas validas    | 0.72      | 0.00      | 0.00   | 0.72      | 0.72      | 0.72      | 0.72      | 0.72      | 0.00   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Destruye            | número de maletas peligrosas                                    | 141.87    | 167.43    | 12.94  | 110.00    | 133.00    | 142.00    | 152.00    | 171.00    | 2.54   |\n| Destruye            | tiempo medio entre dos llegadas sucesivas de maletas peligrosas | 1228.53   | 13755.82  | 117.29 | 1010.53   | 1136.84   | 1216.90   | 1299.25   | 1570.91   | 22.99  |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Cola de hipodromo 1 | número medio de productos                                       | 1.30      | 0.00      | 0.05   | 1.22      | 1.26      | 1.30      | 1.33      | 1.45      | 0.01   |\n| Cola de hipodromo 1 | tiempo medio de espera                                          | 3.75      | 0.02      | 0.14   | 3.52      | 3.63      | 3.74      | 3.82      | 4.15      | 0.03   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Cola de hipodromo 2 | número medio de productos                                       | 1.30      | 0.00      | 0.05   | 1.16      | 1.27      | 1.29      | 1.33      | 1.45      | 0.01   |\n| Cola de hipodromo 2 | tiempo medio de espera                                          | 3.74      | 0.02      | 0.14   | 3.35      | 3.65      | 3.74      | 3.83      | 4.16      | 0.03   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Cola de hipodromo 3 | número medio de productos                                       | 1.30      | 0.00      | 0.05   | 1.20      | 1.27      | 1.29      | 1.33      | 1.43      | 0.01   |\n| Cola de hipodromo 3 | tiempo medio de espera                                          | 3.74      | 0.02      | 0.14   | 3.49      | 3.65      | 3.73      | 3.83      | 4.08      | 0.03   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Cola de hipodromo 4 | numero medio de productos                                       | 1.30      | 0.00      | 0.04   | 1.16      | 1.27      | 1.30      | 1.32      | 1.39      | 0.01   |\n| Cola de hipodromo 4 | tiempo medio de espera                                          | 3.74      | 0.01      | 0.12   | 3.36      | 3.67      | 3.75      | 3.81      | 4.01      | 0.02   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Cola de N1          | numero de medio productos                                       | 3.22      | 0.02      | 0.14   | 2.94      | 3.12      | 3.21      | 3.29      | 3.61      | 0.03   |\n| Cola de N1          | tiempo medio de espera                                          | 2.29      | 0.01      | 0.10   | 2.10      | 2.22      | 2.29      | 2.34      | 2.57      | 0.02   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Cola de N2          | numero de medio productos                                       | 3.53      | 0.11      | 0.33   | 2.82      | 3.27      | 3.51      | 3.76      | 4.33      | 0.06   |\n| Cola de N2          | tiempo medio de espera                                          | 16.74     | 2.35      | 1.53   | 13.56     | 15.57     | 16.67     | 17.76     | 20.57     | 0.30   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Cola de N3          | numero de medio productos                                       | 14.40     | 43.63     | 6.61   | 5.61      | 9.26      | 13.05     | 18.21     | 38.10     | 1.29   |\n| Cola de N3          | tiempo medio de espera                                          | 340.78    | 23698.07  | 153.94 | 134.28    | 224.03    | 308.16    | 425.45    | 891.97    | 30.17  |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Hipódromo 1         | nivel de uso                                                    | 0.69      | 0.00      | 0.00   | 0.68      | 0.69      | 0.69      | 0.70      | 0.70      | 0.00   |\n| Hipódromo 1         | numero de medio productos                                       | 1.39      | 0.00      | 0.01   | 1.37      | 1.38      | 1.39      | 1.39      | 1.41      | 0.00   |\n| Hipódromo 1         | tiempo medio de servicio                                        | 4.00      | 0.00      | 0.02   | 3.96      | 3.99      | 4.00      | 4.01      | 4.04      | 0.00   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Hipódromo 2         | nivel de uso                                                    | 0.69      | 0.00      | 0.00   | 0.68      | 0.69      | 0.69      | 0.70      | 0.70      | 0.00   |\n| Hipódromo 2         | numero de medio productos                                       | 1.39      | 0.00      | 0.01   | 1.37      | 1.38      | 1.39      | 1.39      | 1.41      | 0.00   |\n| Hipódromo 2         | tiempo medio de servicio                                        | 4.00      | 0.00      | 0.02   | 3.96      | 3.99      | 4.00      | 4.01      | 4.04      | 0.00   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Hipódromo 3         | nivel de uso                                                    | 0.69      | 0.00      | 0.00   | 0.68      | 0.69      | 0.69      | 0.70      | 0.71      | 0.00   |\n| Hipódromo 3         | numero de medio productos                                       | 1.39      | 0.00      | 0.01   | 1.37      | 1.38      | 1.39      | 1.39      | 1.41      | 0.00   |\n| Hipódromo 3         | tiempo medio de servicio                                        | 4.00      | 0.00      | 0.02   | 3.97      | 3.99      | 4.00      | 4.01      | 4.04      | 0.00   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Hipódromo 4         | nivel de uso                                                    | 0.69      | 0.00      | 0.00   | 0.68      | 0.69      | 0.69      | 0.70      | 0.70      | 0.00   |\n| Hipódromo 4         | numero de medio productos                                       | 1.39      | 0.00      | 0.01   | 1.36      | 1.38      | 1.39      | 1.39      | 1.41      | 0.00   |\n| Hipódromo 4         | tiempo medio de servicio                                        | 4.00      | 0.00      | 0.01   | 3.95      | 3.99      | 4.00      | 4.01      | 4.04      | 0.00   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| N1                  | nivel de uso                                                    | 0.84      | 0.00      | 0.00   | 0.84      | 0.84      | 0.84      | 0.84      | 0.85      | 0.00   |\n| N1                  | numero de medio productos                                       | 6.73      | 0.00      | 0.02   | 6.68      | 6.72      | 6.74      | 6.75      | 6.77      | 0.00   |\n| N1                  | tiempo medio de servicio                                        | 4.80      | 0.00      | 0.01   | 4.77      | 4.79      | 4.80      | 4.81      | 4.83      | 0.00   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| N2                  | nivel de uso                                                    | 0.84      | 0.00      | 0.01   | 0.83      | 0.84      | 0.84      | 0.85      | 0.86      | 0.00   |\n| N2                  | numero de medio productos                                       | 5.05      | 0.00      | 0.04   | 4.97      | 5.02      | 5.05      | 5.07      | 5.14      | 0.01   |\n| N2                  | tiempo medio de servicio                                        | 23.98     | 0.02      | 0.14   | 23.52     | 23.91     | 23.97     | 24.05     | 24.32     | 0.03   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| N3                  | nivel de uso                                                    | 0.94      | 0.00      | 0.02   | 0.91      | 0.93      | 0.94      | 0.95      | 0.98      | 0.00   |\n| N3                  | numero de medio productos                                       | 15.10     | 0.06      | 0.25   | 14.62     | 14.88     | 15.09     | 15.26     | 15.72     | 0.05   |\n| N3                  | tiempo medio de servicio                                        | 358.93    | 19.16     | 4.38   | 349.10    | 356.17    | 358.75    | 361.46    | 369.06    | 0.86   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Salida              | tiempo total de inspección                                      | 34.50     | 24.36     | 4.94   | 27.74     | 30.56     | 33.53     | 37.54     | 52.00     | 0.97   |\n|                     |                                                                 |           |           |        |           |           |           |           |           |        |\n| Sistema             | Número total de maletas en el sistema                           | 58.76     | 47.61     | 6.90   | 49.33     | 53.18     | 57.52     | 62.88     | 82.84     | 1.35   |\n\nVemos que el tiempo total de inspección y el número total de maletas en el sistema han incremetado.\n\n[![Tiempo medio de inspección total](tiempo medio de inspeccion total 2.png)](tiempo medio de inspeccion total 2.png)\n\n[![Número medio de maletas en el sistema](numero medio de maletas 2.png)](numero medio de maletas 2.png)\n\nEn concreto, el tiempo total inspección ha incrementado un $\\frac{34.499501}{17.85811949} - 1 = 93.18 \\%$.\nY el número medio de maletas en el sistema ha incrementado un $\\frac{58.760103}{35.54217902} - 1 = 65.32 \\%$.\n\nMientras que el tiempo de espera de distintos hipódromos no han flactuado por mucho.\n\nEl ratio entre el número de meletas válidas y el número de maletas inválidas no han cambiando, que son medida que no depende del tipo de maletas.\n\nCon los datos experimentales descubrimos que el tiempo medio de servicio ha subido **8** en N1, **4** en N2, y **60** segundos en N3 aproximadamente. Los tiempo de de servicio han multiplicado por $0.2*2+0.8=1.2$ del modelo anterior.\n\nSi utilizamos las formulas anteriores y sustituimos $\\mu_1$, $\\mu_2$, $\\mu_3$ por $\\frac{\\mu_1}{1.2}$,  $\\frac{\\mu_2}{1.2}$ y $\\frac{\\mu_3}{1.2}$\n\nNos da que el número medio de maletas en el sistema será 57.52179153613749 que está dentro de intervalo de confianza $58.760103-1.352364$ y $58.760103+1.352364$\n\nY la misma razón para tiempo medio de inspección nos da el valor téorico 33.703160936433555 que está comprendido dentro de intervalo $34.499501-0.967288$ y $34.499501+0.967288$",
        "slug": "Caso-De-Estudio-Redes-De-Colas",
        "date": "2018-12-29 13:28:40",
        "lang": "es",
        "tags": [
          "Teoría de colas",
          "Simulación de sistemas",
          "Enterprise Dynamics"
        ],
        "path": "/Caso-De-Estudio-Redes-De-Colas/index.html"
      },
      {
        "title": "Teoria de colas",
        "markdownContentSource": "\n[Teoría de colas](https://github.com/vitaminac/OperationsResearch/blob/master/Queueing%20theory/Teor%C3%ADa%20de%20colas.ipynb)\n",
        "slug": "Teoria-De-Colas",
        "date": "2018-12-25 16:20:53",
        "lang": "es",
        "tags": ["Teoria de colas"],
        "path": "/Teoria-De-Colas/index.html"
      },
      {
        "title": "La implementación de minishell en Linux",
        "markdownContentSource": "\n# La Implementación de intérprete de mandatos en Linux\n\n## Introducción\n\n¿Qué es un intérprete de mandatos? Es un programa que hace la interfaz en modo texto entre el usuario y el sistema operativo.\n\nEn diferentes distribuciones de GNU/Linux vienen instalado ya por defecto Bash. Un programa informático de interpréte de mandato desarrollado por el proyecto GNU.\n\nMuchas veces en el contexto de empresa y no tenemos el entorno gráfico para gestión y administración de recursos, la única posibilidad es mediante el comando en modo texto.\n\n## Objectivo\n\nNuestro objetivo principal de esta implementación es manajer el concepto del proceso. Su creación, su ciclo de vida, y la intercomunicación necesaria entre proceso.\n\n## Librería de apoyo\n\nPara facilitar la implementación y también para centrar en nuestro objetivo principal. Hemos usado la librería **libparser** que su función primordial es convertir una cadena de caracteres en un struct **tline** que encapsula los comandos que va ejecutar, los argumentos, los redireccionamientos, etc...\n\n## Estructuras de datos utilizadas\n\nEstructuras de datos que vienen con la libraría:\n\n    typedef struct {\n        char * filename;\n        int argc;\n        char ** argv;\n    } tcommand;\n\n    typedef struct {\n        int ncommands;\n        tcommand * commands;\n        char * redirect_input;\n        char * redirect_output;\n        char * redirect_error;\n        int background;\n    } tline;\n\nNuestro:\n\n    /* almacenamos las informaciones asociados a los procesos creados por sistema  */\n    typedef struct JobInfo {\n        int id;\n        pid_t pgid;\n        char * command;\n        struct JobInfo * next;\n    } JobInfo;\n\nEl tipo JobInfo contien información sobre un trabajo que son un serie de trabajo connectado con pipes.\n\n## Funcionamiento general\n\nEl shell debe ser capaz de reconocer y lanzar el programa correspondiente al comando que introduzca el usuario, que es un archivo binario que reside en uno de los directorio que lista en la variable PATH y ejecutarlo con los paramteros que vienen acompañados. \n\nO tambiém una secuencia de comandos conectados enre sí mediante el mecanismo proporcionado por sistema Linux - **pipe**. Y también establecer los redireccionamientos de entrada y de salida si fuera preciso. Y vamos a tener unos cuantos comando interno que se usa para alterar los valores propio del shell.\n\n## Implementación\n\n### Comando básico\n\nLa funcionalidad básica de shell se hace dentro de un while donde lee un línea de texto que introduzca el usuario y parseamos con la librería llamando a la función **tokenize** y procesamos la línea de comandos.\n\n    char buf[BUFFER_SIZE];\n    tline * line;\n\n    do {\n        if (fgets(buf, BUFFER_SIZE, stdin) > 0) {\n            /* Leer una linea del taclado */\n            line = tokenize(buf);\n            if (line == NULL) {\n                continue;\n            }\n\n            execline(line, buf);\n        }\n    } while (true);\n\n\n\nPara hacerlo mas interactivo y también para que el usuario identifique que está detro del shell o en el commando en ejecución. Mostramos una cabecera de shell **msh>** con la función **printf**.\n\n    void prompt() {\n        printf(\"msh:>\");\n    }\n\nCuando tenemos el struct **tline** pasamos a execline donde ejecutamos los comandos correspondientes. La operación más simple sería ejecutar un comando sin redirrecionamiento.\n\n    execvp(command->argv[0], command->argv);\n\n### Redirecionamiento\n\nA veces el usuario pretende que la entra o la salida de programa sea diferente, por ejemplo, un archivo.\n\nTenemos que abrir un archivo que especifica la entra o la salida con la función **open** y luego también redirigirla con la llamada a **dup2**.\n\n    input = open(line->redirect_input, O_RDONLY);\n\n    output = open(line->redirect_output, O_WRONLY | O_CREAT | O_TRUNC, DEFAULT_FILE_CREATE_MODE);\n\n### Comandos encadenados\n\nTambién tenemos la necesidad de realizar varios comandos a la vez y comunicando unos con otraos. Con la llamada **pipe** creamos una tubería que sirve luego en establecer la comunicación entre procesos, y con la llamada **dup2** redireccionamos la salida del comando anterior a la entrada de tubería y desde la salida de la tubería a la entrada estandar para el siguiente comando.\n\n    pipe(pipeline);\n\n    dup2(pipeline[0], STDIN_FILENO);\n    execvp(command->argv[0], command->argv);\n\nY para el siguiente comando cogemos el flujo de entrada y crear otra tubería para si tenemos más comando. Todos estos se puede meter dentro un **for** que iteramos para crear la comunicación entre ellos.\n\n    for (i = 0; i < line->ncommands; i++) {\n        pipe(pipeline)\n        output = pipeline[1];\n        \n        /* ejecutar el comando */\n        execute(&(line->commands[i]), input, output);\n\n        input = pipeline[0];\n    }\n\nEso sería la idea inicial de la secuencia de operaciones que hay que hacer, en la implemención real habría que tener en cuenta más cosa, pj. los redireccionamientos.\n\n### Background\n\nTenemos también la necesidad de distinguir entre los procesos background y los procesos foreground. Lo que hacemos es asginar un id de grupo a los commandos de la misma linea con la función **setpgid**. Y llamamos a **tcsetpgrp** con el valor de grupo si debe ejecutar en el foreground y al terminar volvemos a llamar **tcsetpgrp** y ponemos el shell en foreground. Este procemiento es la forma más estandar de hacer y evitar problema de interferencia con el shell y otros procesos. Evitamos la situación de proceso zombie y también nos permite separar la señal que se envia.\n\n### Debug\n\nPara mejorar la experiencia de la depuración hemos usado el Macro **#ifndef DEBUG**. Siendo la difultad que depurar en el contexto de multiproceso y la posible inferencia entre ellos. Hemos puesto sentencia\n\n    **fprintf(stderr, mensaje de seguimiento);**\n\nCon eso conseguimos tener presente las ultimas operaciones que ha tomado nuestro minishell.\n\nSobre todo nos ayudaría mucho si podemos conseguir obtener el estado de proceso. Hemos creado uana función **debug_wait** que delega la llamada a waitpid pero podemos imprimir informaciones necesarios que queremeos.\n\n### Comando interno\n\n#### cd\n\nAparte de ejecutar los archivos binarios que hay en el sistema. Shell tiene una serie de estado perdeneciente a shell asimismo una serie comando para poder modificar cuyos estados, se conoce como comando interno. **cd** es uno de ello que modifica la ruta actual del programa. **chdir** es una interfaz proporcionada por sistema que permite cumplir dicho deber.\n\n    chdir(line->commands[0].argv[1]);\n\nSi el usuario no especifica con los parametros usamos la variable HOME como directorio de llegada.\n\n    chdir(getenv(\"HOME\"));\n\n#### jobs\n\nAcerca de la gestión de proceso background y foreground. Tenemos que ser capaz de mostrar por pantalla lista de tareas que se está ejecutando en el backgrounp y también.\n\nTenemos definido **struct JobInfo** previamente mencionado, que es una linkedlist que sirve para guardar la lista de procesos que están en ejecución. Cada vez que ejecutamos una línea de comando almacenmos también su informaciones relativas en la lista.\n\n    insert_job(&job_list, new_job(current, strdup(command)));\n\nAl recibir el comando **jobs** lo que hacemos es recorrer la lista siguiendo el puntero de next hasta que acabe la lista.\n\n    current = job_list;\n    while (current != NULL) {\n        print_job(current, i);\n        current = current->next;;\n    }\n\n#### fg\n\nCuando el usuario necesitará traer un proceso en background ejecutará **fg** + **id**. El id sería el numero de aparece cuando muestra con jobs.\n\n    if (current != NULL && current->id == id) {\n        pgid = current->pgid;\n        tcsetpgrp(STDIN_FILENO, pgid);\n        debug_wait(pgid, 0);\n        tcsetpgrp(STDIN_FILENO, shell_pgid);\n    }\n\nPor brevedad no hemos concluido cómo gestionamos la memoria dinámica del shell. Basicamente lo que hacemos es cuando un proceso pasa a foreground o bién que ha terminado libreramos la memeria asosiada a él.\n\n#### Gestión de señal\n\nEl shell es capaz de ejecutar más de un comando en el background. El shell mismo no debe morir ni los procesos background ni el shell. Tenemos que ignoramos tanto SIGINT como SIGQUIT. Lo conseguiremos con **signal**.\n\n    signal(SIGINT, SIG_IGN);\n    signal(SIGQUIT, SIG_IGN);\n\nHemos puesto ese en la inicialización de shell.\n\n#### Más detalle\n\nAquí arriba solo hemos comentado las ideas y la implementación basica de cómo va cada cosa. La gestión real también tenemos que tratar a los posibles errores que sucede mientras ejecutamos la función, la gestión de memoria dinámica, y el control sobre las señales, etc...\n\n## Conclusión\n\nEste trabajo centramos prinpicalmente en el tema de proceso y mecanismo de gestión entre ellos. El problema principal que tuvimos fue gestión la tubería que olvidemos cerrar la tubería en el proceso padre. Que muchas veces no sabemos qué está ocurriendo siendo la dificultad de la depuración es muy alta.",
        "slug": "minishell",
        "date": "2018-12-03 18:05:41",
        "lang": "es",
        "tags": ["Linux", "Shell", "Bash", "Process"],
        "path": "/minishell/index.html"
      },
      {
        "title": "Gestión de procesos en Linux",
        "markdownContentSource": "\n# ¿Qué es un proceso?\n\nUn proceso es una abstracción de una programa en ejecucion. Y un programa es un conjunto de código maquina y dato almacenado en una imagen de ejecutable. Los procesos son tareas separadas, cada uno ejecuta en su propio espacio de direcciones virtuales y no es capaz de interactuar con otro, excepto mediante mecanismos admnistrados por el kernel. Esto hace que si un proceso cae no afectará a otros procesos del sistema. \n\n## Concurrencia\n\nEl sistema operativo proporciona la illusion al programa que es el único que se ejecuta en el sistema. El programa aparenta tener un uso exclusivo de procesador, la memoria principal y los dispositivos de E/S. Multiples procesos están permitido ejecutar concurrentemente en el mismo sistema, y cada uno tiene su uso exclusivo de hardware. El sistema operativo mantiene todas las informaciones asociadas a proceso. Además de los códigos, también incluye una serie de recursos relacionados llamado contexto: \n\n* archivos abiertos\n* señales pendientes\n* datos de kernel\n* estado de proceso\n* mapa de memoria\n* hilos de ejecución\n* sección de variables globales\n* Pueden haber varias replicas de un mismo programa en ejecución.\n* Pueden existir dos o más procesos compartiendo varios recursos, como archivos abiertos o un espacio de memoria.\n\n## Cambio de contexto\n\nCuando el sistema operativo decide transferir el control desde el proceso actual a alguuno otro, se realiza un *cambio de contexto*, que guarda el contexto del proceso actual y recupera el contexto del nuevo proceso. El nuevo proceso sigue ejecutando exactamente donde lo dejó.\n![Context Switch](context_switch.png)\n\n## Hilos\n\nLos hilos también llamado **threads**, su nombre english, son objectos de actividades del proceso. Cada uno ejecutando en el contexto de proceso y compartiendo el mismo código y dato global. Multi-theading es una forma de hacer los programas ejecuten más rapidos cuando tenemos multi-cores.\n\nCada thread incluye:\n\n* un contador de programa\n* pila de proceso\n* conjunto de registros de procesador\n\n# Proceso en Linux\n\n## Estado del proceso\n\n![estado del proceso](process_state.png)\n**Ejecucion**:\n    El proceso que toma el control de sistema, CPU, y los hardwares.\n**Preparado**\n    Está en la cola de espera que le asignen el control\n**Bloquedo**\n    El proceso espera un evento o un recurso.\n**Terminado**\n    El proceso que ha terminado, normalmente al recibir una señal.\n**Zombie**\n    Un proceso muerto que aún no ha elimado del vector.\n\n## Estructura de dato\n\nEn Linux cada proceso está representada por [task_struct](https://github.com/torvalds/linux/blob/master/include/linux/sched.h). El numero de máximo de procesos en el sistema está limitado por el tamaño de vector de tarea de 512 entradas. A medida que crea nuevo proceso se agrega al vector de tareas.\nTODO: La estrucura que modela \n\n### Identificador\n\nTodo proceso en el sistema tiene un identificador de proceso **pid_t pid**. También tiene identificadores de usuario y de grupo **const struct cred __rcu *[cred](https://github.com/torvalds/linux/blob/master/include/linux/cred.h)** que se usa para controlar el acceso a los archivos y dispositivos en el sistema.\n\n### Relación\n\nEn Linux no hay proceso independiente de otro. En task_struct matiene una referencia a proceso padre **struct task_struct __rcu\t*parent**, excepto para el proceso inicial que no tiene proceso padre. Nuevos procesos no son creaddos, sino son copiado. Cada proceseo mantiene \n\n### Comunicación interproceso\n\nTODO: [Inter-Process Communication](https://www.tldp.org/LDP/tlk/kernel/processes.html)\n\n### Temporizador\n\nEl kernel realiza un seguimiento de tiempo de creación **struct task_cputime cputime_expires**, tiempo en modo kernel, tiempo en modo usuario, **[task_cputime](https://elixir.bootlin.com/linux/latest/ident/task_cputime)**. También es posible que un proceso especifica un temporizador que al expirarse envia una señal al proceso.\n\n### Sistema de archivo\n\nProceso puede abrir y cerrar archivos cuando quiera y el proceso mantiene los punteros **[struct files_struct *files](https://elixir.bootlin.com/linux/latest/ident/files_struct)** a cada uno de los archivos abierto, así como punteros a dos inodos VFS. Cada inodo VFS describe de forma única un archivo o directorio dentro de un sistema de archivos también proporciona una interfaz uniforme a los sistemas de archivos subyacentes. El primero es la raiz del process, su directory home, el segundo es el directorio actual del proceso.\n\n## Memoria virtual\n\nTODO\n\n## Contexto de procesador\n\nTODO\n\n## Gestión de proceso\n\nEn linux, la llamada de sistema [fork()](https://github.com/torvalds/linux/blob/master/kernel/fork.c) definido con el macro **SYSCALL_DEFINE0(fork)**, create un nuevo proceso duplicando uno existente.\n\n* El proceso que llama fork() es el padre, mientras que el nuevo proceso es el hijo.\n* El padre continua la ejecución y el hijo continua la ejecucion en el mismo punto donde la llamada a fork() devuelve.\n* La llamada de sistema fork() devuelve del kernel dos veces, uno en el proceso padre y otra vez en el hijo recién creado.\n\n\nTODO: bibliografia\n\n# Bibliografía\n\n* [Process Management - Shichao's Notes](https://notes.shichao.io/lkd/ch3/)\n* [Computer Systems: A Programmer's Perspective](https://www.amazon.com/Computer-Systems-Programmers-Perspective-3rd/dp/013409266X) pag. 16-17, 712-771\n* [Chapter 4 Process - The Linux Documentation Project](https://www.tldp.org/LDP/tlk/kernel/processes.html)\n* [The GNU C Library](https://www.gnu.org/software/libc/manual/html_node/Processes.html#Processes)\n",
        "slug": "Gestion-De-Procesos",
        "date": "2018-11-26 18:20:30",
        "lang": "es",
        "tags": ["Linux Process Abstraction", "Linux Kernel"],
        "path": "/Gestion-De-Procesos/index.html"
      }
    ],
    "_nextI18Next": {
      "initialI18nStore": {
        "es": {
          "common": { "Next": "Siguiente" },
          "navbar": {
            "Home": "Inicio",
            "Language": "Lenguaje",
            "Tags": "Tags",
            "en": "Inglés",
            "es": "Español",
            "zh": "Chino"
          }
        },
        "en": {
          "common": { "Next": "Next" },
          "navbar": {
            "Home": "Home",
            "Language": "Language",
            "Tags": "Tags",
            "en": "English",
            "es": "Spanish",
            "zh": "Chinese"
          }
        }
      },
      "initialLocale": "es",
      "ns": ["common", "navbar"],
      "userConfig": {
        "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] },
        "default": {
          "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] }
        }
      }
    }
  },
  "__N_SSG": true
}
