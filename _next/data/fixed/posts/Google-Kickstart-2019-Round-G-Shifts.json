{
  "pageProps": {
    "postData": {
      "title": "Google Kickstart 2019 Round G Shifts",
      "markdownContentSource": "\n# [Google Kickstart 2019 Round G Shifts](https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050e02/000000000018fd5e)\n\nWe need to calculate the number of valid combinations that makes two guards happy. I first tried backtracking but it will have TL problem. In each node, we have three options, so in fact, we will have $3^{20}$ in the hidden set. We need to discard as many options as early as possible. As the max n is 20 less the 32 we can use bit representation for each combination. We first calculate valid **a** and **b** guard's permutations separately.  For each valid b guard's permutation, we find also the number of permutation that can convert to that permutation flipping some zero bit to one. And then for each valid, a guard permutation finds the corresponding b guard's permutation.\n\nPay attention that the sum of happiness may exceed 32 bit.\n\n[Solution](https://github.com/vitaminac/code/blob/master/competition/kickstart/kickstart2019RoundG_Shifts.cpp)\n",
      "slug": "Google-Kickstart-2019-Round-G-Shifts",
      "date": "2019-11-03 01:47:31",
      "lang": "en",
      "tags": ["algorithms"],
      "path": "/Google-Kickstart-2019-Round-G-Shifts/index.html"
    },
    "lang": "en",
    "_nextI18Next": {
      "initialI18nStore": {
        "en": {
          "navbar": {
            "Home": "Home",
            "Language": "Language",
            "Tags": "Tags",
            "en": "English",
            "es": "Spanish",
            "zh": "Chinese"
          },
          "post-layout": { "Author": "Author: {{author}}", "Tags": "Tags" }
        }
      },
      "initialLocale": "en",
      "ns": ["navbar", "post-layout"],
      "userConfig": {
        "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] },
        "default": {
          "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] }
        }
      }
    }
  },
  "__N_SSG": true
}
