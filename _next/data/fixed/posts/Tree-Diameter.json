{
  "pageProps": {
    "postData": {
      "title": "Tree Diameter",
      "markdownContentSource": "\n## Definition\n\nThe diameter of a tree is the distance of the longest path between two end nodes $\\arg\\max_{(u, v) \\in G}d(u, v)$, where $d(u, v)$ is the distance function. It has many applications on tree problems and often a high complexity solution can be changed to a linear solution with the property of the tree diameter.\n\n## Finding The Diameter of N-Ary Tree\n\n### Greedy Algorithm\n\n1. Run **BFS** to find the farthest node **u** starting from an arbitrary node said **s**\n2. Then run **BFS** from **u** to find the farthest node **v**\n3. Distance between node **u** and **v** is the diameter of given tree\n\n### Implementation\n\n[PT07Z](https://github.com/vitaminac/code/blob/main/judge/src/main/java/spoj/PT07ZLongestPathInATree.java)\n\n[P1985CowMarathon](https://github.com/vitaminac/code/blob/main/judge/src/main/java/poj/P1985CowMarathon.java)\n\n## Proof\n\n### Properties of Trees\n\n1. Between any 2 nodes in a tree there is exactly one path\n2. Any node can serve as the root of the tree\n\n### Proof by Contradiction\n\n1. Assuming one end of the diameter **u** is known, the other end must be the node **v** furthest from this end. We can find it by using **BFS**, the last discovered node is **v**. \n2. Why we run **BFS** on an arbitrary node **s** will alway end with **u**?\n   1. Let **u** and **v** be any two nodes such that **d(u, v)** is the diameter of the tree. There is a unique path from **u** to **v** because of tree properties.\n   2. Assuming we start at node **s**.\n      1. If **s** is **u**, then we will always end with **v** by the first **BFS**, and the second **BFS** we get **u** again.\n      2. If **s** is not **u** and we end with a node **x** distinct than **u** and **v** using **BFS**.\n         1. If the path of **(x, u)** does not intersect with the path of **(u, v)**, the **d(x, u) + d(u, v) > d(u, v)**, contradiction.\n         2. If the path of **(x, u)** intersect with **(u, v)** at **y**, then **d(x, y) > d(u, y)** since we know when we started the search from **s**, **x** is deeper than **u**, then **d(x, y) + d(y, v) > dis(u, v)**. contradiction.\n\n## Reference\n\n* [MIT - Introduction to Algorithms: Problem Set 9 Solutions](http://courses.csail.mit.edu/6.046/fall01/handouts/ps9sol.pdf)\n* [Algorithm to find diameter of a tree using BFS/DFS](https://cs.stackexchange.com/questions/22855/algorithm-to-find-diameter-of-a-tree-using-bfs-dfs-why-does-it-work)\n* [树的直径及其性质与证明](https://www.cnblogs.com/Khada-Jhin/p/10195287.html)\n* [SPOJ PT07Z - Longest path in a tree](https://www.spoj.com/problems/PT07Z/)\n* [POJ Cow Marathon](http://poj.org/problem?id=1985)\n* [Diameter of a Binary Tree](https://www.geeksforgeeks.org/diameter-of-a-binary-tree/)\n* [Tree](https://en.wikipedia.org/wiki/Tree_(graph_theory))\n",
      "slug": "Tree-Diameter",
      "date": "2020-03-07 10:00:44",
      "lang": "en",
      "tags": ["algorithms"],
      "path": "/Tree-Diameter/index.html"
    },
    "lang": "en",
    "_nextI18Next": {
      "initialI18nStore": {
        "en": {
          "common": { "Next": "Next" },
          "feature-tags": {},
          "navbar": {
            "Home": "Home",
            "Language": "Language",
            "Tags": "Tags",
            "en": "English",
            "es": "Spanish",
            "zh": "Chinese"
          },
          "post-layout": { "Author": "Author: {{author}}", "Tags": "Tags" }
        }
      },
      "initialLocale": "en",
      "ns": ["common", "feature-tags", "navbar", "post-layout"],
      "userConfig": {
        "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] },
        "default": {
          "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] }
        }
      }
    }
  },
  "__N_SSG": true
}
