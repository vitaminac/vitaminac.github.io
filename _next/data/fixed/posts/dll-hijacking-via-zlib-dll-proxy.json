{
  "pageProps": {
    "postData": {
      "title": "DLL Hijacking via zlib DLL Proxy",
      "markdownContentSource": "\nDLL hijacking involves manipulating a program to load a DLL that contains the desired code. We will use a simple technique here for ilustration: DLL replacement. We will build a DLL that perserve the same functionlity and interface of original DLL. So we can swap the original DLL with a the one built by us that contains additional code.\n\nAssuming the vulnerable program has dependency on `zlib1.dll`, which is the open source library. We can first check the version from file properties and download the corresponding version of source code for example [zlib v1.2.1](https://github.com/madler/zlib/tree/v1.2.1).\n\nExecute `cd` into source source folder and then execute `nmake -f win32/Makefile.msc`, we will obtain [zlib.lib](/downloads/code/dll-hijacking/zlib.lib), [zlib1.res](/downloads/code/dll-hijacking/zlib1.res). We can now build our `zlib1.dll`. Put our source code [zlib1.c](/downloads/code/dll-hijacking/zlib1.c) with additional instantiation logic and copy `zlib.lib`, `zlib1.res`, [zlib.def](https://github.com/madler/zlib/blob/v1.2.1/win32/zlib.def) into the same folder and then execute following commands\n\n    cl /c /nologo /O2 /MD /utf-8 zlib1.c\n    link /NOLOGO /RELEASE /DEF:zlib.def /DLL /IMPLIB:zdll.lib /OUT:zlib1.dll zlib1.obj zlib.lib zlib1.res User32.lib Gdi32.lib\n\nIn case we don't have module-definition or `.def` file then we will need to modify the source code of our proxy DLL `zlib1.c`. We need to first execute `dumpbin /EXPORTS zlib1.dll` so we will obtain the export table of original `zlib1.dll`. The output should be something similar to following:\n\n          1    0 00001000 adler32\n          2    1 000011E0 compress\n          3    2 00001130 compress2\n          4    3 00001200 compressBound\n          5    4 00001510 crc32\n          6    5 00001760 deflate\n          7    6 00001680 deflateBound\n          8    7 00001C60 deflateCopy\n          9    8 00001BA0 deflateEnd\n         10    9 00003050 deflateInit2_\n         11    A 00003280 deflateInit_\n         12    B 00002CC0 deflateParams\n         13    C 00001640 deflatePrime\n         14    D 00002C20 deflateReset\n         15    E 00001530 deflateSetDictionary\n         16    F 00001220 get_crc_table\n         17   10 00003B20 gzclearerr\n         18   11 000039D0 gzclose\n         19   12 00003DC0 gzdopen\n         20   13 00003930 gzeof\n         21   14 00003A20 gzerror\n         22   15 00003880 gzflush\n         23   16 000040B0 gzgetc\n         24   17 000040E0 gzgets\n         25   18 00003DA0 gzopen\n         26   19 000036C0 gzprintf\n         27   1A 00003740 gzputc\n         28   1B 00003770 gzputs\n         29   1C 00003E00 gzread\n         30   1D 000038C0 gzrewind\n         31   1E 00004140 gzseek\n         32   1F 000032B0 gzsetparams\n         33   20 000042E0 gztell\n         34   21 000035A0 gzungetc\n         35   22 000035F0 gzwrite\n         36   23 00005950 inflate\n         37   24 000043C0 inflateBack\n         38   25 00005240 inflateBackEnd\n         39   26 00004300 inflateBackInit_\n         40   27 00007060 inflateCopy\n         41   28 00006DB0 inflateEnd\n         42   29 00005740 inflateInit2_\n         43   2A 00005810 inflateInit_\n         44   2B 000056F0 inflateReset\n         45   2C 00006E00 inflateSetDictionary\n         46   2D 00006F30 inflateSync\n         47   2E 00007030 inflateSyncPoint\n         48   2F 00009050 uncompress\n         49   30 00009120 zError\n         50   31 00009110 zlibCompileFlags\n         51   32 00009100 zlibVersion\n\nfor every export attribute we will need a add a line to our `zlib1.c`\n\n    #pragma comment(linker, \"/export:_<export attribute>\")\n\nfor example\n\n    #pragma comment(linker, \"/export:_zlibVersion\")\n\nWe place generated `zlib1.dll` into program directory and replace the original one, our logic will be executed when program try to load `zlib1.dll`.\n\nAlternatively for any other DLL even it is not open source, we can build a proxy DLL that redirect all the calls to original DLL file. There are automatic tool for generating the proxy DLL.\n\n### Reference\n\n* [API Interception via DLL Redirection](https://www.exploit-db.com/docs/english/13140-api-interception-via-dll-redirection.pdf)\n* [HackTricks: Dll Hijacking](https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking#dll-proxifying)\n* [Can we export a function made available through a static library](https://stackoverflow.com/a/45744068/9980245)\n* [creating dll with cl and linker](https://social.msdn.microsoft.com/Forums/vstudio/en-US/840b6359-c3aa-44b8-b3ef-50e3556e6430/creating-dll-with-cl-and-linker?forum=vclanguage)\n* [/MD, /MT, /LD (Use Run-Time Library)](https://docs.microsoft.com/en-us/cpp/build/reference/md-mt-ld-use-run-time-library?view=msvc-170)\n* [Compiler options listed alphabetically](https://docs.microsoft.com/en-us/cpp/build/reference/compiler-options-listed-alphabetically?view=msvc-170)\n* [Exporting from a DLL Using DEF Files](https://learn.microsoft.com/en-us/cpp/build/exporting-from-a-dll-using-def-files)\n* [/DEF (Specify Module-Definition File)](https://docs.microsoft.com/en-us/cpp/build/reference/def-specify-module-definition-file?view=msvc-170)\n* [c++ creating a window from a dll](https://sim0n.wordpress.com/2009/03/29/c-creating-a-window-from-a-dll/)\n* [Create your Proxy DLLs automatically](https://www.codeproject.com/Articles/16541/Create-your-Proxy-DLLs-automatically)\n* [ProxiFy - Automatic Proxy DLL Generation](https://www.codeproject.com/Articles/1179147/ProxiFy-Automatic-Proxy-DLL-Generation)\n* [SharpDllProxy](https://github.com/Flangvik/SharpDllProxy)\n* [DLL代理转发](https://www.cnblogs.com/hetianlab/p/14031412.html)",
      "slug": "dll-hijacking-via-zlib-dll-proxy",
      "date": "2024-07-21 11:59:24",
      "lang": "en",
      "tags": ["dll injection", "dll hijacking", "zlib", "外挂"],
      "path": "/dll-hijacking-via-zlib-dll-proxy/index.html"
    },
    "lang": "en",
    "_nextI18Next": {
      "initialI18nStore": {
        "en": {
          "common": { "Next": "Next" },
          "feature-tags": { "Tags": "Tags" },
          "navbar": {
            "Home": "Home",
            "Language": "Language",
            "Tags": "Tags",
            "en": "English",
            "es": "Spanish",
            "zh": "Chinese"
          },
          "post-layout": { "Author": "Author: {{author}}" }
        }
      },
      "initialLocale": "en",
      "ns": ["common", "feature-tags", "navbar", "post-layout"],
      "userConfig": {
        "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] },
        "default": {
          "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] }
        }
      }
    }
  },
  "__N_SSG": true
}
