{
  "pageProps": {
    "postData": {
      "title": "Angular SPA",
      "markdownContentSource": "\n# Angular\n\n## Introducción a Angular\n\nAngular es un framework para desarrollo SPA, permite extender el HTML con etiquetas propias.\n\n## Angular-CLI\n\n![Angular CLI](angular-cli.PNG)\n\n## Proyecto\n\n![Angular Project Folder](project-folder.PNG)\n\n* src: Fuentes de la aplicación\n* node_modules: Librerías y herramientas descargadas\n* e2e: Testing end to end\n* package.json: Configuración de librerías y herramientas\n* angular-cli.json: Configuración de angular-cli\n\n![Angular Project File](project-file.PNG)\n\n* app: Carpeta que contiene los ficheros fuente principales de la aplicación.\n* Borraremos su contenido y le sustituiremos por los ejemplos\n* assets: Ficheros que se incluyen en el bundle cuando la aplicación se empaqueta para producción\n* main.ts: Fichero principal de la aplicación. No es necesario modificarle\n* favicon.ico: Icono de la aplicación\n* index.html: Página principal. No es necesario modificarle\n* styles.css: Estilos globales de la app\n* tsconfig.json: Configuración del compilador TS\n\n# [TypeScript](https://www.typescriptlang.org/)\n\nJavaScript ES6 con tipos opcionales que pueden avisar de\npotenciales problemas.\n\n# Componentes\n\n* Un componente es una nueva etiqueta HTML con una vista y una lógica definidas por el desarrollador.\n* La vista es una plantilla (template) en HTML con elementos especiales.\n* La lógica es una clase TypeScript vinculada a la vista.\n\n![Componente](componente.PNG)\n\n![Import](import.PNG)\n\nLa vista del componente (HTML) se genera en función de su estado (atributos de la clase).\n\n## Recursos de la app\n\nLos recursos (imágenes, fonts..) deben colocarse en una carpeta src/assets para que estén accesibles en desarrollo y cuando se genera el paquete de producción.\n\n## Ejecución de lógica\n\nSe puede ejecutar un método ante un evento producido en la vista del componente.\n\n![Event](event.PNG)\n\n## Sintaxis de los templates\n\n![Template Sintaxis](template-sintaxis.PNG)\n\n## Data Binding\n\n![Data Binding](data-binding.PNG)\n\n## Templates\n\nLos templates permiten definir la vista en función de la información del componente.\n\n* Visualización condicional\n* Repetición de elementos\n* Safe navigation operator\n* Estilos\n* Formularios\n\n### Visualización condicional\n\n        <p *ngIf=\"visible\">Text</p>\n\n### Repetición de elementos\n\n        <div *ngFor=\"let elem of elems\">{{elem.desc}} </div>\n\n### Directivas\n\nLas directivas modifican a los elementos en los que se incluyen.\n\nExisten muchas directivas predefinidas y podemos\nprogramar nuestras propias directivas.\n\nLas directivas estructurales empiezan por * y modifican el DOM del documento (*ngIf, *ngFor, *ngSwitch).\n\nNo se pueden incluir dos directivas estructurales (de tipo *) en el mismo elemento.\n\n### Safe Navigation Operator\n\nPara evitarlo existe el safe navigator operator. Undefined se representa como cadena vacía\n\n        User’s name: {{user?.name}}\n\n## Estilos CSS\n\n### Globalmente asociado al index.html\n\nSi creamos un fichero src/styles.css se incluirá de forma automática en el index.html.\n\n### Definir CSS en Componente\n\nEn la propiedad styles o styleUrls de @Component\n\n![CSS de componente](componente-css.PNG)\n\n### Asociar la clase de un elemento a un atributo string\n\n        <h1 [class]=\"className\">Title!</h1>\n\n### Activar una clase concreta con un atributo boolean\n\n        <h1 [class.red]=\"redActive\">Title!</h1>\n\n### Asociar la clase de un elemento a un mapa\n\n        <p [ngClass]=\"pClasses\">Text</p>\n\n#### Asociar un estilo concreto a un atributo\n\n        <p [style.backgroundColor]=\"pColor\">Text</p>\n\n#### Asociar un estilo concreto a un atributo\n\n        <p [ngStyle]=\"getStyles()\">Text</p>\n\n## Formularios\n\n* Vincular un control del formulario a un atributo del componente\n* Acceso a los controles desde el código para leer y modificar su estado\n* Mecanismos avanzados con validación con ngControl\n\n### Data binding en campo de texto\n\n### Data binding en campo de texto\n\n* Se vincula el control a un atributo del componente\ncon **[(ngModel)]**\n* Cualquier cambio en el control se refleja en el valor del atributo\n\n        <input type=\"text\" [(ngModel)]=\"name\">\n\n### Data binding en checkbox\n\nCada control se asocia con [(ngModel)] a un atributo booleano y su valor depende de si está “checked”\n\n        <input type=\"checkbox\" [(ngModel)]=\"booleano\"/>\n\n### Data binding en botones de radio\n\nTodos los botones del mismo grupo se asocian al mismo atributo con [(ngModel)]\n\n        <input type=\"radio\" name=\"gender\" [(ngModel)]=\"gender\" value=\"Male\">\n\n### Acceso a los controles desde el código\n\nUn elemento del template puede asociarse a una variable: **Template reference variables**.\n\nPodemos usar esa variable en el código del template para manejar ese elemento.\n\n        #templateVar\n\nTambién podemos acceder al elemento desde el código del componente. Creamos un atributo en el componente de tipo **ElementRef**. Anotamos ese atributo con **@ViewChild(‘refName’)**.\n\n![Element Reference](elementRef.PNG)\n\n## Composición de componentes\n\n![Component Tree](component-tree.PNG)\n\nAl cargar la app en el navegador, en el árbol DOM cada componente incluye en su elemento el contenido de la vista.\n\n### Comunicación entre un componente padre y un componente hijo\n\n#### Configuración de propiedades (Padre Hijo)\n\n##### Vista\n\n        <header [title]='appTitle'></header>\n\n##### Controlador\n\n        export class HeaderComponent {\n            @Input()\n            private title: string;\n        }\n\n#### Envío de eventos (Hijo Padre)\n\n##### Vista\n\n        <header (hidden)='hiddenTitle($event)'></header>\n\n##### Controlador\n\n        export class HeaderComponent {\n            @Output()\n            hidden = new EventEmitter<boolean>();\n            visible = true;\n            click(){\n            this.visible = !this.visible;\n            this.hidden.next(this.visible);\n            }\n        }\n\n##### Invocación de métodos (Padre Hijo)\n##### Compartiendo el mismo servicio (Padre Hijo)\n\n## Servicios\n\nAcoplar en el componente la lógica de las peticiones http no es una buena práctica. El componente podría llegar a ser muy complejo y difícil de ampliar / modificar. Es mucho más difícil implementar tests unitarios si el componente tiene muchas responsabilidades. Es mucho mejor modularizar la aplicación en elementos que tengan una única responsabilidad.\n\nA los elementos de la aplicación que no se encargan del interfaz de usuario se les conoce como servicios. Angular 2 ofrece muchos servicios predefinidos. El objeto http se considera un servicio de acceso a APIs REST, pero existen más. El desarrollador puede implementar sus propios servicios en la aplicación.\n\n### ¿Cómo se implementa un servicio?\n\n* Se crea una nueva clase para el servicio\n* Se anota esa clase con **@Inyectable**\n* Se indica esa clase en la lista de providers del **NgModule**\n* Se pone como **parámetro en el constructor** del componente que usa el servicio\n\n        @Injectable()\n        export class BooksService {\n            getBooks(title: string){\n                return [\n                    'Aprende Java en 2 días', \n                    'Java para torpes', \n                    'Java para expertos'\n                ];\n            }\n        }\n\n## Inyección de dependencias\n\nEs la técnica de solicitar dependencias que sean inyectadas por el framework se denomina inyección de dependencias.\n\n    @Component({\n    selector: 'app­root',\n    templateUrl: './app.component.html'\n    })\n    export class AppComponent {\n        private books: string[] = [];\n        constructor(private booksService: BooksService){}\n        search(title: string){\n            this.books = this.booksService.getBooks(title);\n        }\n    }\n\nEs habitual que haya un único objeto de cada servicio en la aplicación.\n\n## Router\n\nLas webs SPA (single page application) pueden tener varias pantallas simulando la navegación por diferentes páginas.\n\nEn app.routing.ts se define qué componente se muestra para cada URL.\n\nEl componente principal de la aplicación (app-root) tiene una parte fija (cabecera, footer) y una parte cuyo contenido depende de la URL (<router­outlet>).\n\nExisten links especiales para navegar dentro de la aplicación web ([routerLink]).\n\n        @Component({\n        selector: 'app­root',\n        template: `\n            <h1 class=\"title\">Library</h1>\n            <router­outlet></router­outlet>\n        `\n        })\n        export class AppComponent { }\n\n### Configuración de las rutas\n\n        const appRoutes = [\n            { path: 'book/:id', component: BookDetailComponent,  },\n            { path: 'books', component: BookListComponent },\n            { path: '', redirectTo: 'books', pathMatch: 'full' }\n        ]\n\n### Parametro de router\n\n![Router Param](router-param.PNG)\n\n### Navegación con router\n\n![Router Navegation](router-navigation.PNG)\n\n## Publicación\n\n        ng build --target=production --environment=prod",
      "slug": "Angular-SPA",
      "date": "2019-05-03 13:28:22",
      "lang": "es",
      "tags": ["SPA", "Angular", "Aplicación Web"],
      "path": "/Angular-SPA/index.html"
    },
    "lang": "es",
    "_nextI18Next": {
      "initialI18nStore": {
        "es": {
          "common": { "Next": "Siguiente" },
          "feature-tags": { "Tags": "Tags" },
          "navbar": {
            "Home": "Inicio",
            "Language": "Lenguaje",
            "Tags": "Tags",
            "en": "Inglés",
            "es": "Español",
            "zh": "Chino"
          },
          "post-layout": { "Author": "Autor: {{author}}" }
        },
        "en": {
          "common": { "Next": "Next" },
          "feature-tags": { "Tags": "Tags" },
          "navbar": {
            "Home": "Home",
            "Language": "Language",
            "Tags": "Tags",
            "en": "English",
            "es": "Spanish",
            "zh": "Chinese"
          },
          "post-layout": { "Author": "Author: {{author}}" }
        }
      },
      "initialLocale": "es",
      "ns": ["common", "feature-tags", "navbar", "post-layout"],
      "userConfig": {
        "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] },
        "default": {
          "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] }
        }
      }
    }
  },
  "__N_SSG": true
}
