{
  "pageProps": {
    "postData": {
      "title": "Gestión de procesos en Linux",
      "markdownContentSource": "\n# ¿Qué es un proceso?\n\nUn proceso es una abstracción de una programa en ejecucion. Y un programa es un conjunto de código maquina y dato almacenado en una imagen de ejecutable. Los procesos son tareas separadas, cada uno ejecuta en su propio espacio de direcciones virtuales y no es capaz de interactuar con otro, excepto mediante mecanismos admnistrados por el kernel. Esto hace que si un proceso cae no afectará a otros procesos del sistema. \n\n## Concurrencia\n\nEl sistema operativo proporciona la illusion al programa que es el único que se ejecuta en el sistema. El programa aparenta tener un uso exclusivo de procesador, la memoria principal y los dispositivos de E/S. Multiples procesos están permitido ejecutar concurrentemente en el mismo sistema, y cada uno tiene su uso exclusivo de hardware. El sistema operativo mantiene todas las informaciones asociadas a proceso. Además de los códigos, también incluye una serie de recursos relacionados llamado contexto: \n\n* archivos abiertos\n* señales pendientes\n* datos de kernel\n* estado de proceso\n* mapa de memoria\n* hilos de ejecución\n* sección de variables globales\n* Pueden haber varias replicas de un mismo programa en ejecución.\n* Pueden existir dos o más procesos compartiendo varios recursos, como archivos abiertos o un espacio de memoria.\n\n## Cambio de contexto\n\nCuando el sistema operativo decide transferir el control desde el proceso actual a alguuno otro, se realiza un *cambio de contexto*, que guarda el contexto del proceso actual y recupera el contexto del nuevo proceso. El nuevo proceso sigue ejecutando exactamente donde lo dejó.\n![Context Switch](context_switch.png)\n\n## Hilos\n\nLos hilos también llamado **threads**, su nombre english, son objectos de actividades del proceso. Cada uno ejecutando en el contexto de proceso y compartiendo el mismo código y dato global. Multi-theading es una forma de hacer los programas ejecuten más rapidos cuando tenemos multi-cores.\n\nCada thread incluye:\n\n* un contador de programa\n* pila de proceso\n* conjunto de registros de procesador\n\n# Proceso en Linux\n\n## Estado del proceso\n\n![estado del proceso](process_state.png)\n**Ejecucion**:\n    El proceso que toma el control de sistema, CPU, y los hardwares.\n**Preparado**\n    Está en la cola de espera que le asignen el control\n**Bloquedo**\n    El proceso espera un evento o un recurso.\n**Terminado**\n    El proceso que ha terminado, normalmente al recibir una señal.\n**Zombie**\n    Un proceso muerto que aún no ha elimado del vector.\n\n## Estructura de dato\n\nEn Linux cada proceso está representada por [task_struct](https://github.com/torvalds/linux/blob/master/include/linux/sched.h). El numero de máximo de procesos en el sistema está limitado por el tamaño de vector de tarea de 512 entradas. A medida que crea nuevo proceso se agrega al vector de tareas.\nTODO: La estrucura que modela \n\n### Identificador\n\nTodo proceso en el sistema tiene un identificador de proceso **pid_t pid**. También tiene identificadores de usuario y de grupo **const struct cred __rcu *[cred](https://github.com/torvalds/linux/blob/master/include/linux/cred.h)** que se usa para controlar el acceso a los archivos y dispositivos en el sistema.\n\n### Relación\n\nEn Linux no hay proceso independiente de otro. En task_struct matiene una referencia a proceso padre **struct task_struct __rcu\t*parent**, excepto para el proceso inicial que no tiene proceso padre. Nuevos procesos no son creaddos, sino son copiado. Cada proceseo mantiene \n\n### Comunicación interproceso\n\nTODO: [Inter-Process Communication](https://www.tldp.org/LDP/tlk/kernel/processes.html)\n\n### Temporizador\n\nEl kernel realiza un seguimiento de tiempo de creación **struct task_cputime cputime_expires**, tiempo en modo kernel, tiempo en modo usuario, **[task_cputime](https://elixir.bootlin.com/linux/latest/ident/task_cputime)**. También es posible que un proceso especifica un temporizador que al expirarse envia una señal al proceso.\n\n### Sistema de archivo\n\nProceso puede abrir y cerrar archivos cuando quiera y el proceso mantiene los punteros **[struct files_struct *files](https://elixir.bootlin.com/linux/latest/ident/files_struct)** a cada uno de los archivos abierto, así como punteros a dos inodos VFS. Cada inodo VFS describe de forma única un archivo o directorio dentro de un sistema de archivos también proporciona una interfaz uniforme a los sistemas de archivos subyacentes. El primero es la raiz del process, su directory home, el segundo es el directorio actual del proceso.\n\n## Memoria virtual\n\nTODO\n\n## Contexto de procesador\n\nTODO\n\n## Gestión de proceso\n\nEn linux, la llamada de sistema [fork()](https://github.com/torvalds/linux/blob/master/kernel/fork.c) definido con el macro **SYSCALL_DEFINE0(fork)**, create un nuevo proceso duplicando uno existente.\n\n* El proceso que llama fork() es el padre, mientras que el nuevo proceso es el hijo.\n* El padre continua la ejecución y el hijo continua la ejecucion en el mismo punto donde la llamada a fork() devuelve.\n* La llamada de sistema fork() devuelve del kernel dos veces, uno en el proceso padre y otra vez en el hijo recién creado.\n\n\nTODO: bibliografia\n\n# Bibliografía\n\n* [Process Management - Shichao's Notes](https://notes.shichao.io/lkd/ch3/)\n* [Computer Systems: A Programmer's Perspective](https://www.amazon.com/Computer-Systems-Programmers-Perspective-3rd/dp/013409266X) pag. 16-17, 712-771\n* [Chapter 4 Process - The Linux Documentation Project](https://www.tldp.org/LDP/tlk/kernel/processes.html)\n* [The GNU C Library](https://www.gnu.org/software/libc/manual/html_node/Processes.html#Processes)\n",
      "slug": "Gestion-De-Procesos",
      "date": "2018-11-26 18:20:30",
      "lang": "es",
      "tags": ["Linux Process Abstraction", "Linux Kernel"],
      "path": "/Gestion-De-Procesos/index.html"
    },
    "lang": "es",
    "_nextI18Next": {
      "initialI18nStore": {
        "es": {
          "common": { "Next": "Siguiente" },
          "feature-tags": {},
          "navbar": {
            "Home": "Inicio",
            "Language": "Lenguaje",
            "Tags": "Tags",
            "en": "Inglés",
            "es": "Español",
            "zh": "Chino"
          },
          "post-layout": { "Author": "Autor: {{author}}", "Tags": "Tags" }
        },
        "en": {
          "common": { "Next": "Next" },
          "feature-tags": {},
          "navbar": {
            "Home": "Home",
            "Language": "Language",
            "Tags": "Tags",
            "en": "English",
            "es": "Spanish",
            "zh": "Chinese"
          },
          "post-layout": { "Author": "Author: {{author}}", "Tags": "Tags" }
        }
      },
      "initialLocale": "es",
      "ns": ["common", "feature-tags", "navbar", "post-layout"],
      "userConfig": {
        "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] },
        "default": {
          "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] }
        }
      }
    }
  },
  "__N_SSG": true
}
