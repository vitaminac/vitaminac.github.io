{
  "pageProps": {
    "postData": {
      "title": "Google Kickstart 2019 Round G The Equation",
      "markdownContentSource": "\n# [Google Kickstart 2019 Round G The Equation](https://codingcompetitions.withgoogle.com/kickstart/round/0000000000050e02/000000000018fe36)\n\nThe essential of the problem is to find the number $k$ that xor with each $A_i$ gives the largest number. As described in the statement the upper limit is $10^{15}$ which result the highest bit is $log_2{10^{15}} = 50$. We start from the highest bit and try to set 1 at every possible position if it is feasible. But first, we need to process the $A$ to find out the minimum sum of n lowest bits, so that having the bit set to one or zero we know in advance if we will result in an infeasible solution or no. \n\nPay Attention to **1LL << n** and read carefully of each limit, for example: **M < $10^{15}$**.\n\n[Solution](https://github.com/vitaminac/code/blob/master/competition/kickstart/kickstart2019RoundG_The_Equation.cpp)\n",
      "slug": "Google-Kickstart-2019-Round-G-The-Equation",
      "date": "2019-11-02 22:11:00",
      "lang": "en",
      "tags": ["algorithms"],
      "path": "/Google-Kickstart-2019-Round-G-The-Equation/index.html"
    },
    "lang": "en",
    "_nextI18Next": {
      "initialI18nStore": {
        "en": {
          "common": { "Next": "Next" },
          "feature-tags": { "Tags": "Tags" },
          "navbar": {
            "Home": "Home",
            "Language": "Language",
            "Tags": "Tags",
            "en": "English",
            "es": "Spanish",
            "zh": "Chinese"
          },
          "post-layout": { "Author": "Author: {{author}}" }
        }
      },
      "initialLocale": "en",
      "ns": ["common", "feature-tags", "navbar", "post-layout"],
      "userConfig": {
        "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] },
        "default": {
          "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] }
        }
      }
    }
  },
  "__N_SSG": true
}
