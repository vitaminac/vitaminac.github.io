{
  "pageProps": {
    "postData": {
      "slug": "embedded",
      "tags": ["Embedded System", "Real-Time Computation"],
      "isDraft": false,
      "isArchived": true,
      "title": "Embedded System and Real-Time Computation",
      "date": "2020-11-04 12:50:58",
      "isLegacy": false,
      "lang": "en",
      "tocHtml": "<ol>\n<li><a href=\"#Definition\">Definition</a></li>\n<li><a href=\"#Characteristics\">Characteristics</a></li>\n<li><a href=\"#RAMS\">RAMS</a></li>\n<li><a href=\"#Embedded-System-Design\">Embedded System Design</a></li>\n<li><a href=\"#Development\">Development</a></li>\n<li><a href=\"#Real-time-Computing\">Real-time Computing</a>\n<ol>\n<li><a href=\"#Activation\">Activation</a></li>\n<li><a href=\"#Time-to-Response\">Time to Response</a></li>\n<li><a href=\"#Temporal-Requirement\">Temporal Requirement</a></li>\n<li><a href=\"#Temporal-Determinism\">Temporal Determinism</a></li>\n<li><a href=\"#Fault-Tolerance\">Fault Tolerance</a></li>\n</ol>\n</li>\n<li><a href=\"#Software-Hardware-Co-Design\">Software Hardware Co-Design</a></li>\n<li><a href=\"#Simulink\">Simulink</a></li>\n<li><a href=\"#Java-for-Embedded-System\">Java for Embedded System</a></li>\n<li><a href=\"#MMIO-Memory-Mapped-IO\">MMIO (Memory-Mapped I/O)</a></li>\n<li><a href=\"#Reference\">Reference</a></li>\n</ol>",
      "articleHtml": "<h2 id=\"Definition\">Definition<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#Definition\"><i class=\"fa-solid fa-link\"></i></a></h2>\n<p>An embedded system is a computer system is embedded as part of a complete device.</p>\n<h2 id=\"Characteristics\">Characteristics<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#Characteristics\"><i class=\"fa-solid fa-link\"></i></a></h2>\n<ul>\n<li>It has limited resources</li>\n<li>It has peripheral devices that has a dedicated function within a larger mechanical or electrical system.</li>\n<li>It typically interacts, supervises and controls physical operations of the machine that it is embedded within.</li>\n<li>It often has real-time computing constraints<!-- -->\n<ul>\n<li>It must react within a time limit.</li>\n</ul>\n</li>\n<li><a href=\"#Temporal-Determinism\">temporal determinism</a></li>\n</ul>\n<h2 id=\"RAMS\">RAMS<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#RAMS\"><i class=\"fa-solid fa-link\"></i></a></h2>\n<ul>\n<li>Reliability<!-- -->\n<ul>\n<li>MTTF (mean time to failure)</li>\n</ul>\n</li>\n<li>Availability</li>\n<li>Maintainability<!-- -->\n<ul>\n<li>MTTR (mean time to recovery)</li>\n</ul>\n</li>\n<li>Safety</li>\n</ul>\n<span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mtext>availability</mtext><mo>=</mo><mfrac><mrow><mi>M</mi><mi>T</mi><mi>T</mi><mi>F</mi></mrow><mrow><mi>M</mi><mi>T</mi><mi>T</mi><mi>F</mi><mo>+</mo><mi>M</mi><mi>T</mi><mi>T</mi><mi>R</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>M</mi><mi>T</mi><mi>T</mi><mi>F</mi></mrow><mrow><mi>M</mi><mi>T</mi><mi>B</mi><mi>F</mi></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\text{availability} = \\frac{MTTF}{MTTF + MTTR} = \\frac{MTTF}{MTBF}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em\"></span><span class=\"mord text\"><span class=\"mord\">availability</span></span><span class=\"mspace\" style=\"margin-right:0.2778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.1297em;vertical-align:-0.7693em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3603em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em\">MTTF</span><span class=\"mspace\" style=\"margin-right:0.2222em\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em\">MTTR</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em\">MTTF</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0463em;vertical-align:-0.686em\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3603em\"><span style=\"top:-2.314em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em\">MTBF</span></span></span><span style=\"top:-3.23em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em\"></span></span><span style=\"top:-3.677em\"><span class=\"pstrut\" style=\"height:3em\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em\">MTTF</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span>\n<h2 id=\"Embedded-System-Design\">Embedded System Design<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#Embedded-System-Design\"><i class=\"fa-solid fa-link\"></i></a></h2>\n<ul>\n<li>Functional and analytical</li>\n<li>Concurrency</li>\n<li>Time-constrained</li>\n<li>Architectural</li>\n</ul>\n<h2 id=\"Development\">Development<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#Development\"><i class=\"fa-solid fa-link\"></i></a></h2>\n<ul>\n<li>Multidisciplinary</li>\n<li>Development specific hardware and firmware</li>\n</ul>\n<h2 id=\"Real-time-Computing\">Real-time Computing<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#Real-time-Computing\"><i class=\"fa-solid fa-link\"></i></a></h2>\n<p>Real&#x27;time programs must guarantee response <strong>within specified time constraints</strong>.</p>\n<h3 id=\"Activation\">Activation<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#Activation\"><i class=\"fa-solid fa-link\"></i></a></h3>\n<ul>\n<li>periodic</li>\n<li>aperiodic<!-- -->\n<ul>\n<li>sporadic - minimum separation T between activations</li>\n<li>stochastic</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Time-to-Response\">Time to Response<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#Time-to-Response\"><i class=\"fa-solid fa-link\"></i></a></h3>\n<ul>\n<li>Absolute</li>\n<li>Relative</li>\n</ul>\n<h3 id=\"Temporal-Requirement\">Temporal Requirement<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#Temporal-Requirement\"><i class=\"fa-solid fa-link\"></i></a></h3>\n<ul>\n<li>Hard Real-Time<!-- -->\n<ul>\n<li>all actions must comply time constraints</li>\n</ul>\n</li>\n<li>Soft Real-Time<!-- -->\n<ul>\n<li>deadlines may be missed from time to time</li>\n<li>the time limit of the response decreases over time</li>\n</ul>\n</li>\n<li>Firm Real-Time<!-- -->\n<ul>\n<li>deadlines may occasionally be missed</li>\n<li>a late answer is useless</li>\n</ul>\n</li>\n<li>Within the same system there may be tasks with different types of temporal requirements</li>\n</ul>\n<h3 id=\"Temporal-Determinism\">Temporal Determinism<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#Temporal-Determinism\"><i class=\"fa-solid fa-link\"></i></a></h3>\n<ul>\n<li>Concurrency<!-- -->\n<ul>\n<li>Different physical variable can evolve simultaneously.</li>\n</ul>\n</li>\n<li>The response time of each output is known.</li>\n<li>The scheduling of the processor use should allow to comply the response time.</li>\n<li>Analyze temporal behavior</li>\n</ul>\n<h3 id=\"Fault-Tolerance\">Fault Tolerance<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#Fault-Tolerance\"><i class=\"fa-solid fa-link\"></i></a></h3>\n<ul>\n<li>Failure: deviation of the behavior of a system from its specification</li>\n<li>Errors: Internal state of failure</li>\n<li>Faults: the mechanical or algorithmic causes of errors</li>\n<li>Faults -&gt; Error -&gt; Failure</li>\n<li>Reliability<!-- -->\n<ul>\n<li>Failure Prevention<!-- -->\n<ul>\n<li>Avoid failure with proper design and development.</li>\n<li>Fault elimination with verification and test.</li>\n</ul>\n</li>\n<li>Fault Tolerance<!-- -->\n<ul>\n<li>Fail Operational<!-- -->\n<ul>\n<li>the system continues to work at least for a time without losing functionality or performance.</li>\n</ul>\n</li>\n<li>Fail Soft<!-- -->\n<ul>\n<li>The system continues to function with a partial loss of functionality or performance until the fault is repaired.</li>\n</ul>\n</li>\n<li>Fail Safe<!-- -->\n<ul>\n<li>the system is stopped in a state that ensures the integrity of the environment until the fault is repaired.</li>\n</ul>\n</li>\n<li>Redundancy: Duplication of critical components or function to detect faults and recover correct behavior.<!-- -->\n<ul>\n<li>Static Redundancy: Is always active, the output is the output of the majority<!-- -->\n<ul>\n<li>Duplication of hardware</li>\n<li>Different of implementation of same specification</li>\n</ul>\n</li>\n<li>Dynamic Redundancy<!-- -->\n<ul>\n<li>Cold Redundancy</li>\n<li>Hot Redundancy</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Software-Hardware-Co-Design\">Software Hardware Co-Design<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#Software-Hardware-Co-Design\"><i class=\"fa-solid fa-link\"></i></a></h2>\n<p>System design derives an abstract system representation from requirements to a model, using this abstraction allow reuse and adaptation of component libraries, but this separation of software from physicality doesn&#x27;t work for embedded system. Embedded systems design requires a more holistic approach that integrates from hardware and software design, analysis and verification. Configurable hardware platforms can integrate a larger number of components (often are ac hoc), the software and hardware are not designed separately but together.</p>\n<p>Embedded system is subject to physical constraints. Co-design allow to gain the control of the interplay between computation reaction constraints to a physical environment and execution constrains bound to hardware or implementation to meet a given set of requirements on a given set of requirements on a given implementation platform.</p>\n<h2 id=\"Simulink\">Simulink<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#Simulink\"><i class=\"fa-solid fa-link\"></i></a></h2>\n<p>We use Simulink to design la relationship between input(feedback signals, periodic input) and output(control signal).</p>\n<h2 id=\"Java-for-Embedded-System\">Java for Embedded System<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#Java-for-Embedded-System\"><i class=\"fa-solid fa-link\"></i></a></h2>\n<ul>\n<li>Pros<!-- -->\n<ul>\n<li>Dynamic Object</li>\n<li>Useful APIs</li>\n<li>Portable</li>\n</ul>\n</li>\n<li>Cons<!-- -->\n<ul>\n<li>Not suitable for real-time embedded systems.</li>\n<li>Concurrent task scheduling is not defined.</li>\n<li>Synchronization mechanisms are inadequate.</li>\n<li>Dynamic memory introduces uncertainty.</li>\n<li>Time measurement is not accurate.</li>\n<li>Other problem with exception y concurrency.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"MMIO-Memory-Mapped-IO\">MMIO (Memory-Mapped I/O)<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#MMIO-Memory-Mapped-IO\"><i class=\"fa-solid fa-link\"></i></a></h2>\n<p>Memory-mapped I/O uses the same address space and instruction to address both memory and I/O devices.</p>\n<h2 id=\"Reference\">Reference<a aria-hidden=\"true\" tabindex=\"-1\" href=\"#Reference\"><i class=\"fa-solid fa-link\"></i></a></h2>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Embedded_system\" rel=\"nofollow\" target=\"_blank\">https://en.wikipedia.org/wiki/Embedded_system</a></li>\n</ul>"
    },
    "lang": "en",
    "_nextI18Next": {
      "initialI18nStore": {
        "en": {
          "navbar": {
            "Home": "Home",
            "Language": "Language",
            "Tags": "Tags",
            "en": "English",
            "es": "Spanish",
            "zh": "Chinese"
          },
          "post-layout": { "Author": "Author: {{author}}", "Tags": "Tags" }
        }
      },
      "initialLocale": "en",
      "ns": ["navbar", "post-layout"],
      "userConfig": {
        "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] },
        "default": {
          "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] }
        }
      }
    }
  },
  "__N_SSG": true
}
