{
  "pageProps": {
    "postData": {
      "title": "Authenticated Encryption",
      "markdownContentSource": "\n## Glossary\n\n### Cryptographic Hash Function\n\nIt is a **one-way function** that maps data of arbitrary size (often called the **message**) to a bit array of a fixed size (the **hash value**, **hash**, or **message digest**). Ideally, it should be infeasible to invert and the only way to find a message that produces a given hash is to attempt a brute-force search of possible inputs to see if they produce a match.\n\n### Salt\n\nSalt is random data that is used as an additional input to a one-way function. Salts defend against attacks that use precomputed tables (e.g. rainbow table) as they can make the size of table needed for a successful attack extremely large.\n\n#### Reuse Salt\n\nReusing the same salt for numerous inputs is dangerous because it allows precomputed table which simply apply same salt to all the items in the brute force dictionary.\n\n#### Short Salt\n\nIf a salt is too short, an attacker may precompute a table of all combinations of every possible salts and every likely plaintext.\n\n### Message Authentication Code\n\nMAC is cryptographic checksum that are used to detect when an attacker has tampered with a message, so we can confirm that the message come from the trusted sender(ourselves). The MAC value protects a message integrity as well as its authenticity.\n\n### Comparison\n\n| Security Goal   | Hash | MAC       | Digital Signature |\n|-----------------|------|-----------|-------------------|\n| Integrity       | Yes  | Yes       | Yes               |\n| Authentication  | No   | Yes       | Yes               |\n| Non-Repudiation | No   | No        | Yes               |\n| Keys            | N/A  | Symmetric | Asymmetric        |\n\n## Example Application: Tamper-Proof Query Parameter\n\nSince URLs can easily be changed by even the most novice user, you need to validate to ensure that the user has not modified the query parameter to an unacceptable state.\n\nThe standard approach is a proper authentication and authorization control system in the backend or avoid passing such critical information through query parameter by using data store or external service.\n\nHowever, there are time when important state needs to be passed through the query parameter and, under no circumstances, should be it be able to be modified by the end user. In order to preserve the integrity of query parameter you will have to apply some security mechanisms.\n\n### Approach 1: Cryptographic Hash Function\n\nYou can use a cryptographic hash function to sign the value of query parameter that you do not want to be edited by user and append this signature to the query parameter. We can validate the value of query parameter by applying the same hash function to ensure that it matches to the signature we have included previously.\n\nHowever, this approach presents a problem, even the hash function is private to us, user might end up realizing the hash function we are using, e.g. sha256. Then the user can forge the value of query parameter and update the signature manually.\n\n### Approach 2: Cryptographic Hash Function With Salt\n\nTo mitigate user generating signature of query parameter, we can add the additional input (salt) before hashing. However, this approach still present certain problems, e.g. vulnerable to reply attack, authenticated users could cut and paste valid query parameter value to other users or cached by search engine, to prevent this from happening we need to create our own protocol, e.g. ensure the salt value is bind to each user e.g. session id, or make it expire after a period of time e.g. timestamp. However, most of the time salt value is not meant to be completely invisible to user, e.g. we can often retrieve session id from the browser cookie or other header and saving salt for each user might be expensive since the length of salt should be long enough and different for each user to prevent precomputed dictionary attack.\n\n### Approach 3: Message Authentication Code\n\nWe can use MAC to provide better data integrity and authenticity, MAC resist signature forgery under chosen-plaintext attacks while cryptographic hash functions doesn't. However, MAC doesn't provide confidentiality of query parameter value, it is still visible to the user, same problem with reply attack and doesn't provide confidentiality of query parameter value.\n\n### Approach 4: Authenticated Encryption\n\nIn addition to the benefits of previous approach it provides confidentiality of message. Authenticated encryption schemes can recognize improperly-constructed ciphertexts and refuse to decrypt them.\n\n#### Approach 4.1: Encrypt-then-MAC\n\n![EtM](https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/Authenticated_Encryption_EtM.png/220px-Authenticated_Encryption_EtM.png)\n\n## Reference\n\n* [Passing Tamper-Proof Query Parameters](http://aspnet.4guysfromrolla.com/articles/083105-1.aspx)\n* [Wikipedia: Message Authentication Code](https://en.wikipedia.org/wiki/Message_authentication_code)\n* [Wikipedia: HMAC](https://en.wikipedia.org/wiki/HMAC)\n* [Wikipedia: Block_cipher_mode_of_operation](https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation)\n* [Wikipedia: Authenticated Encryption](https://en.wikipedia.org/wiki/Authenticated_encryption)\n* [Wikipedia: Salt](https://en.wikipedia.org/wiki/Salt_(cryptography))\n* [Wikipedia: Rainbow table](https://en.wikipedia.org/wiki/Rainbow_table)\n* [Stack Exchange: Difference between salt and MAC](https://crypto.stackexchange.com/a/10758)\n* [Wikipedia: Digital Signature Forgery](https://en.wikipedia.org/wiki/Digital_signature_forgery)\n* [Wikipedia: Chosen-Plaintext Attack](https://en.wikipedia.org/wiki/Chosen-plaintext_attack)\n* [Stack Exchange: What are the differences between a digital signature, a MAC and a hash?\n](https://crypto.stackexchange.com/a/5647)\n* [Stack Exchange: What is the difference between a mac and a digital signiture\n](https://security.stackexchange.com/a/32134)\n* [RFC: An Interface and Algorithms for Authenticated Encryption](https://tools.ietf.org/html/rfc5116)\n* [Royal Holloway University: Authenticated Encryption](https://www.cosic.esat.kuleuven.be/school-iot/slides/AuthenticatedEncryptionII.pdf)",
      "slug": "Authenticated-Encryption",
      "date": "2021-03-28 11:21:16",
      "lang": "en",
      "tags": [
        "Mac",
        "HMAC",
        "Message Authentication Code",
        "AE",
        "Authenticated Encryption",
        "Salt"
      ],
      "path": "/Authenticated-Encryption/index.html"
    },
    "lang": "en",
    "_nextI18Next": {
      "initialI18nStore": {
        "en": {
          "common": { "Next": "Next" },
          "feature-tags": { "Tags": "Tags" },
          "navbar": {
            "Home": "Home",
            "Language": "Language",
            "Tags": "Tags",
            "en": "English",
            "es": "Spanish",
            "zh": "Chinese"
          },
          "post-layout": { "Author": "Author: {{author}}" }
        }
      },
      "initialLocale": "en",
      "ns": ["common", "feature-tags", "navbar", "post-layout"],
      "userConfig": {
        "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] },
        "default": {
          "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] }
        }
      }
    }
  },
  "__N_SSG": true
}
