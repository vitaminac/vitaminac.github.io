{
  "pageProps": {
    "postData": {
      "title": "Google Foobar Escape Pods",
      "markdownContentSource": "\nThis problem involves solving the equivalent maximum flow problem. We can use Ford–Fulkerson algorithm with BFS to calculate the total flow.\n\n# Maximum flow problem\n\nWe can use a directed graph as a flow network where the source produces the elements at some rate and the sink consumes the material at the same rate.\n\n## Definition\n\nWe define a flow network $G = (V, E)$ as a directed graph in which each edge $(u, y) \\in E$ has a nonnegative capacity $c(u, v) \\ge 0$ and there is not an edge $(v, u)$ in the reverse direction. We distinguish two vertices in a flow network: a **source s** and a **sink t**, thus for each vertex $v \\in V$, the flow network contains a path $ s \\rightsquigarrow v \\rightsquigarrow t$. A **flow** in $G$ is a real-valued function $f: V \\times V \\to R$ that satisfies $0 \\le f(u, v) \\le  c(u, v)$ and **flow conservation** implies for all $u \\in V - \\\\{s, t\\\\}$, $\\sum_{v \\in V} f(v, u) = \\sum_{v \\in V} f(u, v)$.\n\nWe call the nonegative quantity $f(u, v)$ the flow from vertex $u$ to vertex $v$. When $(u, v) \\notin E$, there can be no flow from $u$ to $v$, and $f(u, v) = 0$. The **value** $|f|$ of a flow $f$ is defined as $|f| = \\sum_{v \\in V} f(s, v) - \\sum_{v \\in V} f(v, s)$. In the **maximum-flow problem**, we are given a flow network $G$ with source $s$ and sink $t$, and we wish to find a flow of maximum value.\n\n## Transformation\n\nWe call the two edges $(v_1, v_2)$ and $(v_2, v_1)$ antiparallel. And if we wish model a flow problem with **antiparallel edges**, we must transform the network into an equivalent one containing without antiparallel edges by adding a new vertex $v^\\prime$ and replacing edege $(v_1, v_2)$ with the pair of edges $(v_1, v^\\prime)$ and $(v^\\prime, v_2)$.\n\n![Equivalent Antiparallel Flow](equivalent-antiparallel-flow.png)\n\nWhen there are several sources and sinks, we can reduce the problem to an ordinary maximum flow problem by adding a **supersource** $s$ and a directed edge $(s, s_i)$ with capacity $c(s, s_i) = \\infty$ for each $i=1, 2, ..., n$ and a new **supersink** $t$ and a directed edge $(t_i, t)$ with capacity $c(t_i, t) = \\infty$ for each $i = 1, 2, .., n$.\n\n![Equivalent Multiple Sources Sinks Flow](equivalent-multiple-sources-sinks-flow.png)\n\n## Residual Network\n\nGiven a flow network $G = (V, E)$  with source $s$ and sink $t$ and a flow $f$, the **residual network** $G_{f}$ consists of **residual edges** with capacities $c_{f}(u, v)$\n\n$$\nc_{f}(u, v) =\n\\begin{cases} \n    c(u, v) - f(u, v) & \\text{ if } (u, v) \\in E\\\\\n    f(v, u) & \\text{ if } (v, u) \\in E\\\\\n    0 & \\text{otherwise}\\\\\n\\end{cases}\n$$\n\n![Residual Network](residual-network.png)\n\n### Augmenting Paths\n\nGiven a flow network $G = (V, E)$ and a flow $f$, an **augmenting path** $p$ is a simple path from $s$ to $t$ in  the residual network $G_{f}$. We call the maximum amount by which we can increase the flow on each edge in an augmenting path $p$ the **residual capacity** of $p$, given by $c_f(p) = \\min{ \\\\{ c_f(u, v) : (u, v) \\text{ is on } p \\\\} }$.\n\n## The Ford Fulkerson Method\n\nThe Ford-Fulkerson method is a **greedy algorithm** that iteratively increases the value of the flow. At each iteration.\n\nGiven a network $G = (V, E)$ with flow capacity $c$, a source node $s$ and a sink node $t$\n1. $f \\leftarrow 0$\n2. $f(u, v) \\leftarrow 0$ for all edges $(u, v) \\in E$\n3. **while** there exists an **augmenting path** $p$\n    1. Find $c_f(p)$\n    2. $f \\leftarrow f + c_f(p)$\n    3. for each edge $(u, v) \\in p$\n       1. if $(u, v) \\in E$\n          1. $f(u, v) \\leftarrow f(u, v) + c_f(p)$\n       2. else\n          1. $f(v, u) \\leftarrow f(v, u) - c_f(p)$\n4. **return** $f$\n\n[Escape Pods](https://github.com/vitaminac/code/blob/2c9df93333/judge/src/main/java/foobar/l4/EscapePods.java)\n\n## Reference\n\n* Introduction to Algorithms, pages 708~730\n* [Ford–Fulkerson algorithm](https://en.wikipedia.org/wiki/Ford%E2%80%93Fulkerson_algorithm#Algorithm)\n* [GeeksforGeeks: Ford-Fulkerson Algorithm for Maximum Flow Problem](https://www.geeksforgeeks.org/ford-fulkerson-algorithm-for-maximum-flow-problem/)\n* [Edmonds Karp Algorithm for Max-Flow](https://www.youtube.com/watch?v=SqGeM3FYkfo)\n* [Google Foobar Round 4](https://surajshetiya.github.io/Google-foobar/#round-4)\n* [4.2_escape_pods.py](https://github.com/nkapliev/google-foo.bar/blob/master/problems/4.2_escape_pods.py)\n* [Google foo.bar 面试记](http://xiaohanyu.me/posts/2017-04-30-google-foobar-interview/#cb8)",
      "slug": "Google-Foobar-Escape-Pods",
      "date": "2019-11-22 22:35:28",
      "lang": "en",
      "tags": ["algorithms"],
      "path": "/Google-Foobar-Escape-Pods/index.html"
    },
    "lang": "en",
    "_nextI18Next": {
      "initialI18nStore": {
        "en": {
          "common": { "Next": "Next" },
          "feature-tags": { "Tags": "Tags" },
          "navbar": {
            "Home": "Home",
            "Language": "Language",
            "Tags": "Tags",
            "en": "English",
            "es": "Spanish",
            "zh": "Chinese"
          },
          "post-layout": { "Author": "Author: {{author}}" }
        }
      },
      "initialLocale": "en",
      "ns": ["common", "feature-tags", "navbar", "post-layout"],
      "userConfig": {
        "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] },
        "default": {
          "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] }
        }
      }
    }
  },
  "__N_SSG": true
}
