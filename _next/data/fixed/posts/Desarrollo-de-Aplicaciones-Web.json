{
  "pageProps": {
    "postData": {
      "title": "Desarrollo de aplicaciones Web",
      "markdownContentSource": "\n# Introducción\n\nEl navegador hace la petición mediante URL a un servidor, suele ser servidor remoto y ese servidor devuelve la información. Todo esto va por protocolo HTTP.\n\n![Navegación](navegacion.png)\n\n## Evolución de la web\n\nAl principio los servidores web únicamente servían los ficheros del disco duro, pero en día de hoy se han transformado en aplicaciones que generan cada página con la información que envía el usuario y/o la que está en la base de datos.\n\n![Aplicación Web](aplicacion-web.png)\n\n## Tipo de aplicaciones\n\n### Web estático\n\nEl servidor web sirve contenido guardado en el disco duro. El navegador visualiza los recursos, suele ser HTML, CSS, JavaScript. \n\n#### Página web estática\n\nCuando el usuario hace clicl en un enlace, el navegador repite el proceso con la URL del link y recarga por completo la página web.\n\n#### Página web interactiva\n\nLas páginas incluyen código JavaScript que se ejecuta en el navegador, y se usa para incluir efectos gráficos.\n\n### Web dinámico\n\nEl servidor web sirve contenido generado mediante código.\n\n#### Aplicación web con cliente estático\n\nGenerar el recurso dinámicomente, normalmente se hacen consultas a una base de datos. Se recarga la página al completo.\n\n#### Aplicación web interactiva\n\nEl JavaScript se utiliza para crear efectos gráficos. También se utiliza para validaciones de datos en formularios.\n\n#### Aplicación web con AJAX\n\nEl JavaScript permite hacer petición al servidor web en segundo plano y actualiza aquellas partes necesarias de la página sin recargar la página al completo.\n\n![ajax-web.png](ajax-web.png)\n\n#### Aplicación web SPA\n\nEn el lado cliente son aplicaciones autónomas, es un conjunto de recursos HTML, CSS y JavaScript que se cargan en el navegador al acceder a la URL principal. Toda la información del servidor sea obtenida con JavaScript en segundo plano, haciendo peticiones a la **API REST** y obteniendo la información en **JSON**.\n\n# [HTML](https://www.w3schools.com/html/default.asp)\n\nEs una variante de XML, tiene un representación por defecto que permite escribir un documento. Entre las etiquetas de apertura y de cierre se puede incluir texto que será visualizado en el navegador.\n\n# [CSS](https://www.w3schools.com/css/default.asp)\n\nEs un formato que diseño para dar estilo a HTML, para separar el estilo del propio contenido. Algunos de los estilos se heredan.\n\n# [Bootstrap](https://getbootstrap.com/docs/)\n\n**Bootstrap** es un framework fácil de usar y permite la creación de aplicaciones web adaptables (**responsive**), proporciona compatibilidad entre los principales navegadores.\n\n# Ejercicios de HTML, CSS y Bootstrap\n\n[Ejercicio de estilos](css_ejers.zip)\n\n## Ejericio 1\n\nCrear una página que debe incluir\n\n* Varias secciones con subsecciones\n* Fotografías/Imágenes\n* Listas de elementos\n* Una o varias tablas\n* Hiperenlaces\n\n## Ejercicio 2\n\nCrea una página web con HTML y CSS con el siguiente botón\n![Twitter](ejercicio2.png)\n\n## Ejercicio 3\n\nAplica el siguiente estilo\n\n![Posición](ejercicio3_1.png)\n![Fuente](ejercicio3_2.png)\n![Menú](ejercicio3_3.png)\n![Imagenes](ejercicio3_4.png)\n![Pie de la página](ejercicio3_5.png)\n\n* Imágenes de fondo\n  * Propiedad background\n  * Se puede poner un color por si no carga la imagen\n  * Se indica la ruta de la imagen con la función url(…)\n  * Se indica la repetición de la imagen\n  * Otras propiedades de la imagen\n\n* Otros detalles CSS\n  * Padding y margin con valor cero a todos los elementos de la página\n  * Tamaño de texto a todos los elementos del body a 0.6em y tipo de letra sans-serif\n  * Posicionamiento en profundidad: z-index: 1\n  * Quitar los puntos de una lista:\n\n## Ejercicio 4\n\nActualizar la página del ejercicio 3 para que sea responsive usando bootstrap\n\n## [Más ejemplos](css-ejemplo.zip)\n\n# [JavaScript](https://www.w3schools.com/js/default.asp)\n\nEs un lenguaje de programación interpretado que permite mejorar en la interfaz de usuario y página web dinámica. Con JavaScript se puede modificar la página y ejecutar código cuando se interactúa con ella a través del modelo de objetos del documento **DOM**. También se pueden hacer peticiones al servidor web en segundo plano y actualizar el contenido de la web con los resultados (**AJAX**).\n\n## [DOM](https://www.w3schools.com/js/js_htmldom.asp) (Document Object Model)\n\nLibrería (API) para manipular el documento HTML cargado en el navegador. Permite la gestión de eventos, insertar y eliminar elementos, etc.\n\n## [BOM](https://developer.mozilla.org/en-US/docs/Web/API/Window) (Browser Object Model)\n\nAcceso a otros elementos del browser: historial, peticiones de red AJAX, etc... El **BOM** incluye al DOM como uno de sus elementos.\n\n## Integración con HTML\n\nEl código JavaScript se puede incluir directamente en el documento HTML en etiquetas \\<script\\>. Pero es recomendable que el código JS esté en ficheros aparte. El código será cargado y ejecutado cuando se\nencuentre en el documento, antes de continuar procesando el HTML. Cuando se carga el JavaScript no se pueden cargar otros recursos en paralelo, por ello, se recomienda poner el elemento \\<script\\> como último elemento de la página.\n\n# [jQuery](https://www.w3schools.com/jquery/default.asp)\n\njQuery es una librería JavaScript para lidiar con estos problemas e incompatibilidades. Además ofrece un interfaz mucho más directo e intuitivo interactuar con el documento y el navegador.\n\n## [Ejemplos](javascript-ejemplo.zip)\n\n## [Ejercicios](javascript-ejercicio.zip)\n\n# [Maven](https://maven.apache.org/)\n\n* Sistema de gestión de dependencias (librerías) y sus versiones\n* Sistema de construcción de proyectos\n* Estructura única de proyecto compatible con todos los **entornos de desarrollo** y sistemas de **integración continua**\n\n**pom.xml** Configuración del proyecto\n\n# [Spring](https://spring.io/guides)\n\nSpring permite el desarrollo de aplicaciones de servidor.\n\n## Spring Boot\n\nFacilita el desarrollo de aplicaciones con Spring, simplifica la configuración y acelera el desarrollo.\n\n## [Inyección de dependencias](https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-spring-beans-and-dependency-injection.html)\n\nLa inyección de dependencias es una técnica que permite especificar un módulo y sus dependencias. Cuando se inicia la aplicación, el framework crea todos los módulos e inyecta las dependencias en los módulos que las necesitan.\n\n![Inyección de dependencias](Inyeccion-de-dependencia.png)\n\n## [Spring MVC](https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html)\n\nSpring MVC es una parte de Spring para la construcción de aplicaciones web, sigue la arquitectura MVC (**Model View Controller**).\n\n![Spring MVC](SpringMVC.png)\n\n### Controlador\n\n1) Manipulan los datos\n2) Obtienen los datos\n3) Deciden qué plantilla generará el HTML partiendo de esos datos\n\n### Vista\n\nLas vistas en Spring MVC se implementan como plantillas HTML definidas en base a la información del modelo.\n\n#### Generación de HTML con [Mustache](https://mustache.github.io/mustache.5.html)\n\nLos ficheros HTML se generar con plantillas que contienen código HTML junto con referencias a variables y funciones.\n\n![Condición en Mustache](mustache-condition.png)\n![Repetición en Mustache](repetition-mustache.png)\n\n## Formularios y Enlaces\n\n### Formas de enviar información del navegador al servidor\n\n#### Mediante formularios HTML\n\n* La información se envía como pares clave=valor\n* Se accede a la información como parámetros en los métodos del controlador\n\n#### Insertando información en la URL de enlaces\n\nPara acceder a la información se usa el mismo mecanismo que para leer los campos del formulario.\n\n## Sesión y Información persistente\n\nEs habitual que las aplicaciones web gestionen información diferente para cada usuario, información\nespecífica para el usuario identificado en la página que los demás usuarios no podrán consultar\n\n### Sesión\n\nMantener información mientras el usuario navega por la web\n\n### Información persistente\n\nLa información se suele guardar en el servidor web en una BBDD y la lógica de la aplicación determina a qué\ninformación de la BBDD puede acceder cada usuario.\n\n* Objeto HttpSession\n* Componente específico para cada usuario\n\n![Objeto sessión](object-session.png)\n\n![Componente para el usuario 1](user-component-1.png)\n![Componente para el usuario 2](user-component-2.png)\n\n## [Ejemplos y Ejercicios](https://github.com/codeurjc/Sprint-T1-Web/)\n\n# APIs REST\n\nEn una aplicación web, el cliente (navegador) se comunica con el servidor (servidor web) usando el protocolo http. En una aplicación web sin AJAX, las peticiones http devuelven un documento HTML que será visualizado por el navegador. En las aplicaciones con AJAX y las aplicaciones SPA, las peticiones http se utilizan para intercambiar información entre el navegador y el servidor (pero no HTML), por ejmplo, con API REST.\n\n![APIs REST](APIs-REST.png)\n\nREST es acrónimo de REpresentational State Transfer, un servicio que ofrece operaciones CRUD (creación, lectura, actualización y borrado) sobre recursos (items de información) del servidor web. Se aprovecha de todos los aspectos del protocolo http: URL, métodos, códigos de estado, cabeceras...\n\n## La información se intercambia en formato **JSON** (o XML)\n\nJSON es acrónimo de JavaScript Object Notation, se utiliza para la codificación de la información en la mayoría de los servicios REST y se procesa de forma muy rápida en JavaScript.\n\n## Los recursos se identifican en la URI\n\nParte de la URL es fija y otra parte apunta al recurso concreto\n\n* http://server/anuncios/vendo-moto-23-10-2014\n* http://server/users/bob\n* http://server/users/bob/anuncio/comparto-piso\n* http://server/users/bob/anuncio/44\n\n## Las operaciones se codifican como métodos http\n\n* GET: Devuelve el recurso, generalmente codificado en JSON. No envían información en el cuerpo de la petición.\n* DELETE: Borra el recurso. No envían información en el cuerpo de la petición.\n* POST: Añade un nuevo recurso. Envía el recurso en el cuerpo de la petición.\n* PUT: Modifica el recurso. Habitualmente se envía el recurso obtenido con GET pero modificando los campos que se consideren (existen optimizaciones)\n\n## La información se devuelve codificada en JSON\n\nPetición:\nURL: http://server/bob/bookmarks/6\nMétodo: GET\n\nRespuesta:\nmime-type: application/json\nBody:\n\n    {\n        id:6,\n        uri: \"http://bookmark.com/2/bob\",\n        description: \"A description\"\n    }\n\n## Se usan los códigos de estado http para notificar errores\n\n* 100-199: No están definidos. Describen fases de ejecución de la petición.\n* 200-299: La petición fue procesada correctamente.\n* 300-399: El cliente debe hacer acciones adicionales para completar la petición, por ejemplo, una redirección a otra página.\n* 400-499: Se usa en casos en los que el cliente ha realizado la petición incorrectamente (404 No existe).\n* 500-599: Se usa cuando se produce un error procesando la petición.\n\n## [API REST Ejemplos](API-REST-ejemplos.zip)\n\n## [API REST Ejercicios](API-REST-ejercicios.zip)\n\n## Cliente JavaScript\n\nLas aplicaciones web con AJAX o con arquitectura SPA, implementadas con JavaScript, usan servicios REST desde el navegador\n\n    // Muestra en la página los títulos de los libros\n    $(document).ready(function(){\n        $.ajax({\n            url:\"https://www.googleapis.com/books/v1/volumes?q=intitle:java\"\n        }).done(function(data) {\n            for(var i=0; i<data.items.length; i++){\n                $(\"body\").append(\"<p>\"+data.items[i].volumeInfo.title+\"</p>\");\n            }\n        });\n    });\n\n## APIs REST con Spring\n\nPara implementar una API REST con Java se puede usar **JAX-RS** o **Spring MVC**.\n\nSe crea un controlador con la clase @RestController.\n\nSe implementa un método en la clase por cada URL de la API REST, se anota con **@RequestMapping** para indicar la URL y el método http. El método devuelve el objeto que quiere enviar al cliente.\n\n### POST\n\n* En @RequestMapping se indica que el método atiende peticiones POST\n* El cuerpo de la petición se obtiene con un parámetro anotado con @RequestBody\n* La anotación **@ResponseStatus(HttpStatus.CREATED)** indica que se devuelva el estado 201 al cliente si todo va bien\n* Se devuelve el nuevo objeto al cliente (con un id)\n\n![Spring MVC Post](Spring-Post.png)\n\n### GET\n\n* En **@RequestMapping** se indica que el método atiende peticiones GET\n* El id del recurso se condifica en la URL y se accede a él usando un @PathVariable\n* Si el recurso existe se devuelve, y si no, se devuelve 404 NOT FOUND. Por eso el método devuelve un **ResponseEntity**.\n\n![Spring MVC Get](Spring-Get.png)\n\n### DELETE\n\n* En **@RequestMapping** se indica que el método atiende peticiones DELETE\n* El id del recurso se condifica en la URL y se accede a él usando un @PathVariable\n* Si el recurso existe se borra y opcionalmente se devuelve\n* Si no existe, se devuelve 404 NOT FOUND. Por eso el método devuelve un ResponseEntity\n\n![Spring MVC Delete](Spring-Delete.png)\n\n### PUT\n\n* En **@RequestMapping** se indica que el método atiende peticiones PUT\n* El id del recurso se condifica en la URL y se accede a él usando un @PathVariable\n* El nuevo anuncio se envía en el body y se accede con @RequestBody\n* Si el recurso existe se actualiza y se devuelve de nuevo\n* Si no existe, se devuelve 404 NOT FOUND. Por eso el método devuelve un ResponseEntity\n\n![Spring MVC Put](Spring-Put.png)\n\n### Controller\n\nCuando todas las URLs de un controlador empiezan de forma similar, se puede poner la anotación **@RequestMapping** a nivel de clase con la parte común. Cada método sólo tiene que incluir la parte propia.\n\n### JSON\n\nCuando se implementa una API REST es deseable controlar cómo se convierten los objetos a JSON (y viceversa). Spring utiliza la librería Jackson en modo data binding para hacer esta tarea.\n\n#### Ignorando atributos circulares\n\nSe pueden ignorar del JSON los atributos de la clases que generan la referencia circular.\n\n#### Datos diferentes por URL\n\nTener más o menos información en función de si estamos accediendo a la lista de objetos o a un objeto concreto.\n\n1. Creamos un nuevo interfaz Java\n2. Anotamos algunos atributos con **@JsonView** pasando ese interfaz como parámetro\n3. Anotamos el método de **@RestController** igual que los atributos (**@JsonView** con el interfaz como parámetro)\n4. Los objetos que devuelva el método tendrán únicamente los atributos con ese interfaz\n\n![JSON View](JSON-view.png)\n\nSi queremos que en un método de la API REST se devuelvan atributos anotados con diferentes interfaces hay que crear un nuevo interfaz\n\nEse nuevo interfaz tiene que heredar de los interfaces usados por los atributos.\n\nUsamos ese interfaz en el **@JsonView** del método del **@RestController**\n\n![JSON View](JSON-view2.png)\n\n### RestTemplate\n\nPara hacer peticiones REST en Spring se usa un objeto de la clase RestTemplate. Se indica la URL y la clase de los objetos que devolverá la consulta.\n\n![Rest Template](Rest-Template.png)\n\nEs posible acceder a los datos directamente sin definir clases.\n\n![Rest Template JSON](Rest-Template-JSON.png)\n\n## [Ejemplos y Ejercicios de APIs REST](https://github.com/codeurjc/Spring-T2-REST)\n\n# Bases de datos con Spring\n\n![BBDD](BBDD.png)\n\nTiene un completo soporte de acceso a bases de datos de diferentes tipos. El proyecto Spring Data ofrece mecanismos para el acceso a Bases de datos SQL y no relacionales.\n\n* Creación del esquema partiendo de las clases del código Java (o viceversa)\n* Conversión automática entre objetos Java y el formato propio de la base de datos\n* Creación de consultas en base a métodos en interfaces\n\n![Entity](Spring-data-entity.png)\n\n![Query](Spring-data-query.png)\n\n![Repository](Spring-data-repository.png)\n\n## [JPA](https://spring.io/guides/gs/accessing-data-jpa/)\n\n**ORM** o “mapeo objeto relacional” realiza las conversiones pertinentes entre objetos/clases y filas/tablas. Se genera una tabla por cada entidad, por cada atributo de la clase de un tipo simple (entero, float, String, boolean...), se crea un campo en la tabla.\n\n![Spring Data ORM](Spring-data-ORM.png)\n\n### Relación 1:1 unidireccional\n\n![One to One](Spring-data-one-to-one.png)\n\n### Operaciones en cascada\n\nSi la anotación **@OneToOne** se configura con **cascade = CascadeType.ALL** entonces ambos objetos de la relación tienen el mismo ciclo de vida. Al guardar el objeto principal, se guarda el asociado, Al borrar el objeto principal, se borra el asociado.\n\n![Cascade](Spring-data-cascade.png)\n\n### Relación 1:1 bidireccional\n\n![One to One bidirectional](Spring-data-one-to-one-bidirectional.png)\n\n### Relación 1:N\n\nCuando existe una relación 1:N entre entidades se usan las anotaciones **@OneToMany** y **@ManyToOne**.\n\n![One to Many](Spring-data-one-to-many.png)\n![Many to One](Spring-data-many-to-one.png)\n\n### Relación M:N\n\nCuando existe una relación M:N entre entidades se usa la anotación **@ManyToMany**\n\n![Many to Many](Spring-data-many-to-many.png)\n\n## Repositorio\n\n* Consulta\n  * List find...By...(...)\n  * List read...By...(...)\n  * List query...By...(...)\n  * List get...By...(…)\n* Contar\n  * int count...By...(...)\n* Expresiones\n  * And\n  * Or\n* Comparadores\n  * Between\n  * LessThan\n  * GreatherThan\n* Modificadores\n  * IgnoreCase\n* Ordenación\n  * OrderBy...Asc\n  * OrderBy...Desc\n\n### Propiedades de los objetos relacionados\n\nNo sólo podemos filtrar por un atributo de la propia entidad, también podemos filtrar por un atributo de otra entidad con la que esté relacionada la principal\n\n![Spring Data Object Relation](Spring-data-object-relation.png)\n\n### Paginación\n\n![Pagination](Spring-data-pagination.png)\n\n#### Pageable\n\nEl objeto Pageable incluye la información de ordenación de la URL.\n\n![Pageable](Spring-data-pageable.png)\n\n#### Ordenación\n\nPodemos pasar un parámetro de tipo Sort que controla la ordenación\n\n    repository.findAll(new Sort(\"nombre\")));\n    repository.findAll(new Sort(new Order(Sort.Direction.ASC, \"nombre\"))));\n\n#### Limitar los resultados\n\n    User findFirstBy...();\n    User findTopBy...();\n    User findTopDistinctBy...();\n    List<User> queryFirst10By...();\n    List<User> findTop3By...();\n    List<User> findFirst10By...();\n\n### Java Persistence Query Language (JPQL)\n\n    public interface TeamRepository extends JpaRepository<Team, Long> {\n        @Query(\"select t from Team t where t.name = ?1\")\n        List<Team> findByName(String name);\n    }\n\n## Configuración\n\n![Spring data configuration](Spring-data-configuration.png)\n\n## Arquitectura\n\n![Spring Data Arquitecture](Spring-data-arquitecture.png)\n\nLos servicios y los módulos de integración suelen estar anotados con **@Service** para indicar su naturaleza **@Service** es similar a **@Component**\n\n## [Ejemplos y Ejercicios de Spring Data](https://github.com/codeurjc/Spring-T3-DB)\n\n# Seguridad con Spring\n\n## Autenticación\n\nSirve para garantizar que una entidad (persona o máquina) es quien dice ser, se consigue mediante unas credenciales **login-password**\n\n## Autorización\n\nSirve para discernir si una entidad tiene acceso a un recurso determinado, determina si un usuario puede acceder a un recurso determinado mediante **roles**\n\n## Integridad\n\nGarantiza al receptor del mensaje que los datos recibidos coinciden exactamente con los enviados por el emisor. La integridad se consigue típicamente con funciones **Hash** (resumen)\n\n## Confidencialidad\n\nProporciona protección para evitar que los datos sean revelados a un usuario no autorizado. La confidencialidad se consigue típicamente usando técnicas criptográficas de cifrado de mensajes.\n\n## HTTPS\n\nCon HTTPS se consigue que toda la información que se intercambie un navegador web con un servidor web esté cifrada.\n\n## Spring security\n\n### Comunicación cifrada con https\n\n    server.port = 8443\n    server.ssl.key-store = classpath:keystore.jks\n    server.ssl.key-store-password = password\n    server.ssl.key-password = secret\n\n### Usuario con credenciales en código\n\n* Spring-security impide que un usuario pueda acceder a ciertas páginas si no se ha autenticado correctamente\n* Si el usuario intenta acceder, se le redirige al formulario de login\n* El desarrollador configura qué páginas son públicas y cuales son privadas\n\n![Spring Security Configuration](Spring-Security-Config.png)\n\n![Credenciales en código](Spring-security-credenciales.png)\n\n### Protección con CSRF\n\nCross Site Request Forgery es un tipo de ataque en el que una página web intenta hacer una petición a otra web en la que estás logueado. La forma de evitarlo es generar un token por cada formulario y verificar que el token es válido al procesar los datos del formulario. Cada formulario en una web con protección CSRF\ndebería ser similar a este.\n\n![Spring Security CSRF](Spring-security-CSRF.png)\n\n    @RequestMapping(\"/login\")\n    public String login(Model model, HttpServletRequest request) {\n\n        CsrfToken token = (CsrfToken) request.getAttribute(\"_csrf\");\n        model.addAttribute(\"token\", token.getToken());\n\n        return \"login\";\n    }\n\nPara pasar el token al cada modelo implementamos un handler\n\n![Spring Security CSRF Handler](Spring-Security-CSRF-handler.png)\n\n## Diferentes tipos de usuarios\n\nConfiguramos las páginas que puede ver cada tipo de usuario\n\n    @Configuration\n    public class SecurityConfiguration extends WebSecurityConfigurerAdapter {\n        @Override\n        protected void configure(HttpSecurity http) throws Exception {\n\n            // Public pages\n            ...\n            // Private pages (all other pages)\n            http.authorizeRequests().antMatchers(\"/home\").hasAnyRole(\"USER\");\n            http.authorizeRequests().antMatchers(\"/admin\").hasAnyRole(\"ADMIN\");\n            // Login form\n            ...\n            // Logout\n            ...\n        }\n    }\n\n## [Usuarios en BBDD](https://www.baeldung.com/spring-security-authentication-with-a-database)\n\n## Características para Web SPA + API REST con seguridad\n\n* Acceso público y Acceso restringido\n* Comunicación cifrada con HTTPS\n* Autenticación mediante HTTP Basic Auth\n* Autorización basada en URLs\n* Gestión de sesión: Cookies y HttpSession\n* No se usa protección para CSRF\n\n## [Ejemplos y Ejercicios de Spring Security](https://github.com/codeurjc/Spring-T4-Security)\n\n# Despliegue de apps Spring\n\n## Jar\n\nEs lo más recomendable porque facilita la actualización de la aplicación al no estar limitado por el contenedor ni el administrador. Las arquitecuturas basadas en microservicios promueven este formato.\n\n## War\n\nEl formato de empaquetado de apps web Java más usado, ideal cuando varias aplicaciones web están en el mismo servidor físico y el mismo dominio\n\n### Ejecutar la app web con el .war\n\nNecesitamos tener un servidor disponible, cada servidor tiene su propio sistema de depliegue vía web o\nusando algún tipo de cliente. Veremos cómo desplegar en Tomcat vía web.\n\n## [Ejemplos y Ejercicios](https://github.com/codeurjc/Spring-T5-Deployment)",
      "slug": "Desarrollo-de-Aplicaciones-Web",
      "date": "2019-02-25 11:29:55",
      "lang": "es",
      "tags": [
        "Aplicación Web",
        "HTMl",
        "JavaScript",
        "CSS",
        "Spring",
        "JPA",
        "Tomcat"
      ],
      "path": "/Desarrollo-de-Aplicaciones-Web/index.html"
    },
    "lang": "es",
    "_nextI18Next": {
      "initialI18nStore": {
        "es": {
          "navbar": {
            "Home": "Inicio",
            "Language": "Lenguaje",
            "Tags": "Tags",
            "en": "Inglés",
            "es": "Español",
            "zh": "Chino"
          },
          "post-layout": { "Author": "Autor: {{author}}", "Tags": "Tags" }
        },
        "en": {
          "navbar": {
            "Home": "Home",
            "Language": "Language",
            "Tags": "Tags",
            "en": "English",
            "es": "Spanish",
            "zh": "Chinese"
          },
          "post-layout": { "Author": "Author: {{author}}", "Tags": "Tags" }
        }
      },
      "initialLocale": "es",
      "ns": ["navbar", "post-layout"],
      "userConfig": {
        "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] },
        "default": {
          "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] }
        }
      }
    }
  },
  "__N_SSG": true
}
