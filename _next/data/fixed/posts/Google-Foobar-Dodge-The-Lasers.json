{
  "pageProps": {
    "postData": {
      "title": "Google Foobar Dodge The Lasers",
      "lang": "en",
      "markdownContentSource": "\n# Beatty sequence\n\nThis problem require to calculate $\\sum_{i=1}^{n} \\lfloor i\\sqrt{2} \\rfloor$. We must take into consideration the precision and the performance. The $n$ can be very large, up to 101 digits. There several aspect. How to take floor more efficiently? How to deal with big number? After a few search I found that there is a specific algorithm. This type of problem involves a mathematical concept: Beatty sequence. In mathematics, a Beatty sequence is the sequence of integers found by taking the floor of the positive multiples of a positive irrational number.\n\n$$\n\\mathcal{B}_r = \\lfloor r \\rfloor ,\\ \\lfloor 2r \\rfloor ,\\ \\lfloor 3r \\rfloor ,\\dots\n$$\n\nLet $\\mathcal{B}_r^{(i)} = \\lfloor i*r \\rfloor$ for some irrational positive number,\n\nand\n\n$S(r, n) = \\sum_{i=1}^{n}{\\mathcal{B}_r^{(i)}}$\n\nIf $r \\ge 2$ we let $s = r - 1$ and we have $S(r, n) = S(s, n) + \\sum_{i=1}^{n} i = S(s, n) + \\frac{n(n+1)}{2}$\n\nIf $1 < r < 2$ there is a theorem that says that if $s$ satisfies $r^{-1} + s^{-1} = 1$, then the sequences $\\mathcal{B}_r$ and $\\mathcal{B}_s$ for $n \\ge 1$ partition $\\mathbb{N}$ (not counting 0).\n\nTherefore, $S(r, n) + S(s, \\lfloor \\frac{\\mathcal{B}_r^{(n)}}{s} \\rfloor) = \\sum_i^{\\mathcal{B}_r^{(n)}} i = \\frac{\\mathcal{B}_r^{(n)}(\\mathcal{B}_r^{(n)} + 1)}{2}$\n\nAnd also $\\lfloor \\frac{\\mathcal{B}_r^{(n)}}{s} \\rfloor = \\lfloor \\mathcal{B}_r^{(n)}(1 - \\frac{1}{r}) \\rfloor = \\mathcal{B}_r^{(n)} - \\lceil \\frac{\\mathcal{B}_r^{(n)}}{r} \\rceil = \\mathcal{B}_r^{(n)} - n$\n\nThen, letting $n^{\\prime} = \\lfloor (r - 1)n \\rfloor = \\mathcal{B}_{r-1}^{n}$\n\nwe have $S(r,n) = \\frac{\\mathcal{B}_r^{(n)}(\\mathcal{B}_r^{(n)} + 1)}{2} - S(s, n^{\\prime}) = \\frac{(n + n^{\\prime})(n + n^{\\prime} + 1)}{2} - S(s, n^{\\prime})$.\n\nBack to the problem, we have $r = \\sqrt{2}$, so we start with $s = 2 + \\sqrt{2}$. We can get a recurrence formula.\n\nLet $n^{\\prime} = \\lfloor (\\sqrt{2} - 1)n \\rfloor$,\n\n$$\n\\begin{split}\nS(\\sqrt{2}, n) \n&= \\frac{(n + n^{\\prime})(n + n^{\\prime} + 1)}{2} - S(2 + \\sqrt{2}, n^{\\prime})\\\\\n&= \\frac{(n + n^{\\prime})(n + n^{\\prime} + 1)}{2} - (n^{\\prime}(n^{\\prime} + 1) - S(\\sqrt{2}, n^{\\prime}))\\\\\n&= nn^{\\prime} + \\frac{n(n+1)}{2} - \\frac{n^{\\prime}(n^{\\prime} + 1)}{2} - S(\\sqrt{2}, n^{\\prime})\n\\end{split}\n$$\n\n[Dodge The Lasers](https://github.com/vitaminac/code/blob/2c9df93333/judge/src/main/java/foobar/l5/DodgeTheLasers.java)\n\n## Reference\n\n* [How to find $\\sum_{i=1}^{n} \\left\\lfloor i\\sqrt{2} \\right\\rfloor$](https://math.stackexchange.com/a/2053713/698177)\n* [A beatty sequence A001951](https://oeis.org/A001951)\n* [Beatty sequence](https://en.wikipedia.org/wiki/Beatty_sequence)\n* [sun-mylove's solution](https://github.com/sun-mylove/google-foobar/blob/master/lev05_ch01.py)\n* [arinkverma's solution](https://github.com/arinkverma/google-foobar/blob/master/5.1_dodge_the_lasers.py)\n* [oneshan's solution](https://github.com/oneshan/foobar/blob/master/dodge_the_lasers/solution.py)\n",
      "slug": "Google-Foobar-Dodge-The-Lasers",
      "date": "2019-12-17 22:50:54",
      "tags": ["algorithms"],
      "path": "/Google-Foobar-Dodge-The-Lasers/index.html"
    },
    "lang": "en",
    "_nextI18Next": {
      "initialI18nStore": {
        "en": {
          "navbar": {
            "Home": "Home",
            "Language": "Language",
            "Tags": "Tags",
            "en": "English",
            "es": "Spanish",
            "zh": "Chinese"
          },
          "post-layout": { "Author": "Author: {{author}}", "Tags": "Tags" }
        }
      },
      "initialLocale": "en",
      "ns": ["navbar", "post-layout"],
      "userConfig": {
        "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] },
        "default": {
          "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] }
        }
      }
    }
  },
  "__N_SSG": true
}
