{
  "pageProps": {
    "postData": {
      "title": "Docker",
      "lang": "es",
      "markdownContentSource": "\n# Introducción\n\nLa idea detrás de Docker es crear contenedores ligeros y portables para las aplicaciones software que puedan ejecutarse en cualquier máquina con Docker instalado, independientemente del sistema operativo que la máquina tenga por debajo, facilitando así también los despliegues y la integración continua.\n\n## Imagen Docker\n\nEs una plantilla para un contenedor. Tiene So como Ubuntu, Debian, librería como Java y app .jar.\n\n## Docker Hub\n\nServicio remoto que se usa para almacenar y traer imagenes.\n\n## Contenedor Docker\n\nun contener se crea a partir de un imagen docker, es equivalente a una máquina virtual. Cuando se modifica el contenido, se modifica el contenedor y la imagen no, se puede ejecutar, pausar o parar.\n\n## Docker Engine\n\n![Docker](docker.png)\n\nLa virtualización y los contendores facilitan la gestión del entorno de CI (Continuous Integration) porque son los propios desarrolladores.\n\n# Ejemplo\n\n    docker run alpine ls -l\n\nCrea un nuevo contenedor y lanzarlo, cuyo imagen se llama alpine, el imagen es descargado si no está almacenado en la máquina local, pasamos el comando **ls -l** que va a ejecutar en dicho contenedor.\n\n    docker run alpine seqvence/static-site\n\nEjecutamos el contenedor en background.\n\n    docker ps\n\nListar conjunto de contenedores que están ejecutando.\n\n    docker stop a7a0e504ca3e\n\nParar un contenedor identificado por a7a0e504ca3e\n\n    docker rm a7a0e504ca3e\n\nEliminar un contenedor identificado por a7a0e504ca3e\n\n    docker run --name static-site -e AUTHOR=\"Your Name\" -d -p 9000:80 seqvence/static-site\n\nEspecificamos explicitamente el nombre de contenedor, ejecutarlo como daemon, y mapear el puerto local 9000 al puerto 80 del contenedor.\n\n    docker stop static-site\n\nParar un contenedor\n\n    docker pull ubuntu:12.04\n\nDescargar la imagen de cierta versión.\n\n## DockerFile\n\nArchivo que usa para descripbir un nuevo imagen.\n\n[Dockerfile](https://github.com/docker/labs/blob/master/beginner/flask-app/Dockerfile)\n\n### Crear Imagen\n\nEn la carpteta de Dockerfile ejecutamos\n\n    docker build -t myfirstimage .\n\nGenera el imagen correspondiente\n\n### Macro\n\n* FROM: Imagen base\n* COPY: Copiar archivos desde la carpeta de Dockerfile\n* RUN ejecutar los comandos\n* EXPOSE: puertos publicos\n* CMD: comandos a ejecutar al crear la imagen\n\n## publicar nuestro imagen\n\n    docker build ­t <YOUR_USERNAME>/myfirstapp .\n\n## Volúmenes de datos\n\nDesde un contenedor se puede acceder al contenido de una o varias carpetas del host. ● Eso permite que el contenedor pueda leer su contenido y también pueda generar nuevos ficheros que guarda en el host. Los volúmenes de datos se configuran con el comando **-v host_folder:cont_folder**.\n\n    docker run ­d ­p 9000:80 ­v $PWD:/usr/share/nginx/html nginx\n\nServir por http un contenido estático que tengamos en el disco duro\n\n## Aplicaciones multicontenedor\n\nEs recomendable que cada contenedor se usa para un único proceso, pero es habitual que las aplicaciones tengan varios procesos. Pero es habitual que las aplicacaciones tengan varios procesos (web + bd). Docker-compose nos permite definir un conjunto de contenedores que colaboran entre si formando una aplicación. El fichero docker-compose.yml define los contenedores y las relaciones entre ellos.\n\n[Docker-Compose](https://github.com/dockersamples/example-voting-app/blob/master/docker-compose.yml)\n\nPara ejecutar la aplicación\n\n    docker­compose up ­d\n\n## Docker Swarm\n\nServicio Local que se usa para controlar docker, manejar imagenes, manejar contenedores.\n\n![Docker Swarm](docker-swarm.png)",
      "slug": "Docker",
      "date": "2019-02-26 22:31:02",
      "tags": ["Docker", "Contenedor", "Container", "Virtualización", "DevOps"],
      "path": "/Docker/index.html"
    },
    "lang": "es",
    "_nextI18Next": {
      "initialI18nStore": {
        "es": {
          "navbar": {
            "Home": "Inicio",
            "Language": "Lenguaje",
            "Tags": "Tags",
            "en": "Inglés",
            "es": "Español",
            "zh": "Chino"
          },
          "post-layout": { "Author": "Autor: {{author}}", "Tags": "Tags" }
        },
        "en": {
          "navbar": {
            "Home": "Home",
            "Language": "Language",
            "Tags": "Tags",
            "en": "English",
            "es": "Spanish",
            "zh": "Chinese"
          },
          "post-layout": { "Author": "Author: {{author}}", "Tags": "Tags" }
        }
      },
      "initialLocale": "es",
      "ns": ["navbar", "post-layout"],
      "userConfig": {
        "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] },
        "default": {
          "i18n": { "defaultLocale": "en", "locales": ["en", "es", "zh"] }
        }
      }
    }
  },
  "__N_SSG": true
}
